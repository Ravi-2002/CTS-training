it("calls callMdotAndDdotRedirectURLs for block button when channel is non-MVA", () => {
    (getClientChannelId as jest.Mock).mockReturnValue("VZW-WEB");
    render(<SettingPreferences {...props} />);
    fireEvent.click(screen.getByText("Block Calls")); // special link + non-MVA
    expect(getOnClickInfo).toHaveBeenCalled();
    expect(clickInfoMock.onclick).toHaveBeenCalled();
  });

  it("uses getOnClickInfoMobile when enableBlocksMVA is false", () => {
    props.deviceDetails.body.pageAttributes.manageBlocksMVAFFlag = "false";
    (getClientChannelId as jest.Mock).mockReturnValue("VZW-MFA");

    render(<SettingPreferences {...props} />);
    fireEvent.click(screen.getByText("Block Services"));
    expect(getOnClickInfoMobile).toHaveBeenCalled();
    expect(clickInfoMobileMock.onclick).toHaveBeenCalled();
  });

  it("toggles accordion and flips data-track attribute properly", () => {
    render(<SettingPreferences {...props} />);
    const header = screen.getByRole("button", { name: /Expanded|Collapsed/i });

    // initial open state
    expect(header).toHaveAttribute("data-track", "expanded");

    fireEvent.click(header); // collapse
    expect(header).toHaveAttribute("data-track", "collapsed");

    fireEvent.click(header); // expand again
    expect(header).toHaveAttribute("data-track", "expanded");
  });