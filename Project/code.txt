import React, { useState, useEffect, useRef } from "react";
import { useDispatch, useSelector } from "react-redux";
import styled from "styled-components";
import * as actions from '../home/actions';
import ToNumberShare from "./ToNumberShare";
import { isEmpty } from '../../utils/utilities'
import CommonModal from "../CommonModal/CommonModal";
import * as modalData from "../CommonModal/modalText.json";
import { useHistory, useParams } from "react-router-dom";
import CustomLoader from '../../../shared/components/Loader/CustomLoader';
import useHandleMoveLineResponse from '../shared/useMoveLineHandler';
import { moveLine, createSubmitForm, getDeviceDetails, getChildDetails, onConfirmation } from "./numbershareUtils";

const ToNumberShareContainer = () => {
  const dispatch = useDispatch();
  const history = useHistory();
  const { id } = useParams();

  const [showModal, setShowModal] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isInitTagging, setIsInitTagging] = useState(false);

  const parentId = useRef("");
  const childId = useRef("");
  const newParent = useRef({});
  const child = useRef({});

  const isFetching = useSelector(state => state.devices.isFetching);
  const deviceDetails = useSelector(state => state.devices.deviceDetails);
  const cqData = useSelector(state => state.devices.cqData);
  const connectableDevices = useSelector(state => state.devices.connectableDevices);
  const errorMessage = useSelector(state => state.devices.errorMessage);
  const moveLineResponse = useSelector(state => state.devices.moveLineResponse);
  const [moveLineRequested, setMoveLineRequested] = React.useState(false);

  useEffect(() => {
    window.scrollTo(0, 0);

    if (id && id !== "") {
      childId.current = decodeURIComponent(id);
      dispatch(actions.setSelectedDeviceId(childId.current));
      dispatch(actions.fetchDevices());
    } else {
      window.location.href = '/';
    }
    // eslint-disable-next-line
  }, [id, dispatch]);

  useEffect(() => {
    if (!isFetching && deviceDetails && !isInitTagging) {
      setIsInitTagging(true);
    }
  }, [isFetching, deviceDetails, isInitTagging]);

  // useEffect(() => {
  //   if (!isEmpty(moveLineResponse) && moveLineResponse?.body?.statusCode === '1') {
  //     setShowModal(true);
  //   }
  // }, [moveLineResponse]);

  const closeModal = () => {
    setShowModal(false);
  };

  const setSelectedDevice = (id) => {
    parentId.current = id;
    getDeviceDetailsHandler();
    getChildDetailsHandler();
    moveLineHandler();
  };

  // const moveLine = () => {
  //   setIsLoading(true);
  //   if (child.current.lineLevelPlan) {
  //     const url = reactGlobals.cpcLandingPage;
  //     let req = {
  //       "flow": "switchnumbershare",
  //       "numberShareMtn": child.current.mdn.split(".").join(""),
  //       "trunkMtn": newParent.current.mdn.split(".").join(""),
  //       "numberShareIndicator": "G"
  //     };
  //     const myForm = createSubmitForm(url, req);
  //     if (myForm) myForm.submit();
  //   } else {
  //     let req = {
  //       "moveFrom": "T",
  //       "moveTo": parentId.current,
  //       "secondaryDevice": child.current.id,
  //       "branchType": child.current.deviceType
  //     };
  //     setMoveLineRequested(true);
  //     dispatch(actions.saveMoveLine(req));
  //     setIsLoading(false);
  //   }
  // };

  const moveLineHandler = () => {
    moveLine(
      child,
      newParent,
      parentId,
      setIsLoading,
      setMoveLineRequested,
      dispatch,
      actions,
      createSubmitForm
    );
  };

  // const createSubmitForm = (url, req) => {
  //   let myForm = document.createElement("form");
  //   let element;
  //   myForm.setAttribute("action", url);
  //   myForm.setAttribute("method", "post");
  //   element = document.createElement("input");
  //   element.setAttribute('type', 'hidden');
  //   element.setAttribute('name', 'nbrshareinfo');
  //   element.setAttribute('value', JSON.stringify(req));
  //   myForm.appendChild(element);
  //   document.body.appendChild(myForm);
  //   return myForm;
  // };

  // const onConfirmation = () => {
  //   if(!isEmpty(moveLineResponse) && moveLineResponse?.body?.statusCode === '0'){
  //     history.push({
  //       pathname: '/confirm',
  //       state: {
  //         email: "",
  //         mdn: newParent.current.mdn,
  //         page: "standalone to numshare"
  //       }
  //     });
  //     let smsReq = {
  //       mtn: newParent.current.id,
  //       custFirstName: newParent.current.firstName,
  //       custLastName: newParent.current.lastName
  //     };
  //     dispatch(actions.sendSMS(smsReq));
  //   }
  //   return null;
  // };

  // const getDeviceDetails = () => {
  //   deviceDetails.forEach(item => {
  //     if (item.primaryInfo.id === parentId.current) {
  //       newParent.current = {
  //         mdn: item.primaryInfo.formattedMdn,
  //         img: item.primaryInfo.img,
  //         id: item.primaryInfo.id,
  //         firstName: item.primaryInfo.firstName,
  //         lastName: item.primaryInfo.lastName,
  //         nickName: item.primaryInfo.deviceNickName
  //       };
  //     }
  //   });
  // };

  // const getChildDetails = () => {
  //   connectableDevices.forEach(item => {
  //     if (item.id === childId.current) {
  //       child.current = {
  //         mdn: item.formattedMdn,
  //         id: item.id,
  //         img: item.img,
  //         nickName: item.deviceNickName,
  //         deviceType: item.deviceType,
  //         lineLevelPlan: item.lineLevelPlan ? item.lineLevelPlan : false
  //       };
  //     }
  //   });
  // };

  const getDeviceDetailsHandler = () => {
    getDeviceDetails(deviceDetails, parentId, newParent);
  };

  const getChildDetailsHandler = () => {
    getChildDetails(connectableDevices, childId, child);
  };
    //  useHandleMoveLineResponse({moveLineRequested, moveLineResponse, setMoveLineRequested, setShowModal, onConfirmation, modalData});
    useHandleMoveLineResponse({
      moveLineRequested,
      moveLineResponse,
      setMoveLineRequested,
      setShowModal,
      onConfirmation: () =>
        onConfirmation({
          moveLineResponse,
          history,
          newParent,
          dispatch,
          actions,
        }),
      modalData,
    });

  return (
    <Container>
      {(isFetching || isLoading) ? (
       <CustomLoader />
      ) : (
        <ToNumberShare cqData={cqData} selectedDevice={setSelectedDevice} deviceDetails={deviceDetails} />
      )}
      
      <CommonModal
        modalId={modalData.moveErrorMessage.id}
        close={closeModal}
        open={showModal}
        onHide={closeModal}
        message={modalData.moveErrorMessage}
        content1={child.current ? child.current : null}
      />
    </Container>
  );
};

export default ToNumberShareContainer;

const Container = styled.div`
  margin-top: 3rem;
`;
