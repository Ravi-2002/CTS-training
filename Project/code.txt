import React from 'react';
import '../../../../../config/jest/test-setup';
import {
  act, render, screen, fireEvent,
  waitFor,
} from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import { Provider } from 'react-redux';
import { getHttpClientRequest } from '@vz/react-util';
import { persistStore } from 'redux-persist';
import { PersistGate } from 'redux-persist/integration/react';
import configureStore from '../../../../shared/store/configureStore';
import rootReducer from '../../reducers';
import DeviceDetail from '../components/index';
import {
  deviceDetail, deviceDetail5, deviceDetailNew,
} from './mockResponse';
import * as actions from '../../home/actions';
import common from '../../../../shared/utilities/util';

// Mock common.js before using jest.spyOn()
jest.mock('../../../../shared/utilities/util', () => ({
  getActionKey: jest.fn(),
  getItemValue: jest.fn(),
}));

const store = configureStore(rootReducer);
const persistor = persistStore(store);

const props = {
  selectedDevice: {
    pearlTrialFlow: true,
    mtn: '2144707276',
  },
  match: { params: {} },
};

describe('<DeviceDetail />', () => {
  window.VZTAG_IS_READY = 'true';

  beforeEach(async () => {
    getHttpClientRequest.mockImplementation(() =>
      Promise.resolve({ status: 200, data: { ...deviceDetailNew } })
    );

    await act(async () =>
      render(
        <Provider store={store}>
          <PersistGate loading={null} persistor={persistor}>
            <DeviceDetail />
          </PersistGate>
        </Provider>
      )
    );
  });

  test("pearlTrialBtnTestId test", async () => {
    jest.setTimeout('10000');
    const manageBtn = screen.getByTestId(`pearlTrialBtnTestId`);
    expect(manageBtn).toBeInTheDocument();
    fireEvent.click(manageBtn);
  });

  test('pearlTrialPlanBtn test', () => {
    jest.setTimeout('10000');
    const manageBtn = screen.getByTestId('pearlTrialPlanBtn');
    expect(manageBtn).toBeInTheDocument();
    fireEvent.click(manageBtn);
  });
});

// ✅ New test for handleClick in renderPreferenceLink
describe('renderPreferenceLink handleClick test', () => {
  beforeEach(() => {
    // Ensure mocked functions return valid values
    common.getActionKey.mockReturnValue('mockedActionKey');
    common.getItemValue.mockImplementation((_, key) => key);
  });

  test('should trigger handleClick when preference link is clicked', async () => {
    jest.setTimeout('10000');

    // ✅ Mock getOnClickInfo to avoid undefined errors
    const getOnClickInfoMock = jest
      .spyOn(DeviceDetail.prototype, 'getOnClickInfo')
      .mockImplementation(() => ({
        onclick: jest.fn(),
      }));

    // ✅ List of preference buttons to check
    const preferenceLinks = [
      { key: 'shareNameIDBtn', label: 'Share Name ID' },
      { key: 'manageCallForwardingBtn', label: 'Manage Call Forwarding' },
      { key: 'blockSpecificServicesBtn', label: 'Block Specific Services' },
      { key: 'blockCallsAndMessagesBtn', label: 'Block Calls and Messages' },
      { key: 'manageCallFilterBtn', label: 'Manage Call Filter' },
      { key: 'manageVoicemailPasswordBtn', label: 'Manage Voicemail Password' },
      { key: 'backupContentToVerizonCloudBtn', label: 'Backup Content to Verizon Cloud' },
    ];

    for (const pref of preferenceLinks) {
      // ✅ Find button by label text
      const preferenceBtn = screen.getByText(new RegExp(pref.label, 'i'));
      expect(preferenceBtn).toBeInTheDocument();

      // ✅ Simulate click
      fireEvent.click(preferenceBtn);

      await waitFor(() => {
        expect(getOnClickInfoMock).toHaveBeenCalled();
      });
    }

    // ✅ Restore original function
    getOnClickInfoMock.mockRestore();
  });
});