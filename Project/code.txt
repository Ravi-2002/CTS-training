import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import BlockServices from '../../components/BlockServices'; // adjust path
import '@testing-library/jest-dom';

// Mock useDispatch and useSelector before import
import * as reactRedux from 'react-redux';

const mockDispatch = jest.fn();
jest.spyOn(reactRedux, 'useDispatch').mockReturnValue(mockDispatch);
jest.spyOn(reactRedux, 'useSelector');

const mockStore = configureStore([]);

describe('BlockServices', () => {
  let store;
  let history;

  const baseState = {
    Home: {
      services: {
        Category1: [
          { serviceName: 'Service A', sfoEnabled: 'Y', sfoCode: '001' },
          { serviceName: 'Service B', sfoEnabled: 'N', sfoCode: '002' },
        ],
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {},
      servicesError: {},
    },
  };

  const setup = (overrideState = {}) => {
    const finalState = { ...baseState, ...overrideState };
    store = mockStore(finalState);
    history = createMemoryHistory();
    history.push('/block-services?mdn=1234567890');

    reactRedux.useSelector.mockImplementation((selector) =>
      selector(finalState)
    );

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockServices />
        </Router>
      </Provider>
    );

    return { store, history };
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders services and toggles', () => {
    setup();

    expect(
      screen.getByText(/Be in charge of who does what/i)
    ).toBeInTheDocument();
    expect(screen.getByText('Service A')).toBeInTheDocument();
    expect(screen.getByText('Service B')).toBeInTheDocument();
    expect(screen.getAllByRole('switch')).toHaveLength(2);
  });

  it('dispatches action on toggle click', () => {
    setup();
    fireEvent.click(screen.getAllByRole('switch')[1]);
    expect(mockDispatch).toHaveBeenCalled();
  });

  it('shows success notification when confirmServices is successful', () => {
    setup({
      Home: {
        ...baseState.Home,
        confirmServices: {
          responseInfo: { responseCode: '00' },
        },
      },
    });
    expect(
      screen.getByText(/Service updated successfully/i)
    ).toBeInTheDocument();
  });

  it('shows error notification on post error', () => {
    setup({
      Home: {
        ...baseState.Home,
        servicesError: {
          responseInfo: { responseCode: '99' },
          libErrorInfo: {
            internalErrors: [{ errorMessage: 'Internal failure' }],
          },
        },
      },
    });

    expect(screen.getByText(/Error/i)).toBeInTheDocument();
  });

  it('shows load error if serviceFail is true', () => {
    setup({
      Home: {
        ...baseState.Home,
        serviceFail: true,
      },
    });
    expect(screen.getByText(/Failed to fetch services/i)).toBeInTheDocument();
  });

  it('navigates to service details page on text link click', () => {
    const { history } = setup();
    const link = screen.getAllByText(/Tell me more/i)[0];
    fireEvent.click(link);
    expect(history.location.pathname).toContain('/service-details/Service%20A');
  });
});