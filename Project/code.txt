import React from 'react';
import { render } from '@testing-library/react';
import DeviceDetail from '../index';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { MemoryRouter } from 'react-router-dom';
import * as common from '../../../../../shared/utilities/util';

const mockStore = configureStore([]);

jest.mock('../../../../../shared/utilities/util', () => ({
  getItem: jest.fn(),
  getChannelId: jest.fn(),
  getItemValue: jest.fn((items, key) => {
    const found = items.find(item => item.key === key);
    return found ? found.value : '';
  }),
  getContentFromSection: jest.fn(() => ({
    data: { isAppleDevice: true },
    appleDeviceMessage: 'This is an Apple device message.',
    sections: [],
  })),
}));

const mockLocationState = {
  devices: ['Device1', 'Device2'],
  isSingleDevice: false,
  selectedDevice: { encryptedMtn: 'encrypted-value' },
  advanceControls: {},
  showAdvanceControls: false,
};

const mockActions = {
  getDeviceDetail: jest.fn(), // async action
};

describe('DeviceDetail', () => {
  let store;
  let pageItems;
  let pageContent;

  beforeEach(() => {
    store = mockStore({
      Detail: {
        callsMsgs: {
          callsMessages: ['Message 1', 'Message 2'],
          blockedNumbers: ['1234567890'],
          expiredNumbers: ['0987654321'],
          getCMError: null,
        },
        Details: {
          isFetching: false,
          deviceDetails: {
            data: {
              isAppleDevice: true,
            },
          },
        },
        deviceDetails: {
          model: 'iPhone 13',
          manufacturer: 'Apple',
        },
        activeDevice: {
          deviceId: '123456',
          deviceType: 'Smartphone',
        },
      },
    });

    pageItems = [
      { key: 'model', value: 'iPhone 13' },
      { key: 'manufacturer', value: 'Apple' },
    ];

    pageContent = {
      data: {
        isAppleDevice: true,
      },
      appleDeviceMessage: 'This is an Apple device message.',
      sections: [],
    };

    common.getChannelId.mockReturnValue('mocked-channel-id');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  const renderComponent = (customProps = {}) =>
    render(
      <Provider store={store}>
        <MemoryRouter>
          <DeviceDetail
            pageItems={pageItems}
            pageContent={pageContent}
            location={{ state: mockLocationState }}
            actions={mockActions}
            {...customProps}
          />
        </MemoryRouter>
      </Provider>
    );

  it('renders without crashing', () => {
    const { getByText } = renderComponent();
    expect(getByText('iPhone 13')).toBeInTheDocument();
  });

  it('should correctly set appleNotice and Showmsg when isAppleDevice is true', () => {
    renderComponent();
    expect(pageContent.data.isAppleDevice).toBe(true);
    expect(pageContent.appleDeviceMessage).toBe('This is an Apple device message.');
  });

  it('renders with empty pageItems and pageContent gracefully', () => {
    const { container } = renderComponent({
      pageItems: [],
      pageContent: {},
    });
    expect(container).toBeDefined();
  });

  it('handles null pageItems and pageContent gracefully', () => {
    const { container } = renderComponent({
      pageItems: null,
      pageContent: null,
    });
    expect(container).toBeDefined();
  });

  it('handles null location.state gracefully', () => {
    const { container } = renderComponent({
      location: { state: null },
    });
    expect(container).toBeDefined();
  });

  it('handles undefined location.state gracefully', () => {
    const { container } = renderComponent({
      location: {},
    });
    expect(container).toBeDefined();
  });

  it('handles non-Apple devices correctly', () => {
    pageContent.data.isAppleDevice = false;
    pageContent.appleDeviceMessage = '';
    const { queryByText } = renderComponent();
    expect(queryByText('This is an Apple device message.')).not.toBeInTheDocument();
  });

  it('calls getChannelId and returns the correct value', () => {
    renderComponent();
    expect(common.getChannelId).toHaveBeenCalled();
    expect(common.getChannelId()).toBe('mocked-channel-id');
  });

  it('calls getDeviceDetail if selectedDevice is present', () => {
    renderComponent();
    expect(mockActions.getDeviceDetail).toHaveBeenCalledWith('encrypted-value');
  });
});