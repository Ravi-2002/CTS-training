// src/app/blocks/deviceDetail/components/test/App.test.js
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import App from '../../App';
import * as reactRedux from 'react-redux';
import * as monitoring from '../../../../shared/services/monitoring';
import { createMemoryHistory } from 'history';
import { Router } from 'react-router-dom';

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  connect: (mapStateToProps, mapDispatchToProps) => (Component) => (props) => (
    <Component {...props} reduxStore={{}} statusCode="00" />
  ),
}));

jest.mock('../../../../shared/services/monitoring', () => ({
  startMonitoring: jest.fn(),
}));

jest.mock('../../routes', () => () => <div>Mocked Routes</div>);

jest.mock('@vz/react-util', () => ({
  ErrorBoundary: ({ children }) => <div>{children}</div>,
  library: { init: jest.fn() },
  SessionTimeoutModal: () => <div>Session Timeout</div>,
}));

describe('App Component', () => {
  beforeEach(() => {
    global.reactGlobals = {
      enableFaroMonitoring: 'Y',
      session: { sessionTimeoutEnabled: true },
    };

    global.vztag = {
      api: {
        dispatch: jest.fn(),
      },
    };

    window.appPerformanceMetrics = {
      startMonitoring: false,
      perfArr: [],
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the App and shows Routes with session modal', async () => {
    const { getByTestId } = render(<App />);
    expect(getByTestId('appTestId')).toBeInTheDocument();
    expect(await screen.findByText('Mocked Routes')).toBeInTheDocument();
    expect(screen.getByText('Session Timeout')).toBeInTheDocument();
  });

  it('calls vztag.api.dispatch when vztagLoaded is dispatched', () => {
    const dispatchSpy = jest.fn();
    window.vztag.api.dispatch = dispatchSpy;

    const { unmount } = render(<App />);
    const event = new Event('vztagLoaded');
    document.dispatchEvent(event);

    expect(dispatchSpy).toHaveBeenCalled();
    unmount();
  });

  it('fallbacks to loader if unauthenticated', () => {
    const TestApp = require('../../App').default;
    const wrapper = render(<TestApp />);
    expect(wrapper.getByTestId('appTestId')).toBeInTheDocument();
  });

  it('listens for route changes and calls startMonitoring', () => {
    const history = createMemoryHistory();
    render(
      <Router history={history}>
        <App />
      </Router>
    );
    history.push('/new-route');
    expect(monitoring.startMonitoring).toHaveBeenCalled();
  });
});