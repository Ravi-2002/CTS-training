import React, { Component } from "react";
import { connect } from 'react-redux'
import * as actions from '../../actions/fetchServices';
import { bindActionCreators } from 'redux';
import styled from "styled-components";

import './style.css';
import Alert from '../../../alert';
import BSEmailDomains from "../blocksEmailDomains/BSEmailDomains";
import { Modal, ModalBody, ModalFooter, ModalTitle } from "@vds/modals";
import { Button, TextLink } from "@vds/buttons";
import { Link } from "react-router-dom/cjs/react-router-dom.min";
import { Body, Title } from "@vds/typography";
import { Loader } from "@vds/loaders";
// import Loader from "../../../suspendReconnect/shared/Loader/Loader"

const BLOCK_EMAIL_DOMAIN = 'Emails & domains';

class BlockServices extends Component {
  constructor(props) {
    super(props);
    this.state = {
      open: false,
      services: {},
      openSub: false,
      modalStatus: false,
      longDesc: "",
      shortDesc: "",
      featureName: ""
    }
  }
 
  handleServices(e, accordion) {
    e.preventDefault();
    // console.log("Accordion",this.props.selectedAccordian)
    if (accordion === 'BS') {
      let elmnt = document.getElementById("blockservices");
      //window.scrollTo(0, elmnt.parentElement.parentElement.offsetTop + ((elmnt.parentElement.parentElement.offsetTop*50)/100));
      window.scrollTo(0,0);
      this.props.selectAccordian('BS')
      this.props.actions.getServices(this.props.selectedDevice.encryptedMtn)
      console.log(this.props,'this.props')
      
    }
  };

  componentDidUpdate() {
    const obj = {};
    const additionalSer = "Additional Services";
    let isAdditionalServiceAvailable = false;
    const emailDomainObj = { [BLOCK_EMAIL_DOMAIN]: {isExpand: false}};
    console.log("What", this.state.services)
    if (this.state.services && Object.keys(this.state.services).length === 0) {
      if (this.props.serviceStatus && parseInt(this.props.serviceStatus.responseInfo.responseCode) == 0) {
        if (this.props.services && Object.keys(this.props.services).length > 0) {
          Object.keys(this.props.services).forEach((key) => {
            this.props.services[key].forEach((item) => {
              item.showMore = false;
            });
            if(key == additionalSer) //check whether additional service available - DOPMO-156597
              isAdditionalServiceAvailable = true;
            obj[key] = {
              isExpand: false,
              data: this.props.services[key]
            }
          });
          const {[additionalSer]: additionalService, ...rest} = obj; //move additional services to bottom of the list
          if(isAdditionalServiceAvailable) {
            this.setState({ services: {...emailDomainObj, ...rest, [additionalSer]: additionalService} });
          }else
            this.setState({ services: {...emailDomainObj, ...rest} });
        }
      }
    }
    // console.log('componentDidUpdate', this.props);
  }

  handleSubServices(e, service) {
    e.preventDefault();
    const services = this.state.services;
    console.log(services,'services')
    Object.keys(this.state.services).forEach((key) => {
      if(key==service){
        services[key].isExpand = !services[key].isExpand;
      }else{
        services[key].isExpand = false;
      }
    });
    this.setState({
      services
    })
  }

 

  

  toggleOn(e, service, i) {
    // console.log("Toogle", service, i)
    const { selectedDevice } = this.props
    const { services } = this.state
    console.log(services,'this.state');
    e.preventDefault();
    const payload = {
      "mdn": selectedDevice.encryptedMtn,
      "sfoCode": services[service].data[i].sfoCode,
      "sfoEnabled": services[service].data[i].sfoEnabled == "Y" ? "N" : "Y"
    }
    console.log(this.props.confirmServices ,'this.props.confirmServices ');
    this.props.actions.postServices(payload).then(() => {
      let elmnt = document.getElementById("myNotification");
      if (elmnt != null)
      window.scrollTo( 0,elmnt.offsetTop);
        // window.scrollTo( 0,elmnt.offsetTop);
      if (this.props.confirmServices && parseInt(this.props.confirmServices.statusCode) == 0) {
        if (services[service].data[i].sfoEnabled == "Y") {
          services[service].data[i].sfoEnabled = "N"
          this.setState({
            services,
            updatedService: services[service].data[i].sfoCode
          })
        }
        else if (services[service].data[i].sfoEnabled == "N") {
          services[service].data[i].sfoEnabled = "Y"
          this.setState({
            services,
            updatedService: services[service].data[i].sfoCode
          })
        }
      }
      // else{
      //   this.setState({
      //     bannerStatus: true,
      //     saveButton: false
      //   })
      // }
      // console.log("Toggle",services[service].data[i].sfoEnabled)
    })
  }
  closePupup=(e)=>{
    debugger;
    this.setState({
      showPopup:false,
    })
  }
  render() {
    const revokepopUpStyle = {
      'top': '10%',
      'maxHeight': '80%',
      'width':'auto',
      'maxWidth':'720px',
      'margin':'20px'
    };
    const { services,showPopup } = this.state;
    const { isFetching, confirmServices, confirmServiceFlag, failServices, serviceFail} = this.props
    let showNotice = false
    let Message = ""
    let Type = ""
    let trackingId = ""
    // console.log("Last day", this.props.confirmServices)
    // console.log("serviceErrorFlag", this.props.serviceErrorFlag)
    // console.log("servicesError",this.props.servicesError.errorMessage)
    if(this.props.serviceFail && this.props.serviceFail){
      showNotice = true,
        Message = this.props.failServices && failServices.errorMessage ? failServices.errorMessage:"Something went wrong, Please try again later",
        Type = 3,
        trackingId = "blockServicesFailureNotification"
    }
    else if(this.props.confirmServiceFlag && this.props.confirmServiceFlag == true){
      showNotice = true,
        Message = this.props.confirmServices && confirmServices.successMsg && confirmServices.successMsg,
        Type = 2,
        trackingId = "blockServicesSuccessNotification"
    }
    else if(this.props.serviceErrorFlag && this.props.serviceErrorFlag){
      showNotice = true,
        Message = this.props.servicesError && this.props.servicesError.errorMessage ? this.props.servicesError.errorMessage : "Something went wrong, Please try again later!",
        Type = 3,
        trackingId = "blockServicesFailureNotification"
    }
    return (
      <div className="accordion">
        <div className="accordion__item">
          <div className="accordion__title"
            role="button"
            tabIndex="0" onClick={(e) => this.handleServices(e, 'BS')} onKeyPress={(e) => this.handleServices(e, 'BS')}
            aria-expanded={this.props.selectedAccordian == 'BS' ? true : false}
          >
            <div className="u-position-relative">
              <div className="accordion-title">
                <FAQsHeadSection id="blockservices">
                  Block services
                </FAQsHeadSection>
              </div>
              <div
                id="blockservice"
                className="accordion__arrow"
                role="presentation"
              />
            </div>
          </div>
          <div> <Loader show={isFetching} /></div>
          {/* {this.props.selectedAccordian == 'BS' ?  <div id="myNotification">
            {showNotice && <div data-track={trackingId}> <Alert Message={Message} Type={Type} closeBanner={true}> </Alert></div>}
          </div>: null} */}
          
            
          {
            //  (this.props.serviceStatus && parseInt(this.props.serviceStatus.statusCode) == 0) && this.props.serviceFail != true &&
            this.props.getServices &&
            services && services && Object.keys(services).length > 0 && Object.keys(services).map((service, index) => {
              return (
                <div key={index}
                  style={{paddingLeft:'210px'}}
                  className={
                    this.props.selectedAccordian == 'BS'
                      ? "accordion__body"
                      : "accordion__body accordion__body--hidden"
                  }
                  aria-hidden={this.props.selectedAccordian == 'BS' ? false : true}
                >
                  <div className="oneD row">
                    <div className="col-lg-3">
                    </div>
                    <div className="col-lg-9 col-md-12 col-xs-12 col-xs-12">
                      <div className="o-expander o-block-content o-sub-accordion">
                        <div
                          role="tablist"
                          className="o-block-page panel-group ng-isolate-scope"
                        >
                          {/* sub accordians */}
                          <div
                            onClick={(e) => this.handleSubServices(e, service)} onKeyPress={(e) => this.handleSubServices(e, service)}
                            aria-expanded={services[service].isExpand ? true : false}
                            className="accordion__title"
                            role="button"
                            tabIndex="0"
                          >
                            <div className="u-position-relative">
                              <div className="accordion-title">
                                <FAQs1HeadSection id={service}>
                                  {service}
                                </FAQs1HeadSection>
                              </div>
                              <div
                                id={service}
                                className="accordion__arrow"
                                role="presentation"
                              />
                            </div>
                          </div>
                          <div
                            className={
                              services[service].isExpand
                                ? "accordion__body"
                                : "accordion__body accordion__body--hidden"
                            }
                            aria-hidden={services[service].isExpand ? false : true}
                          >
                           {service == BLOCK_EMAIL_DOMAIN ?
                              <div className="o-expander o-block-subcontent ">
                                <BSEmailDomains selectedDevice={this.props.selectedDevice} />
                              </div> : null
                            }

                            <div className="o-expander o-block-subcontent ">
                              {
                                services[service].data && services[service].data.length > 0 && services[service].data.map((serviceDetail, i) => {
                                  return (
                                    <div key={serviceDetail.sfoCode} className="o-row o-clr " style={{paddingBottom:'0%'}}>
                                      <div className="col-lg-10 col-md-10 col-sm-10 col-xs-10">
                                        <Body size='large' bold='true'>
                                          {serviceDetail.serviceName} 
                                        </Body>
                                      </div>
                                      <div style={{display:'flex',justifyContent:'flex-end'}}>
                                        <label class="form-switch" onKeyPress={(e) => this.toggleOn(e, service, i)} style={{"textAlign":"center"}}>
                                          <input type="checkbox" onChange={(e) => this.toggleOn(e, service, i)} /*onKeyPress={(e) => this.toggleOn(e, service, i)}*/ checked={serviceDetail.sfoEnabled === "Y" ? true : false} data-track={serviceDetail.serviceName.split(' ').join('') + "Toggle"} />
                                          <i tabIndex="0" aria-label={serviceDetail.sfoEnabled=="Y"?serviceDetail.serviceName+" " +"Toggle Button On": serviceDetail.serviceName+" " +"Toggle Button Off"}></i>
                                          <span>{serviceDetail.sfoEnabled=="Y"?"On":"Off"}</span>
                                        </label>
                                      </div>
                                      <div className="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                        <div className="o-short-desc width-100">
                                          <p className="o-concatText ng-binding" dangerouslySetInnerHTML={{ __html: serviceDetail.shortDescription }} />
                                          <br />
                                          {serviceDetail.showMore &&
                                            <React.Fragment>
                                              <br />
                                              <p className="o-concatText ng-binding" dangerouslySetInnerHTML={{ __html: serviceDetail.longDescription }} />
                                              <br />
                                            </React.Fragment>
                                          }
                                          
                                      <Modal 
                                        toggleButton={ <TextLink ><Body size='medium'> View More Details </Body></TextLink>} 
                                        surface="light"
                                        fullScreenDialog={false}
                                        disableAnimation={false}
                                        disableOutsideClick={false}
                                        ariaLabel="Testing Modal"
                                      >
                                        <ModalTitle>
                                        <Title size='large' bold='true'>{serviceDetail.serviceName}</Title>
                                        </ModalTitle>
                                        <ModalBody>
                                        <p dangerouslySetInnerHTML={{ __html: serviceDetail.shortDescription }}></p>
                                        <br></br>
                                        <Title size='medium' bold='true'>Further details</Title>
                                        <br></br>
                                        <p dangerouslySetInnerHTML={{ __html: serviceDetail.longDescription }}></p>
                                        </ModalBody>
                                        
                                      </Modal>

                                       <br/>
                                          <hr/>

                                        </div>
                                      </div>
                                    </div>
                                  )
                                })
                              }
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )
            })
          }
          {this.props.selectedAccordian == 'BS' && this.props.getServices ?
            <div style={{marginBottom: 15, paddingLeft: "27%"}} >
              <div><Body> <TextLink onClick={(e)=>{e.preventDefault(); 
              window.location.href="https://myvpostpay.verizonwireless.com/ui/bill/secure/dcb"}} className="anchor-link" data-track="ViewMediaAppPurchases">View Media &amp; App Purchases</TextLink></Body></div><br/>
              <div ><Body> <TextLink onClick={(e)=>{e.preventDefault(); 
              window.location.href="https://www.verizonwireless.com/support/how-to-add-blocks-video/"}} className="anchor-link" data-track="VideoForBlockServices">Video: How to block services</TextLink></Body></div><br/>
              <div ><Body><TextLink onClick={(e) => {e.preventDefault(); 
               window.location.href="https://www.verizonwireless.com/support/block-unblock-services-faqs/"}}className="anchor-link" data-track="BlockFAQ">Block and unblock services FAQ</TextLink></Body></div><br/>
            </div>:null}
        </div><br/>
      </div>
    );
  }
}

const FAQsHeadSection = styled.div`
  margin-top: 0px;
  padding: 10px 0 12px;
  border-bottom: 2px solid #000;
  display: block;
  width: 100%;
  font-family: "NeueHaasGroteskDisplayBold", arial;
  font-size: 18px;
  color: #000000;
  clear: both;
`;

const FAQs1HeadSection = styled.div`
  margin-top: 0px;
  padding: 10px 0 12px;
  border-bottom: 1px solid #000;
  display: block;
  width: 100%;
  font-family: "NeueHaasGroteskDisplayBold", arial;
  font-size: 18px;
  color: #000000;
  clear: both;
`;

const FAQsSection = styled.div`
  border-top: none;
`;

const mapStateToProps = state => {
  console.log(state,'state');
  return {

    services: state.Detail.serviceCalls.services,
    serviceStatus: state.Detail.serviceCalls.serviceStatus,
    getServices: state.Detail.serviceCalls.getServices,
    failServices : state.Detail.serviceCalls.failServices,
    serviceFail : state.Detail.serviceCalls.serviceFail,
    confirmServices: state.Detail.serviceCalls.confirmServices,
    serviceErrorFlag: state.Detail.serviceCalls.serviceErrorFlag,
    confirmServiceFlag: state.Detail.serviceCalls.confirmServiceFlag,
    servicesError: state.Detail.serviceCalls.servicesError,
    isFetching: state.Detail.serviceCalls.isFetching,
  }
}

const mapDispatchToProps = dispatch => ({
  actions: bindActionCreators(actions, dispatch),
})

export default connect(mapStateToProps, mapDispatchToProps)(BlockServices)
