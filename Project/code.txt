// BlockCallsList.test.js
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import BlockCallsList from '../callsandmessages';
import '@testing-library/jest-dom';

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock('../../../../shared/utilities/native', () => ({
  nativeSetTitle: jest.fn(),
}));

jest.mock('../../../../shared/utilities/util', () => ({
  __esModule: true,
  default: {
    getItemValue: jest.fn(() => 'Block calls and messages'),
    mtnFormat: jest.fn((mtn) => `(${mtn})`),
    getChannelId: jest.fn(() => 'web'),
    getContentFromSection: jest.fn((Content, key) => {
      // return nested section safely
      return Content.sections?.[0]?.sections?.[0] || {};
    }),
  },
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();

describe('BlockCallsList with valid mocked Content', () => {
  let store;
  let history;

  beforeEach(() => {
    localStorage.setItem('mdn', '1234567890');
    history = createMemoryHistory();
    useDispatch.mockReturnValue(mockDispatch);
  });

  const baseContentMock = {
    sections: [
      {
        sections: [
          {
            data: {
              mtn: '9876543210',
            },
            contents: [
              {
                items: [{ callsandMessageTitle: 'Block calls and messages' }],
              },
            ],
          },
        ],
      },
    ],
  };

  const setup = (selectorOverrides = {}) => {
    store = mockStore({});
    useSelector.mockImplementation((cb) =>
      cb({
        Detail: {
          blockedNumbers: [],
          addBlockCallMsg: {},
          deleteBlockCallMsg: {},
          isFetching: false,
          callsMessages: {
            aemResponse: baseContentMock,
          },
          ...selectorOverrides,
        },
      })
    );

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders header and MTN from content', () => {
    setup();
    expect(screen.getByText('Block calls and messages')).toBeInTheDocument();
    expect(screen.getByText('(9876543210)')).toBeInTheDocument();
  });

  it('shows number from addBlockCallMsg', () => {
    setup({
      addBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '9999999999' }],
      },
    });
    expect(screen.getByText('9999999999')).toBeInTheDocument();
  });

  it('shows number from deleteBlockCallMsg', () => {
    setup({
      deleteBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '8888888888' }],
      },
    });
    expect(screen.getByText('8888888888')).toBeInTheDocument();
  });

  it('disables Add button when 5 numbers exist', () => {
    setup({
      blockedNumbers: Array.from({ length: 5 }, (_, i) => ({ phoneNumber: `${i}` })),
    });
    expect(screen.getByRole('button', { name: /Add a number/i })).toBeDisabled();
  });

  it('navigates to /viewlimitation', () => {
    setup();
    fireEvent.click(screen.getByText(/View Limitations/i));
    expect(history.location.pathname).toBe('/viewlimitation');
  });

  it('navigates to /callsandmessages', () => {
    setup();
    fireEvent.click(screen.getByRole('button', { name: /Add a number/i }));
    expect(history.location.pathname).toBe('/callsandmessages');
  });

  it('dispatches action when removing number', () => {
    setup({
      blockedNumbers: [{ phoneNumber: '1234567890' }],
    });
    fireEvent.click(screen.getByRole('button', { name: /close/i }));
    expect(mockDispatch).toHaveBeenCalled();
  });
});