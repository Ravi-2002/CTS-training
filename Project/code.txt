import React from 'react';
import '../../../../../config/jest/test-setup';
import {
  act, render, screen, fireEvent,
  waitFor,
} from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import { Provider } from 'react-redux';
import { getHttpClientRequest } from '@vz/react-util';
import { persistStore } from 'redux-persist';
import { PersistGate } from 'redux-persist/integration/react';
import configureStore from '../../../../shared/store/configureStore';
import rootReducer from '../../reducers';
import DeviceDetail from '../components/index';
import {
  deviceDetail, deviceDetail5, deviceDetailNew,
} from './mockResponse';
import * as actions from '../../home/actions';
import common from '../../../../shared/utilities/util';

const store = configureStore(rootReducer);
const persistor = persistStore(store);

const data = {
  mtn: '8049557864',
  displayMtn: '804-955-7864',
  encryptedMtn: '7mRmqweZh69k4RQaZu6xHA%3D%3D',
  modelName: 'Galaxy J3 Eclipse in Black',
  nickName: 'EDIT NICKNAME',
  simId: '89148000002444998436',
  encryptedSimId: 'ZAEiJc%2B0MTnLUt2QZTs1GmRXgDNxzZN7',
  simType: 'ICC',
  upgradeEligible: true,
  userRole: 'Manager',
  device4G: false,
  device5GE: false,
  device5GA: false,
  smartPhone: true,
  basicPhone: false,
  deviceId: '356352080020741',
  paymentInfo: {
    hasPayOffBalance: false,
    promoDevice: false,
    upgradeEligible: false,
  },
  preferences: {
    shareNameIDBtn: true,
    manageCallForwardingBtn: true,
    blockSpecificServicesBtn: true,
    blockCallsAndMessagesBtn: true,
    manageCallFilterBtn: true,
    manageVoicemailPasswordBtn: true,
    backupContentToVerizonCloudBtn: true,
  },
  planUsageInfo: {
    planName: '10GB',
  },
  deviceManagement: {
    tradeInBtn: true,
    activateOrSwitchDeviceBtn: true,
    upgradeDeviceBtn: true,
    changeMobileNumberBtn: true,
    transferYourServiceBtn: true,
    manageConnectedDevicesBtn: false,
    suspendOrReconnectServiceBtn: true,
    numberLockBtn: true,
    numberTransferPinBtn: true,
    disconnectDeviceBtn: true,
    pinandPersonalUnblockingKeyBtn: true,
    manageNumberShareBtn: true,
    checkNetworkCompatibiltyText: false,
    viewAddOnsBtn: true,
  },
  troubleshootAndSupport: {
    troubleshootBtn: true,
    techCoachSupportBtn: true,
    runHealthCheckBtn: false,
    transferContentBetweenPhonesBtn: false,
    launchSecurityDashboardBtn: false,
  },
  images: {
    defaultImage: 'https://ss7.vzw.com/is/image/VerizonWireless/samsung-galaxy-j3-eclipse-black',
    largeImage: 'https://ss7.vzw.com/is/image/VerizonWireless/samsung-galaxy-j3-eclipse-black?$device-lg$',
    mediumImage: 'https://ss7.vzw.com/is/image/VerizonWireless/samsung-galaxy-j3-eclipse-black?$device-med$',
    miniImage: 'https://ss7.vzw.com/is/image/VerizonWireless/samsung-galaxy-j3-eclipse-black?$device-mini$',
    thumbImage: 'https://ss7.vzw.com/is/image/VerizonWireless/samsung-galaxy-j3-eclipse-black?$device-thumb$',
  },
  displayDeviceCategory: '4G Smartphone',
  esim: false,
  psim: true,
  router: true,
  dynamicData: {
    deviceName: 'Galaxy J3 Eclipse in Black',
    encMdn: '7mRmqweZh69k4RQaZu6xHA==',
    nsaHost: 'https://www.verizon.com',
  },
  pendingLineChange: false,
  deviceCategory: 'phone',
  mtnStatus: 'A',
  isMtnSuspended: false,
  openEnrollmentPeriod: 'Y',
  deviceProtectionEnrolled: 'N',
  productDisplayName: 'Galaxy J3 Eclipse',
};

jest.mock('@vz/react-util', () => ({
  ...jest.requireActual('@vz/react-util'),
  getHttpClientRequest: jest.fn(),
}));

const props = {
  selectedDevice: {
    pearlTrialFlow: true,
    mtn: '2144707276',
  },
  match: { params: {} },
};

describe('<DeviceDetail />', () => {
  window.VZTAG_IS_READY = 'true';

  beforeEach(async () => {
    getHttpClientRequest.mockImplementation(() =>
      Promise.resolve({ status: 200, data: { ...deviceDetailNew } })
    );

    await act(async () =>
      render(
        <Provider store={store}>
          <PersistGate loading={null} persistor={persistor}>
            <DeviceDetail />
          </PersistGate>
        </Provider>
      )
    );
  });

  test("pearlTrialBtnTestId test", async () => {
    jest.setTimeout('10000');
    const manageBtn = screen.getByTestId(`pearlTrialBtnTestId`);
    expect(manageBtn).toBeInTheDocument();
    fireEvent.click(manageBtn);
  });

  test('pearlTrialPlanBtn test', () => {
    jest.setTimeout('10000');
    const manageBtn = screen.getByTestId('pearlTrialPlanBtn');
    expect(manageBtn).toBeInTheDocument();
    fireEvent.click(manageBtn);
  });
});

// New test for handleClick in renderPreferenceLink
describe('renderPreferenceLink handleClick test', () => {
  test('should trigger handleClick when preference link is clicked', async () => {
    jest.setTimeout('10000');

    // Mock getOnClickInfo to return a function
    const getOnClickInfoMock = jest.spyOn(DeviceDetail.prototype, 'getOnClickInfo').mockReturnValue({
      onclick: jest.fn(),
    });

    // Find the preference link and simulate click
    const preferenceBtn = screen.getByText(/Manage Call Forwarding/i);
    expect(preferenceBtn).toBeInTheDocument();

    fireEvent.click(preferenceBtn);

    await waitFor(() => {
      expect(getOnClickInfoMock).toHaveBeenCalled();
    });

    // Restore original implementation
    getOnClickInfoMock.mockRestore();
  });
});