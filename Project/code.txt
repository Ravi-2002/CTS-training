import React from "react";
import { render } from "react-dom";
import { Provider } from "react-redux";
import { PersistGate } from "redux-persist/integration/react";
import * as serviceWorker from "../deviceoverview/serviceWorker";
import App from "@pwd/app";

// Mocks
jest.mock("react-dom", () => ({
  render: jest.fn(),
}));

jest.mock("@shared/store/configureStore", () => {
  const mockStore = {};
  return {
    __esModule: true,
    default: () => mockStore,
    history: { push: jest.fn() },
  };
});

jest.mock("redux-persist", () => ({
  persistStore: jest.fn(() => "mockPersistor"),
}));

jest.mock("redux-persist/integration/react", () => ({
  PersistGate: ({ children }) => <div data-testid="persist-gate">{children}</div>,
}));

jest.mock("@pwd/reducers", () => ({}));
jest.mock("@pwd/app", () => () => <div data-testid="app-component" />);

describe("index.js", () => {
  it("renders the app with provider and persist gate", () => {
    // Re-import after mocks
    jest.isolateModules(() => {
      require("../deviceoverview/index.js");
    });

    expect(render).toHaveBeenCalledTimes(1);

    const [jsx, container] = render.mock.calls[0];

    expect(container).toBe(document.getElementById("app"));

    // Check render structure
    expect(jsx.type).toBe(Provider);
    expect(jsx.props.store).toBeDefined();

    const persistGate = jsx.props.children;
    expect(persistGate.type.displayName || persistGate.type.name).toBe("PersistGate");
    expect(persistGate.props.persistor).toBe("mockPersistor");

    // Check App rendering inside PersistGate
    const app = persistGate.props.children;
    expect(app.type.name).toBe("App");
    expect(app.props.history).toBeDefined();
  });

  it("unregisters the service worker", () => {
    const unregisterSpy = jest.spyOn(serviceWorker, "unregister");

    jest.isolateModules(() => {
      require("../deviceoverview/index.js");
    });

    expect(unregisterSpy).toHaveBeenCalled();
  });
});