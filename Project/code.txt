import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import BlockCallsList from '../BlockCallsList';
import { useDispatch, useSelector } from 'react-redux';
import { BrowserRouter as Router } from 'react-router-dom';
import * as actions from '../../actions/fetchCallsMessages';
import common from '../../../../../shared/utilities/util';
import { nativeSetTitle } from '../../../../../shared/utilities/native';

jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock('../../../../../shared/utilities/util', () => ({
  getItemValue: jest.fn((items, key) => key),
  getContentFromSection: jest.fn((content, id) => content.sections[0]),
  mtnFormat: jest.fn((mtn) => `Formatted: ${mtn}`),
}));

jest.mock('../../../../../shared/utilities/native', () => ({
  nativeSetTitle: jest.fn(),
}));

jest.mock('../../actions/fetchCallsMessages', () => ({
  getCallsMessages: jest.fn(() => ({ type: 'GET_CALLS_MESSAGES' })),
  postDeleteBlockCallMsg: jest.fn((payload) => ({ type: 'DELETE_CALL', payload })),
}));

const mockDispatch = jest.fn();
Object.defineProperty(window, 'localStorage', {
  value: {
    getItem: jest.fn(() => '9999999999'),
  },
});

const mockState = {
  Detail: {
    blockedNumbers: [{ phoneNumber: '1234567890' }],
    addBlockCallMsg: null,
    deleteBlockCallMsg: null,
    isFetching: false,
    callsMessages: {
      aemResponse: {
        sections: [
          {
            sections: [
              {
                data: {
                  mtn: '9876543210',
                },
              },
            ],
            contents: [
              {
                items: [{ title: 'callsandMessageTitle' }],
              },
            ],
          },
        ],
      },
    },
  },
};

const renderComponent = (overrides = {}) => {
  useDispatch.mockReturnValue(mockDispatch);
  useSelector.mockImplementation((selector) =>
    selector({
      Detail: {
        ...mockState.Detail,
        ...overrides,
      },
    })
  );

  return render(
    <Router>
      <BlockCallsList history={{ push: jest.fn() }} />
    </Router>
  );
};

describe('BlockCallsList', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders title and mtn', () => {
    renderComponent();
    expect(nativeSetTitle).toHaveBeenCalledWith('Block Calls & Messages', false);
    expect(screen.getByText('callsandMessageTitle')).toBeInTheDocument();
    expect(screen.getByText('Formatted: 9876543210')).toBeInTheDocument();
  });

  it('displays blocked numbers', () => {
    renderComponent();
    expect(screen.getByText('1234567890')).toBeInTheDocument();
    expect(screen.getByText('You are blocking 1 of 5 numbers.')).toBeInTheDocument();
  });

  it('disables add button at 5 numbers', () => {
    renderComponent({
      blockedNumbers: Array(5).fill({ phoneNumber: '1111111111' }),
    });
    expect(screen.getByRole('button', { name: /Add a number/i })).toBeDisabled();
  });

  it('calls dispatch to fetch calls/messages on mount', () => {
    renderComponent();
    expect(mockDispatch).toHaveBeenCalledWith(actions.getCallsMessages());
  });

  it('calls dispatch to remove a number', () => {
    renderComponent();
    fireEvent.click(screen.getByRole('button', { name: /close/i }));
    expect(mockDispatch).toHaveBeenCalledWith(
      actions.postDeleteBlockCallMsg({
        mtn: '9999999999',
        blockNumber: '1234567890',
        oldPhoneNumber: '1234567890',
        memo: '',
        expiredPhoneNumber: '',
        blockedNumbers: [],
        applyAll: false,
        onlyMemo: false,
      })
    );
  });

  it('navigates to /viewlimitation', () => {
    const push = jest.fn();
    render(
      <Router>
        <BlockCallsList history={{ push }} />
      </Router>
    );
    fireEvent.click(screen.getByText(/View Limitations/i));
    expect(push).toHaveBeenCalledWith('/viewlimitation');
  });

  it('navigates to /callsandmessages with correct state', () => {
    const push = jest.fn();
    render(
      <Router>
        <BlockCallsList history={{ push }} />
      </Router>
    );
    fireEvent.click(screen.getByText(/Add a number/i));
    expect(push).toHaveBeenCalledWith('/callsandmessages', {
      allowInput: true,
      mtn: '9999999999',
    });
  });

  it('falls back to blockedNumbers if addBlockCallMsg is not set', () => {
    renderComponent({
      addBlockCallMsg: null,
      blockedNumbers: [{ phoneNumber: '2222222222' }],
    });
    expect(screen.getByText('2222222222')).toBeInTheDocument();
  });

  it('renders empty state if nothing is blocked', () => {
    renderComponent({
      addBlockCallMsg: null,
      blockedNumbers: [],
    });
    expect(screen.getByText('You are blocking 0 of 5 numbers.')).toBeInTheDocument();
  });
});