import React, { Component, Fragment } from 'react';
import styled from 'styled-components';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as deviceDetailActions from '../actions';
import ErrorBoundary from '../../../../shared/components/ErrorBoundary';
import { logClickStream } from '../../../../shared/utilities/logger';
import { nativeHideOrShowBottomNav, nativeBackAction, nsaRedirectToNativePage } from '../../../../shared/utilities/native';
import { isCurrentClientVersionGreaterOrEquals, isAndroidDevice } from '../../../../native-util/native-util'
import common from '../../../../shared/utilities/util';
import Loader from '../../../../shared/components/Loader/Loader';
import { Title, Body } from '@vds/typography';
import { TileContainer } from '@vds/tiles';
import { ListGroup, ListGroupItem, ListGroupItemTitle } from '@vds/lists';
import { Grid, Row, Col } from '@vds/grids';
import { Icon } from '@vds/icons';
import { DropdownSelect } from '@vds/selects';
import { TextLink, Button } from '@vds/buttons';
import EditNickNameModal from './editNickNameModal';
import PinUnblockModal from './PinUnblockModal';
import { Notification } from '@vds/notifications';
import { Tabs, Tab } from '@vds/tabs';
import UpgradePlanModal from './UpgradePlanModal';
import { getCookie, setCookie } from '../../../../shared/components/Helpers';
import UpgradeSIMProtectionModal from '../../home/components/UpgradeSIMProtectionModal';
import xss from 'xss';
import ChangeOrReplaceModal from './ChangeOrReplaceModal';
import { dispatchNotifyEvent, dispatchOpenView } from '../../../../shared/utilities/tagging';

const TitleContainer = styled.div`
  margin-top: 56px;
  padding-bottom: 36px;

  h1 {
    font-weight: 400;
  }
`;

const TabContainer = styled.div`
  margin-top: 36px;

  // ul {
  // 	max-width:1232px;
  // 	margin: 0 auto;
  // 	// margin:0 20px;
  // }

  // @media only screen
  // and (min-device-width : 768px)
  // and (max-device-width : 1024px)
  // and (orientation : portrait) {
  // 	ul {
  // 		max-width:944px;
  // 		// margin:0 20px;
  // 	}
  // }
`;

const MyDeviceHeaderContainer = styled.div`
  // max-width: 1232px;
  //margin: 0 16px;
  margin-bottom: 20px;
  h2 {
    font-weight: 700;
    font-size: 24px;
    line-height: 28px;
  }
`;

const ListGroupContainer = styled.div`
  padding: 0px 16px;
  margin-bottom: 48px;

  h2 {
    margin-top: 32px;
    font-weight: 700;
    font-size: 24px;
    line-height: 28px;
  }

  h2:first-child {
    margin-top: 0px;
  }

  [class^='StyledListItem-VDS'] {
    padding-bottom: 1rem;
    padding-top: 1rem;
  }
`;

const DropdownSelectContainer = styled.div`
  position: relative;
  margin-bottom: 33px;

  #deviceListSelectBox {
    width: 328px;
  }
`;

const TextLinkContainer = styled.div`
  padding-top: 24px;
`;

const DeviceDetailContainer = styled.div`
  margin-top: 1rem;
`;

const DeviceNameContainer = styled.div`
  padding: 12px 0px;
  display: flex;
  justify-content: space-between;
  align-items: flex-end;

  h2 {
    font-weight: 700;
    font-size: 24px;
    line-height: 28px;
  }
`;

const EditNickNameContainer = styled.div`
  margin-top: 16px;
  a {
    font-weight: 400;
    font-size: 16px;
    line-height: 20px;
    /* identical to box height, or 125% */

    letter-spacing: 0.5px;
  }
`;

const DeviceInfoContainer = styled.div`
  background: #f6f6f6;
  border-radius: 8px;
  max-width: 1232px;
  margin: 0 20px;
  padding: 16px 16px 28px 16px;
  margin-top: 22px;

  @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) {
    max-width: 944px;
    // margin:0 20px;
  }
`;

const DeviceInfoContainer2 = styled.div`
  border-radius: 8px;
  margin: 0 auto;
  margin: 0px 16px 48px 16px;
`;

const ProductImg = styled.div`
  width: 100%;
  text-align: ${(props) => `${props.center ? props.center : `center`}`};

  @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait) {
    img {
      width: 100%;
    }
  }
  ${(props) =>
    props.isMtnSuspended &&
    `
			img {
					opacity: 0.5;
				} 
	`}
`;

const SubHeaderTitle = styled.div`
  margin-bottom: ${(props) => (props.simHeader == 'simHeader' ? '0px' : '18px')};

  h2 {
    font-weight: ${(props) => (props?.isPearlFlow ? 400 : 700)};;
    font-size: ${(props) => (props?.isPearlFlow ? '16px' : '12px')};
    line-height: 20px;
    /* identical to box height, or 125% */
    color: ${(props) => (props?.isPearlFlow ? '#6F7171' : '#000000')};
    letter-spacing: 0.5px;
  }

  p {
    margin-top: 5px;
    font-weight: 400;
    font-size: ${(props) => (props?.isPearlFlow ? '16px' : '12px')};
    line-height: 16px;
    /* identical to box height, or 125% */

    letter-spacing: 0.5px;
    color: ${(props) => ((props.esim && props?.isPearlFlow) ? '#6F7171' : '#000000')};
  }
  a {
    font-size: 12px;
  }
`;
const ContentContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: ${(props) => `${props.center ? `center` : `left`}`};
`;

const FiveGImg = styled.div`
  img {
    width: 30px;
  }
`;

const InlineContentBox = styled.div`
  display: flex;
  align-items: center;
  margin-top: 5px;

  p {
    margin-top: 0px;
    margin-left: 3px;
    font-weight:${(props) => (props?.isPearlFlow ? 400 : 700)};
    font-size:  ${(props) => (props?.isPearlFlow ? '16px' : '12px')};
    line-height: 16px;
    color: color: ${(props) => ((props.esim && props?.isPearlFlow) ? '#6F7171' : '#000000')};
  }
`;
const Wrapper = styled.div``;

const StyledLink = styled(TextLink)`
  font-weight: 400;
  font-size: 12px;
  line-height: 16px;
`;

const TileContainerWrapper = styled.div`
  position: relative;
  margin-top: 12px;
  #tileContainer {
    background-color: #f6f6f6;
    #inner-tileContainer {
      flex-direction: column;
    }
  }
  #upgrade {
    #tileContainer {
      height: max-content;
    }
    .upgrade {
      position: relative;
      bottom: 0px;
      padding-top: 20px;
    }
  }
`;

const MyPlanTitle = styled.div`
  h2 {
    font-weight: 700;
    font-size: 20px;
    line-height: 24px;
    letter-spacing: 1px;
  }
`;

const MyPlanSubTitle = styled.div`
  padding-top: 10px;
  p {
    font-weight: 400;
    font-size: 12px;
    line-height: 16px;
    letter-spacing: 1px;
  }
`;

const MyPlanDeviceCtaContainer = styled.div`
  position: absolute;
  bottom: 32px;
  display: flex;
  flex-direction: row;

  button {
    height: 36px;
    margin-right: 8px;

    span {
      padding-top: 0px;
      padding-bottom: 0px;
      font-size: 12px;
      letter-spacing: 0.5px;
      padding-right: 1.4rem;
    }
  }
`;

const TileContainerWrapperDark = styled.div`
  position: relative;
  margin-top: 12px;
  #tileContainer {
    background-color: ${(props) => (props.isDarkTile ? `#000` : `#F6F6F6`)};
    min-height: 280px;
    height: auto;

    #inner-tileContainer {
      flex-direction: column;
      justify-content: space-between;
    }
  }
`;

const ProtectioTitle = styled.div`
  h2 {
    font-weight: 700;
    font-size: 20px;
    line-height: 24px;
    letter-spacing: 1px;
    color: ${(props) => (props.isDarkTile ? `#fff` : `#000`)};
  }
`;

const ProtectioSubTitle = styled.div`
  padding-top: 10px;
  p {
    font-weight: 400;
    font-size: 12px;
    line-height: 16px;
    letter-spacing: 1px;
    color: ${(props) => (props.isDarkTile ? `#fff` : `#000`)};
  }
`;

const DeviceCtaContainer = styled.div`
  // position: absolute;
  bottom: 32px;
  display: flex;
  button {
    border: 1px solid ${(props) => (props.isDarkTile ? `#F6F6F6` : `#000`)};
    height: 36px;
    margin-left: 5px;

    span {
      // padding: 0px;
      font-size: 12px;
      letter-spacing: 0.5px;
    }
  }
`;

const MyPlanContent = styled.div`
  padding-top: 32px;

  p {
    margin-bottom: 8px;
    font-weight: 400;
    font-size: 14px;
    line-height: 16px;
    /* identical to box height, or 125% */

    letter-spacing: 0.5px;
  }
`;

const StyledMtnBody = styled.p`
  margin-top: 8px;
  font-family: Verizon-NHG-eDS, Helvetica, Arial, Sans-serif;
`;
const UpgradeTileContent = styled.div`
  display: flex;
  flex-direction: column;
`;

const FirstRow = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  margin-top: 16px;

  h2 {
    font-weight: 700;
    font-size: 20px;
    line-height: 24px;
  }
`;

const SecondRow = styled.div`
  // display: flex;
  // flex-direction: row;
  // justify-content: space-between;

  margin-top: 20px;
  margin-bottom: 25px;

  p {
    font-weight: 400;
    font-size: 12px;
    line-height: 16px;
    letter-spacing: 0.5px;
  }
`;

const ThirdRow = styled.div`
  // display: flex;
  // flex-direction: row;
  // justify-content: space-between;
  margin-top: 12px;
  margin-bottom: 12px;
  position: relative;

  #firstDot {
    position: absolute;
    top: -2.5px;
    left: 0;
    height: 10px;
    width: 10px;
    border-radius: 50%;
    background-color: #006fc1;
  }

  #paid {
    border-radius: 20px;
    height: 5px;
    background: #006fc1;
    width: ${(props) => `${props.paidPercentage}%`};
    z-index: 2;
    position: absolute;
  }

  #middleDot {
    position: absolute;
    top: -2.5px;
    left: 49%;
    height: 10px;
    width: 10px;
    border-radius: 50%;
    background-color: ${(props) => `${props.paidPercentage > 50 ? `#006FC1` : `#D8DADA`}`};
  }

  #total {
    border-radius: 20px;
    height: 5px;
    background: #d8dada;
    width: 100%;
    position: absolute;
  }

  #lastDot {
    position: absolute;
    top: -2.5px;
    right: 0;
    height: 10px;
    width: 10px;
    border-radius: 50%;
    background-color: ${(props) => `${props.paidPercentage == 100 ? `#006FC1` : `#D8DADA`}`};
  }
`;

const FourthRow = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;

  p {
    font-weight: 400;
    font-size: 12px;
    line-height: 16px;
  }
`;

const FifthRow = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;

  p {
    font-weight: 400;
    font-size: 12px;
    line-height: 16px;
  }
`;

const DeviceModelContainer = styled.div`
  display: flex;
  justify-content: space-between;
  ${(props) => props?.isPearlFlow && 'flex-flow:row wrap;'}
`;
const DeviceModelContainerWrapper = styled.div`
  display: flex;
`;
const DeviceModelImage = styled.div`
  padding-right: 2.5rem;
`;

const DeviceModelDetails = styled.div``;

const ListGroupItemTitleContent = styled.span`
  font-size: 18px;
  line-height: 20px;
`;

const Banner = styled.div`
  visibility: ${(props) => (props.showBanner !== 'NO_PROMO' ? 'visible' : 'hidden')};
  background-color: #000;
  padding-left: 4px;
  padding-top: 5px;
  padding-bottom: 5px;
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
`;

const TextLinkWrapper = styled.div``;
const DeviceModelMobileDetails = styled.div`display: flex;`;
const ItemWrapper = styled.div`
  display: flex;
  justify-content: space-between;
`;
const SubHeaderMobileTitle = styled.div`
  margin-bottom: ${(props) => (props.simHeader == 'simHeader' ? '0px' : '18px')};

  h2 {
    font-weight: 400;
    font-size: 14px;
    line-height: 20px;
    color:#6F7171;
    /* identical to box height, or 125% */

    letter-spacing: 0.5px;
  }

  p {
    margin-top: 5px;
    font-weight: 400;
    font-size: 16px;
    line-height: 16px;
    /* identical to box height, or 125% */

    letter-spacing: 0.5px;
    color: ${(props) => (props.esim ? '#6F7171' : '#000000')};
  }
  a {
    font-size: 12px;
  }
`;

const DropDownSelector = styled.div`
    display: flex;
    flex-direction: column;
    width: 100%;
    min-width: 66px;
`;

const DropDownSubSelector = styled.div`
    width: 328px !important;
    display: flex;
    flex: 1 1 auto;
    flex-direction: column;
    width: 100%;
    position: relative;
`;

const DropdownSelectElement = styled.div`
position: relative;
    display: inline-flex;
    -webkit-box-align: center;
    align-items: center;
    box-sizing: border-box;
    height: 2.75rem;
    width: 100%;
    vertical-align: top;
    margin: 0px;
    background-color: rgb(255, 255, 255);
    border-radius: 4px;
    border-color: rgb(111, 113, 113);
    border-width: 0.0625rem;
    border-style: solid;
select{
    border: none;
    background: transparent;
    width: 100%;
    min-width: 66px;
    display: inline-flex;
    appearance: none;
    outline: none;
    pointer-events: auto;
    color: rgb(0, 0, 0);
    opacity: 1;
    line-height: 1.25rem;
    font-size: 1rem;
    letter-spacing: 0.03125rem;
    font-family: Verizon-NHG-eDS;
    font-weight: 400;
    padding: 0.75rem 2.6875rem 0.75rem 0.75rem;
  }
    select:focus, select:focus-visible{
    outline:1px dashed #000;
    }
    label{
    display:block !important;
    }
    #deviceListSelectBox{
    width: 328px;
    }
`;

const DownArrow = styled.span`
position: absolute;
    z-index: 1;
    margin-left: 0.75rem;
    right: 0.75rem;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    height: 1.25rem;
    pointer-events: none;
`;

const DropDownLabel = styled.label`
    font-size: 0.75rem;
    font-weight: 400;
    line-height: 1rem;
    font-family: Verizon-NHG-eTX, Helvetica, Arial, Sans-serif;
    color: #000000;
    margin: 0;
    text-decoration: none;
    p{
    margin:0 0 4px 0;
    }
`;

const RowContent = styled(Row)`
    margin-top: 32px;
`;


class DeviceDetail extends Component {
  constructor(props) {
    super(props);
    this.state = {
      selectedMdn: '',
      selectedDevice: {},
      encMdn: '',
      index: 0,
      showModal: false,
      changeOrReplaceModal: false,
      showSIMProtectionModal: false,
      showSIMProtectionNotification: false,
      SIMProtectionDuration: 0,
      SIMProtectionTimeStamp: ""
    };
    this.getOnClickInfo = common.getOnClickInfo.bind(this);
  }

  componentDidMount() {
    const selectedMdn = this.props?.selectedDevice?.mtn;
    this.props?.actions?.getSections(selectedMdn, this.props?.match?.params?.mtn);
    this.setState({
      selectedMdn: this.props?.selectedDevice?.mtn,
      encMdn: this.props?.match?.params?.mtn || '',
    });
    if (this.props?.selectedDevice?.pearlTrialFlow) {
      sessionStorage.setItem('pearlTrialFlow', "true");
      setCookie('pearlTrialFlow', "true");
    }
    logClickStream('PAGE-LOADED', 'PAGE-LOADED', 'PAGE-LOADED', 'manageDevicePage', true);
    if (common.getChannelId() === 'VZW-MFA') {
      nativeHideOrShowBottomNav(false);
      nativeBackAction('Mobile Device');
    }

  }

  componentDidUpdate(prevProps) {
    if (
      this.props?.deviceDetailInfoSection?.sections &&
      this.props?.match?.params?.mtn !== '' &&
      (this.state?.selectedMdn == '' || !this.state?.selectedMdn)
    ) {
      let pageContent;
      let selectedMdn = '';
      let pageActions = '';
      let singleSelectedMdn = [];
      let deviceList = [];
      let allDevices = [];
      pageContent = common.getContentFromSection(this.props.deviceDetailInfoSection, 'devicesLandingMainSection');
      pageContent = pageContent.sections[0];
      pageActions = pageContent && pageContent.actions;
      deviceList = pageContent && pageContent?.data;

      if (pageContent && pageContent?.data) {
        pageContent &&
          pageContent?.data &&
          pageContent?.data?.forEach((singleDevice, index) => {
            if (!singleDevice?.isSecondNumber) {
              allDevices.push(singleDevice);
            }
          });
      }
      //For pearl trial
      const isPearlDevice = deviceList?.some(data => data.pearlTrialFlow);
      if (isPearlDevice) {
        sessionStorage.setItem('pearlTrialFlow', "true");
        setCookie('pearlTrialFlow', "true");
      }

      if (this.props?.match?.params?.mtn !== '') {
        singleSelectedMdn = deviceList?.filter((singleMdnDetail) => singleMdnDetail?.encryptedMtnDES == this.props?.match?.params?.mtn);
        selectedMdn = singleSelectedMdn[0]?.mtn || (allDevices && allDevices[0]?.mtn);
      } else {
        selectedMdn = allDevices && allDevices[0]?.mtn;
      }
      if (singleSelectedMdn.length && singleSelectedMdn[0]?.router) {
        this.setState({ selectedMdn: selectedMdn }, () => {
          if (common.getChannelId() === 'VZW-MFA') {
            const action = common.getActionByKey(pageActions, 'manageRouterAction_native');
            const actionValue = action && action.actionValue;
            nsaRedirectToNativePage(actionValue, singleSelectedMdn[0]?.mtn);
          } else {
            const action = common.getActionByKey(pageActions, 'manageRouterAction');
            const actionValue = action && action.actionValue;
            window.location.href = `${actionValue}${singleSelectedMdn[0]?.encryptedMtnAES}`;
          }
        });
      } else if (singleSelectedMdn.length && singleSelectedMdn[0]?.networkExtender) {
        if (common.getChannelId() === 'VZW-MFA') {
          const action = common.getActionByKey(pageActions, 'manageNetworkExtender_native');
          const actionValue = action && action.actionValue;
          nsaRedirectToNativePage(actionValue, singleSelectedMdn[0]?.mtn);
        } else {
          const action = common.getActionByKey(pageActions, 'manageNetworkExtender');
          const actionValue = action && action.actionValue;
          window.location.href = `${actionValue}?deviceid=${singleSelectedMdn[0]?.deviceId}`;
        }
      } else {
        if (!selectedMdn && (deviceList && deviceList[0]?.router) || deviceList[0]?.networkExtender) {
          window.location.hash = `/`;
        } else {
          this.setState({ selectedMdn: selectedMdn });
        }
      }
    }

  }

  handleSelectBoxChange(e) {
    if (this.props?.deviceDetailInfoSection?.sections) {
      let pageContent = common.getContentFromSection(this.props.deviceDetailInfoSection, 'devicesLandingMainSection');
      pageContent = pageContent?.sections[0];
      const pageActions = pageContent?.actions;
      let deviceList = pageContent?.data || [];
      let selectedDevice = deviceList.filter((value) =>
        value?.networkExtender ? value?.deviceId === e.target.value : value?.mtn === e.target.value
      );
      const selectedMdn = e.target.value;
      let pageItems = pageContent && pageContent?.contents && pageContent?.contents[0]?.items;
      const isNewEndpoint = common.getItemValue(pageItems, 'newRecommendationTileEnabled') === 'true';
      if (isNewEndpoint) {
        this.props.actions.getRecommendedTiles(selectedMdn);
      }
      if (selectedDevice.length && selectedDevice[0]?.router) {
        this.setState({ selectedMdn }, () => {
          if (common.getChannelId() === 'VZW-MFA') {
            const action = common.getActionByKey(pageActions, 'manageRouterAction_native');
            const actionValue = action && action.actionValue;
            nsaRedirectToNativePage(actionValue, selectedDevice[0]?.mtn);
          } else {
            const action = common.getActionByKey(pageActions, 'manageRouterAction');
            const actionValue = action && action.actionValue;
            window.location.href = `${actionValue}${selectedDevice[0]?.encryptedMtnAES}`;
          }
        });
      } else if (selectedDevice.length && selectedDevice[0]?.networkExtender) {
        if (common.getChannelId() === 'VZW-MFA') {
          const action = common.getActionByKey(pageActions, 'manageNetworkExtender_native');
          const actionValue = action && action.actionValue;
          nsaRedirectToNativePage(actionValue, selectedDevice[0]?.deviceId);
        } else {
          const action = common.getActionByKey(pageActions, 'manageNetworkExtender');
          const actionValue = action && action.actionValue;
          window.location.href = `${actionValue}?deviceid=${selectedDevice[0]?.deviceId}`;
        }
      } else {
        this.setState({
          index: 0,
          selectedMdn,
        });
      }
    }
  }

  handleShowAllDevices = () => {
    this.props.actions.isRedirectedFromDetailPage(true);
    window.location.hash = `/`;
  };

  personalizationFlag = () => {
    return window.enablePesonalizedOffer;
  }

  handleReviewDetailLink = () => {
    let pageContent;
    if (this.props.deviceDetailInfoSection && this.props.deviceDetailInfoSection.sections) {
      pageContent = common.getContentFromSection(this.props.deviceDetailInfoSection, 'devicesLandingMainSection');
      pageContent = pageContent.sections[0];
    }
    let pageItems = pageContent && pageContent.contents && pageContent.contents[0].items;

    let actionKey = pageContent && common.getActionKey(pageItems, `reviewDetail`);
    let click_info = this.getOnClickInfo(pageContent, actionKey);
    click_info?.onclick();
  };

  handleUpgradeRedirection = ({ actionValue, selectedDeviceInfo = {}, primaryMtnDetails }) => {
    let { encryptedMtnDES, deviceCategory } = selectedDeviceInfo;
    const qParams = window.location.href.includes('upgradeFlowTest=true');
    const upgradeFlowTestCookie = getCookie('upgradeFlowTest') ? true : false;
    let redirectionUrl = '';
    if (selectedDeviceInfo?.secondMtn || selectedDeviceInfo?.isSecondNumber) {
      let secondNumberObj;
      if (selectedDeviceInfo?.isSecondNumber && primaryMtnDetails?.secondMtn) {
        encryptedMtnDES = primaryMtnDetails?.encryptedMtnDES;
        deviceCategory = primaryMtnDetails?.deviceCategory;
        secondNumberObj = {
          isSecondNumber: true,
          primaryMtn: primaryMtnDetails?.mtn,
          secondMtn: primaryMtnDetails?.secondMtn,
        };
      } else {
        secondNumberObj = {
          isSecondNumber: true,
          primaryMtn: selectedDeviceInfo?.mtn,
          secondMtn: selectedDeviceInfo?.secondMtn,
        };
      }
      sessionStorage.setItem('secondaryProcessingMTN', JSON.stringify(secondNumberObj));
    }
    redirectionUrl = `${actionValue}${encryptedMtnDES}&dc=${deviceCategory}`;
    if (qParams || upgradeFlowTestCookie) {
      redirectionUrl = `${actionValue}${encryptedMtnDES}&dc=${deviceCategory}&upgradeFlowTest=true`;
    }
    window.location.href = redirectionUrl;
  };

  setCookieForRecommendedDeviceUpgrade = (cookieName, value) => {
    const domainName = window?.location?.hostname;
    const getTheHostName = domainName?.split('.')[1];
    const subDomainName = domainName?.split('.')[2];
    const domainString = `${getTheHostName}.${subDomainName}`;
    let cookieString = `${this.validateUrl(cookieName)}=${this.validateUrl(value)};path=/;`;
    if (domainName === 'localhost' || domainName === '127.0.0.1') document.cookie = xss(cookieString);
    document.cookie = `${this.validateUrl(cookieString)}domain=.${this.validateUrl(domainString)}`;
  }

  validateUrl = (str) => {
    if (str) {
      return xss(str);
    }
    return '';
  };

  getUpgradeActionValue = (selectedDeviceDetail, pageContent, pageItems, pageActions, buttonName) => {
    const upgradeFlowTestCookie = getCookie('upgradeFlowTest') ? true : false;
    const qParams = window.location.href.includes('upgradeFlowTest=true');
    const buttonType = ((selectedDeviceDetail[0]?.deviceCategory === 'phone' && selectedDeviceDetail[0]?.newSelectedMdnFlowFFlag) || qParams || upgradeFlowTestCookie) ? 'dppUpgradeBtn' : buttonName;
    const actionKey = pageContent && common.getActionKey(pageItems, buttonType);
    let actionKeyValue = pageContent && common.getActionByKey(pageActions, actionKey);
    let actionValue = actionKeyValue && actionKeyValue.actionValue;

    if (buttonType === 'dppUpgradeBtn') {
      const allowedBrands = ['apple', 'samsung', 'google'];
      const actionValueWithBrandName = actionValue?.replace('##BRAND##', selectedDeviceDetail[0]?.brandName?.toLowerCase());
      const actionValueWithoutBrandName = actionValue?.replace('##BRAND##', '');
      if (allowedBrands?.includes(selectedDeviceDetail[0]?.brandName?.toLowerCase())) {
        actionValue = actionValueWithBrandName;
      } else {
        actionValue = actionValueWithoutBrandName;
      }
    }

    return actionValue;
  };


  renderRecommendedDeviceUpgradeLink = (selectedMdn) => {
    let selectedMtnRecommendedDevice = "";
    let offerId = "";
    let oneClickEnabled = "&oneClickEnabled=true&intent=EUP";
    let recommendedDeviceId = "";
    let actionUrl = "";
    let recommendedDeviceDetails = "";
    let impressionFragments = "";
    if (this.props?.recommendedDevice) {
      let selectedMtnRecommendedDeviceArray = Object.values(this.props?.recommendedDevice);
      if (selectedMtnRecommendedDeviceArray && selectedMtnRecommendedDeviceArray?.length > 0) {
        selectedMtnRecommendedDevice =
          selectedMtnRecommendedDeviceArray[0]?.filter(
            (device) => device.processingMTN == selectedMdn
          );
      }
      //To get the PDP URL based on canonical url , offerid and one click enabled
      if (selectedMtnRecommendedDevice && selectedMtnRecommendedDevice?.length > 0) {
        if (selectedMtnRecommendedDevice[0]?.deviceId) {
          recommendedDeviceId = selectedMtnRecommendedDevice[0].deviceId;
          if (selectedMtnRecommendedDevice[0]?.offerId) {
            offerId = `?sedOfferId=${selectedMtnRecommendedDevice[0]?.offerId}`;
          }

          if (this.props?.productList) {
            const entries = Object.entries(this.props?.productList);
            const entry = entries.find(([key, value]) => key === recommendedDeviceId);
            let canonicalUrlValue = '';
            if (entry) {
              const [key, value] = entry;
              canonicalUrlValue = value?.canonicalUrl;
              console.log(`Canonical URL: ${canonicalUrlValue}`);
              actionUrl = `${canonicalUrlValue}${offerId}${oneClickEnabled}`;
              let domainUrl = window?.location?.origin;
              actionUrl = domainUrl + "/" + actionUrl;
            } else {
              console.log(`No entry found for deviceId: ${recommendedDeviceId}`);
            }
          }
        }
      }
    }
    return { recommendedDeviceId, actionUrl, impressionFragments, recommendedDeviceDetails };
  }

  renderRecommendedDeviceNewUpgradeLink = (selectedMdn) => {
    let selectedMtnRecommendedDevice = "";
    let oneClickEnabled = "?oneClickEnabled=true&intent=EUP";
    let canonicalUrlValue = '';
    let actionUrl = "";
    let impressionFragments = "";
    let recommendedDeviceId = "";
    let offerId = ''
    if (this.props?.recommendedTiles && this.props?.recommendedTiles?.recommendedDevices?.length > 0) {
      let selectedMtnRecommendedDeviceArray = Object.values(this.props?.recommendedTiles);
      if (selectedMtnRecommendedDeviceArray && selectedMtnRecommendedDeviceArray?.length > 0) {
        selectedMtnRecommendedDevice =
          selectedMtnRecommendedDeviceArray[0]?.filter(
            (device) => device?.processingMTN == selectedMdn
          );
      }
      if (selectedMtnRecommendedDevice?.length > 0) {
        canonicalUrlValue = selectedMtnRecommendedDevice?.[0]?.recommendedDeviceURL;
        recommendedDeviceId = selectedMtnRecommendedDevice?.[0]?.deviceId;
        //offerId = `?sedOfferId=${selectedMtnRecommendedDevice?.[0]?.offerId}`;
        actionUrl = `${canonicalUrlValue}${oneClickEnabled}`;
        let domainUrl = window?.location?.origin;
        let oneClickRequest = {
          cartInfo: {
            cartId: '',
            caseId: '',
            accountNumber: '',
            cartCreator: '',
            processingMTN: selectedMdn,
            processStep: 'GridWallPDP',
            processAction: 'ExpressUpgrade',
            intendType: 'EUP',
            isTradeInSelected: false,
            disableMyLink: false,
            editDevice: false,
            expressCheckout: null,
            noPendingOfferExists: false,
            isPromoPDP: false,
            mtnFlow: 'M',
          },
          data: {
            lines: [
              {
                isCommonPDP: true,
                mtn: selectedMdn,
                purchasePath: 'EUP',
                portInNumber: '',
                eupNoPromoFlow: false,
                device: {
                  id: selectedMtnRecommendedDevice?.[0]?.sorId,
                  contractTerm: 'VERIZON_EDGE',
                  iconicPhone: true,
                  dppMonths: 36,
                  productId: selectedMtnRecommendedDevice?.[0]?.deviceId,
                  category: 'Smartphones',
                  preconfigure: true,
                },
                sim: {
                  id: selectedMtnRecommendedDevice?.[0]?.simId,
                },
                ispuFlow: false,
                estimatedReadyByDate: '',
                depletionLocationCode: '',
                depletionType: 'F',
                isKeepingExistingEqProtection: true,
                newLineOrAAL: false,
                isNewLine: false,
                selectedPromoId: selectedMtnRecommendedDevice?.[0]?.promotionId,
                selectedPromoType: selectedMtnRecommendedDevice?.[0]?.promoType,
                promoRejectionIndicator: false,
                isIconicPhone: true,
                selectedSedOfferId: selectedMtnRecommendedDevice?.[0]?.offerId,
                selectedSpoId: '',
                isStrategicOffer: selectedMtnRecommendedDevice?.[0]?.isStrategicOffer || false,
                restricted: (selectedMtnRecommendedDevice?.[0]?.isStrategicOffer) ? 'Y' : '',
                restrictedProductType: (selectedMtnRecommendedDevice?.[0]?.isStrategicOffer) ? 'EQP' : '',
                isTradeInIntentSelected: true,
              },
            ],
            rtm: {
              url: '',
              img: '',
              name: selectedMtnRecommendedDevice?.[0]?.productDisplayName,
              make: '',
              categoryId: '',
              pageURL: '',
            },
            enableFcc: true,
            couponCode: '',
          },
        };
        actionUrl = this.recommendedDeviceTile(oneClickRequest, selectedMtnRecommendedDevice, actionUrl);
        actionUrl = domainUrl + "/" + actionUrl;
        impressionFragments = { "list": `L1|P1|Manage device_rtm|Smartphones|||dispid_82|${selectedMtnRecommendedDevice[0]?.sorId ? `sorid_${selectedMtnRecommendedDevice[0]?.sorId}` : ''}^L1|P2||||||PlanUsage Tile^L1|P3||||||Device Protect Tile` };
      }
    }
    return { recommendedDeviceId, actionUrl, impressionFragments, selectedMtnRecommendedDevice };
  }

  renderDeviceManagementLink = (singleLink, index) => {
    let pageContent;
    let isMvm = common.getChannelId() === 'VZW-MFA';
    if (this.props.deviceDetailInfoSection && this.props.deviceDetailInfoSection.sections) {
      pageContent = common.getContentFromSection(this.props.deviceDetailInfoSection, 'devicesLandingMainSection');
      pageContent = pageContent.sections[0];
    }
    let pageItems = pageContent && pageContent.contents && pageContent.contents[0].items;
    const pageActions = pageContent && pageContent.actions;
    let deviceList = (pageContent && pageContent.data) || [];

    let selectedDeviceDetail = (deviceList && deviceList.filter((singleDevice) => singleDevice.mtn == this.state.selectedMdn)) || [];
    let {
      deviceManagement,
      changeMobileNumberThrottle,
      encryptedMtnDES,
      mtn,
      encryptedSimId,
      deviceCategory = '',
      isSecondNumber,
    } = selectedDeviceDetail.length && selectedDeviceDetail[0];
    let primaryMtn = (isSecondNumber && deviceList && deviceList.find((singleDevice) => singleDevice.secondMtn == mtn));
    const deviceDetailBtnFFlag = (selectedDeviceDetail?.[0]?.deviceDetailsFeatureFlags?.deviceDetailBtnFFlag && selectedDeviceDetail?.[0]?.pearlTrialFlow);

    return deviceManagement[`${singleLink}`] ? (
      <Col
        key={`${singleLink}`}
        colSizes={{
          mobile: 4,
          desktop: 6,
          tablet: 6,
        }}
      >
        <ListGroup topLine={false} bottomLine={true} surface='light' viewport='desktop' key={`${singleLink}`}>
          <ListGroupItem
            ariaLabel={`${common.getItemValue(pageItems, `${singleLink}`)}`}
            actionElement='none'
            ariaRole='link'
            onClick={() => {
              if (singleLink == 'tradeInBtn') {
                let actionKey = pageContent && common.getActionKey(pageItems, `${singleLink}`);
                const actionKeyValue = pageContent && common.getActionByKey(pageActions, actionKey);
                const actionValue = actionKeyValue && actionKeyValue.actionValue;
                window.location.href = `${actionValue}${encryptedMtnDES}`;
              } else if (singleLink == 'pinandPersonalUnblockingKeyBtn') {
                const payload = { encryptedSimID: `${encryptedSimId}`, selectedMsisdn: `${mtn}` };
                this.props.actions.getPinAndPukCode(payload);
              } else if (deviceDetailBtnFFlag && singleLink == 'changeOrReplaceDeviceLineBtn') {
                this.setState({
                  changeOrReplaceModal: true
                });
              } else if (singleLink == 'upgradeDeviceBtn') {
                let actionKey = pageContent && common.getActionKey(pageItems, `${singleLink}`);
                const actionKeyValue = pageContent && common.getActionByKey(pageActions, actionKey);
                const actionValue = actionKeyValue && actionKeyValue.actionValue;
                this.handleUpgradeRedirection({
                  actionValue,
                  selectedDeviceInfo: selectedDeviceDetail[0],
                  primaryMtnDetails: primaryMtn,
                });
              } else if (singleLink == 'changeMobileNumberBtn' && !isMvm) { //For Mdot 
                let actionKey = pageContent && common.getActionKey(pageItems, `${singleLink}`);
                let click_info = this.getOnClickInfo(pageContent, actionKey);
                window.location.href = `${click_info.actionValue}${selectedDeviceDetail[0].encryptedMtnDES}`;
              } else if (singleLink == 'changeMobileNumberBtn' && isMvm) { //For MVA native 
                let actionKey = pageContent && common.getActionKey(pageItems, `${singleLink}`);
                let click_info = this.getOnClickInfo(pageContent, `${actionKey}_native`, this.state.selectedMdn);
                click_info?.onclick();
              } else if (singleLink == 'changeMobileNumberThrottle') { //For MVA NSA 
                let actionKey = pageContent && common.getActionKey(pageItems, `${singleLink}`);
                let click_info = this.getOnClickInfo(pageContent, actionKey);
                window.location.href = `${click_info.actionValue}${selectedDeviceDetail[0].encryptedMtnDES}`;
              } else {
                let actionKey = pageContent && common.getActionKey(pageItems, `${singleLink}`);
                let click_info = this.getOnClickInfo(pageContent, isMvm ? `${actionKey}_native` : actionKey, this.state.selectedMdn);
                click_info?.onclick();
              }
            }}
          >
            <ListGroupItemTitle bold={false}>
              <ListGroupItemTitleContent>
                <ItemWrapper>
                  <span>{common.getItemValue(pageItems, `${singleLink}`)}</span>
                  <span><Icon name='right-arrow' size='medium' /></span>
                </ItemWrapper>
              </ListGroupItemTitleContent>
            </ListGroupItemTitle>
          </ListGroupItem>
        </ListGroup>
      </Col>
    ) : null;
  };

  renderPreferenceLink = (singleLink, index) => {
    const isMvm = common.getChannelId() == 'VZW-MFA';
    const { deviceDetailInfoSection } = this.props;
    const pageContent = deviceDetailInfoSection?.sections
      ? common.getContentFromSection(deviceDetailInfoSection, 'devicesLandingMainSection')?.sections?.[0]
      : null;
    const pageAttributes = deviceDetailInfoSection?.pageAttributes || {};
    const enableSharenameid = common.getItemValue(pageAttributes, 'enableSharenameid') === 'true';
    const enableCallFilter = common.getItemValue(pageAttributes, 'enableCallFilter') === 'true';
    const enableBlocks = common.getItemValue(pageAttributes, 'enableBlocks') === 'true';
    const pageItems = pageContent?.contents?.[0]?.items;
    const deviceList = pageContent?.data || [];
    const selectedDeviceDetail = (deviceList && deviceList.filter((singleDevice) => singleDevice.mtn == this.state.selectedMdn)) || [];
    const { preferences, shareNameIDBtnThrottle } = selectedDeviceDetail;
    if (!preferences?.[singleLink]) return null; 
    const isAllowedAction = {
      shareNameIDBtn: enableSharenameid &&!isMvm,
      blockSpecificServicesBtn: enableBlocks && !isMvm,
      blockCallsAndMessagesBtn: enableBlocks && !isMvm,
      manageCallFilterBtn: enableCallFilter && !isMvm
    }[singleLink];
    const handleClick = () => {
      const actionKey = common.getActionKey(pageItems, singleLink);
      let clickInfo;
      if (singleLink === 'shareNameIDBtn' && shareNameIDBtnThrottle) {
        clickInfo = this.getOnClickInfo(pageContent, isMvm ? `nsa_${actionKey}_native` : `nsa_${actionKey}`, this.state.selectedMdn);
      } else if (isAllowedAction) {
        clickInfo = this.getOnClickInfo(pageContent, `nsa_${actionKey}`);
      } else {
        clickInfo = this.getOnClickInfo(pageContent, isMvm ? `${actionKey}_native` : actionKey, this.state.selectedMdn);
      }

      clickInfo?.onclick();
    };

    return (
      <Col key={singleLink} colSizes={{ mobile: 4, desktop: 6, tablet: 6 }}>
        <ListGroup topLine={false} bottomLine={true} surface="light" viewport="desktop">
          <ListGroupItem
            ariaLabel={common.getItemValue(pageItems, singleLink)}
            actionElement="none"
            ariaRole="link"
            onClick={handleClick}
          >
            <ListGroupItemTitle bold={false}>
              <ListGroupItemTitleContent>
                <ItemWrapper>
                  <span>{common.getItemValue(pageItems, singleLink)}</span>
                  <span><Icon name='right-arrow' size='medium' /></span>
                </ItemWrapper>
                </ListGroupItemTitleContent>
            </ListGroupItemTitle>
          </ListGroupItem>
        </ListGroup>
      </Col>
    );
  };

  renderTroubleshootAndSupportLink = (singleLink, index) => {
    let pageContent;
    let isMVA = () => common.getChannelId() === 'VZW-MFA';
    if (this.props.deviceDetailInfoSection && this.props.deviceDetailInfoSection.sections) {
      pageContent = common.getContentFromSection(this.props.deviceDetailInfoSection, 'devicesLandingMainSection');
      pageContent = pageContent.sections[0];
    }
    let pageItems = pageContent && pageContent.contents && pageContent.contents[0].items;
    let deviceList = (pageContent && pageContent.data) || [];

    let selectedDeviceDetail = (deviceList && deviceList.filter((singleDevice) => singleDevice.mtn == this.state.selectedMdn)) || [];
    let { troubleshootAndSupport, skuId, mtn, wififlow } = selectedDeviceDetail.length && selectedDeviceDetail[0];

    return troubleshootAndSupport[`${singleLink}`] ? (
      <Col
        key={`${singleLink}`}
        colSizes={{
          mobile: 4,
          desktop: 6,
          tablet: 6,
        }}
      >
        <ListGroup topLine={false} bottomLine={true} surface='light' viewport='desktop' key={`${singleLink}`}>
          <ListGroupItem
            ariaLabel={`${common.getItemValue(pageItems, `${singleLink}`)}`}
            actionElement='none'
            ariaRole='link'
            onClick={() => {
              if (singleLink == 'troubleshootBtn' && skuId) {
                let defaultUrl = common.getActionValue(pageItems, pageContent && pageContent.actions, 'troubleshootBtn');
                const payload = {
                  mdn: `${mtn}`,
                  skuId: `${skuId}`,
                };
                this.props.actions.getTroubleshootUrlResp(payload, defaultUrl);
              } else if (singleLink == 'runHealthCheckBtn' && isMVA()) { //For MVA Run Helth Check Action Selection for iOS and Android
                let actionKey = pageItems && common.getActionKey(pageItems, `${singleLink}`);
                const linkItem = common.getItem(pageItems, singleLink)
                let finalActionKey;
                try {
                  finalActionKey = isAndroidDevice() &&
                    !isCurrentClientVersionGreaterOrEquals((linkItem && linkItem.itemAttributes && linkItem.itemAttributes.supportedFromInAndroid) || '20.2.2') ? `${actionKey}_android` : `${actionKey}_native`;
                } catch (error) {
                  //This code can run only if while MVA running in Android Device  
                  finalActionKey = `${actionKey}_android`;
                }
                let click_info = this.getOnClickInfo(pageContent, finalActionKey);
                click_info?.onclick();
              } else {
                let actionKey = pageContent && common.getActionKey(pageItems, `${singleLink}`);
                let click_info = this.getOnClickInfo(pageContent, isMVA() ? `${actionKey}_native` : actionKey, this.state.selectedMdn, wififlow);
                click_info?.onclick();
              }
            }}
          >
            <ListGroupItemTitle bold={false}>
              <ListGroupItemTitleContent><ItemWrapper>
                <span>{common.getItemValue(pageItems, `${singleLink}`)}</span>
                <span><Icon name='right-arrow' size='medium' /></span>
              </ItemWrapper>
              </ListGroupItemTitleContent>
            </ListGroupItemTitle>
          </ListGroupItem>
        </ListGroup>
      </Col>
    ) : null;
  };

  handleDeviceMangement(deviceManagement) {
    let newArray = [];
    Object.keys(deviceManagement)?.forEach((singleLinkValue) => {
      if (deviceManagement[`${singleLinkValue}`]) {
        newArray.push(singleLinkValue);
      }
    });
    if (newArray.includes('checkNetworkCompatibiltyText') && newArray.includes('upgradeDeviceBtn')) {
      const index1 = newArray.findIndex((value) => value == 'checkNetworkCompatibiltyText');
      newArray.splice(index1, 1);
      const index2 = newArray.findIndex((value) => value == 'upgradeDeviceBtn');
      newArray.splice(index2 + 1, 0, 'checkNetworkCompatibiltyText');
    }

    return newArray?.map(this.renderDeviceManagementLink);
  }

  handlePreferences(preferences) {
    let newArray = [];
    delete preferences.shareNameIDBtnThrottle;
    Object.keys(preferences)?.forEach((singleLinkValue) => {
      if (preferences[`${singleLinkValue}`]) {
        newArray.push(singleLinkValue);
      }
    });
    return newArray?.map(this.renderPreferenceLink);
  }

  handleTroubleshootAndSupport(troubleshootAndSupport) {
    let newArray = [];
    Object.keys(troubleshootAndSupport)?.forEach((singleLinkValue) => {
      if (troubleshootAndSupport[`${singleLinkValue}`]) {
        newArray.push(singleLinkValue);
      }
    });
    return newArray?.map(this.renderTroubleshootAndSupportLink);
  }

  handleClickForError = (actionType, actionValue) => {
    if (actionType === 'http') {
      window.location.assign(actionValue);
    } else if (actionType === 'route') {
      window.location.hash = actionValue;
    }
  };

  buttonCloseClick = () => {
    this.setState({ showSIMProtectionNotification: !this.state.showSIMProtectionNotification });
  };

  handleModalChange = (data) => {
    this.setState({ showModal: data });
  };

  handleChangeOrReplaceModalChange = (data) => {
    this.setState({ changeOrReplaceModal: data });
  };

  handleChangeOrReplaceModalCancel = () => {
    this.setState({ changeOrReplaceModal: false });
  };

  handleSIMProtectionModalChange = (data) => {
    this.setState({
      showSIMProtectionModal: data
    });
  };

  handleSIMProtectionModalRedirect = () => {
    dispatchOpenView('sim freeze-modal', '#simprotection');
    let pageContent;
    if (this.props.deviceDetailInfoSection && this.props.deviceDetailInfoSection.sections) {
      pageContent = common.getContentFromSection(this.props.deviceDetailInfoSection, 'devicesLandingMainSection');
      pageContent = pageContent.sections[0];
    }
    let pageItems = pageContent && pageContent.contents && pageContent.contents[0].items;
    let SIMProectionpageAction = common.getActionValue(pageItems, pageContent && pageContent.actions, "SIMProectionpage");
    window.location.href = `${SIMProectionpageAction}`;
  };

  handleCancel = () => {
    this.setState({ showModal: false });
  };

  recommendedDeviceTile = (oneClickRequest, selectedMtnRecommendedDevice, url) => {
    let isQuickUpgrade = selectedMtnRecommendedDevice[0]?.isQuickCartEnabled && selectedMtnRecommendedDevice[0]?.simId && selectedMtnRecommendedDevice[0]?.promoType && selectedMtnRecommendedDevice[0]?.promotionId;
    if (isQuickUpgrade) {
      url = 'sales/nextgen/oneclick.html';
    }
    if (url?.includes('oneclick')) {
      sessionStorage?.setItem('ONE_CLICK_ADD_DEVICE', JSON?.stringify(oneClickRequest));
    }
    return url;
  }


  displayNumber = (selectedMdn = '') => {
    let pageContent;
    let newDeviceManagementArray = [];
    let isMvm = common.getChannelId() === 'VZW-MFA';

    if (this.props.deviceDetailInfoSection && this.props.deviceDetailInfoSection.sections) {
      pageContent = common.getContentFromSection(this.props.deviceDetailInfoSection, 'devicesLandingMainSection');
      pageContent = pageContent.sections[0];
    }
    let pageItems = pageContent && pageContent.contents && pageContent.contents[0].items;
    const pageActions = pageContent && pageContent.actions;
    let deviceList = (pageContent && pageContent.data) || [];
    if (isMvm) {
      deviceList = deviceList?.filter((value) => !value?.networkExtender);
    }
    let selectedDeviceDetail = (deviceList && deviceList.filter((singleDevice) => singleDevice.mtn == selectedMdn)) || [];
    const upgradeFlowTestCookie = getCookie('upgradeFlowTest') ? true : false;
    const qParams = window.location.href.includes('upgradeFlowTest=true');
    const buttonType = ((selectedDeviceDetail[0]?.deviceCategory === 'phone' && selectedDeviceDetail[0]?.newSelectedMdnFlowFFlag) || qParams || upgradeFlowTestCookie) ? 'dppUpgradeBtn' : 'returnAndUpgradeBtn';
    const actionKey = pageContent && common.getActionKey(pageItems, buttonType);
    let {
      images = {},
      esim = false,
      esimCapable = false,
      psim = false,
      pendingLineChange = false,
      mtn = '',
      device5GE,
      displayMtn = '',
      modelName = '',
      nickName = '',
      simId = '',
      simType = '',
      userRole = '',
      deviceId = '',
      planUsageInfo = {},
      accountPlan = {},
      paymentInfo = {},
      openEnrollmentPeriod = '',
      deviceProtectionEnrolled = '',
      encryptedMtnDES,
      deviceCategory,
      isMtnSuspended,
      secondMtn,
      isSecondNumber,
      eSimActive,
      pSimActive,
      fileAClaim,
      hasSecondNumberEligible,
      smartPhone,
      simFreezeInfo = {},
      deviceImeiFlag,
    } = selectedDeviceDetail.length && selectedDeviceDetail[0];

    const dppPayOffBtn = ((buttonType === 'dppUpgradeBtn') && (paymentInfo?.payOffEligible && paymentInfo?.hasPayOffBalance && !paymentInfo?.promoDevice));

    let primaryMtn = (deviceList && deviceList.find((singleDevice) => singleDevice.secondMtn == mtn)) || [];

    let secondMdn = deviceList && deviceList.find((singleDevice) => singleDevice.mtn == secondMtn);

    let paymentBalanceInfo = common.getItemValue(pageItems, 'PaymentBalanceHeader');

    let imeiTxt = reactGlobals?.featureFlag?.deviceImeiFFlag === "true" ? (deviceImeiFlag === "S" ? common.getItemValue(pageItems, 'imei2Text') : common.getItemValue(pageItems, 'imeiText')) : common.getItemValue(pageItems, 'imei2Text') ? common.getItemValue(pageItems, 'imei2Text') : `IMEI2`;

    if (paymentInfo?.pendingNumberOfInstallments && paymentBalanceInfo !== '') {
      paymentBalanceInfo = paymentBalanceInfo?.replace('##Months##', paymentInfo?.pendingNumberOfInstallments);
    }

    if (paymentInfo?.remainingBalance && paymentBalanceInfo !== '') {
      paymentBalanceInfo = paymentBalanceInfo?.replace('##balance##', `$${paymentInfo?.remainingBalance}`);
    }
    const isNewEndpoint = common.getItemValue(pageItems, 'newRecommendationTileEnabled') === 'true';
    let { recommendedDeviceId, actionUrl, impressionFragments, selectedMtnRecommendedDevice } = isNewEndpoint ? this.renderRecommendedDeviceNewUpgradeLink(selectedMdn) : this.renderRecommendedDeviceUpgradeLink(selectedMdn);
    const enablePersonalizedTile = (this.personalizationFlag() && !isMtnSuspended && !paymentInfo?.hasPayOffBalance && smartPhone) && (selectedMtnRecommendedDevice?.length > 0);
    if (enablePersonalizedTile && window?.vztag?.api) {
      window?.vztag?.api?.dispatch("impression", impressionFragments);
    }
    let subFlow = actionUrl ? "EXPUPG" : "BAUUPG";
    let name = `L1|P1||||||PaymentInfo Tile|${common.getItemValue(pageItems, "upgradeBtn")}`;
    let dataTrackObject = {
      "type": "impression",
      "name": name,
      "format": "ONLY_USE_WHEN_DIRECTED_BY_TAGGING",
      "data": {
        "page": {
          "subFlow": subFlow
        }
      }
    };

    let DPASubtext = '';

    if (paymentInfo?.lessThan30Days) {
      DPASubtext = common.getItemValue(pageItems, 'BeforeThirtyDaysSubtext');
    } else if (paymentInfo?.edgeUpRequiredPercent === "50.00") {
      let earlyUpgradePaidPercentage = 0;
      earlyUpgradePaidPercentage = Math.round(
        (
          parseFloat(paymentInfo?.numberOfInstallmentsBilled) /
          (parseFloat(paymentInfo?.pendingNumberOfInstallments) + parseFloat(paymentInfo?.numberOfInstallmentsBilled))
        ) *
        100
      )
      if (earlyUpgradePaidPercentage < 50) {
        DPASubtext = common.getItemValue(pageItems, 'earlyUpgradepaidlessSubHeaderText');
        DPASubtext = DPASubtext.replace("##balance##", '$' + paymentInfo?.dppEarlyUpgradeAmount)
      } else if (earlyUpgradePaidPercentage >= 50) {
        DPASubtext = common.getItemValue(pageItems, 'earlyUpgradepaidhighSubHeaderText');
      }
      else {
        DPASubtext = common.getItemValue(pageItems, 'upgradeEligibilitySubtHeader');
      }
    } else if (paymentInfo?.upgradeEligible) {
      DPASubtext = common.getItemValue(pageItems, 'DevicePaymentAgreementText');
    } else {
      DPASubtext = common.getItemValue(pageItems, 'upgradeEligibilitySubtHeader');
    }

    const SIMIDFun = () => {
      return (
        <div colSizes={{ mobile: 1 }}>
          <ContentContainer>
            <SubHeaderTitle isPearlFlow={selectedDeviceDetail?.[0]?.pearlTrialFlow}>
              <Title primitive='h2'>{common.getItemValue(pageItems, 'deviceIdHeader')}</Title>
              <Body primitive='p'>
                <span className='contains-PII' aria-label={`${imeiTxt}: ${deviceId}`} data-cs-mask>{`${imeiTxt}: ${deviceId}`}</span>
              </Body>
              {esim && (
                <InlineContentBox isPearlFlow={selectedDeviceDetail?.[0]?.pearlTrialFlow}>
                  <Icon name='alternate-checkmark' color='rgb(0, 131, 48)' size='small' />
                  <Body>{common.getItemValue(pageItems, 'eSIMCapableHeader')}</Body>
                </InlineContentBox>
              )}
            </SubHeaderTitle>
          </ContentContainer>
        </div>
      )
    }
    const paymentBalanceDetails = (title) => {
      return (<div>
        {paymentInfo?.hasPayOffBalance && paymentInfo?.promoDevice && (
          <Fragment>
            <MyPlanTitle>
              <Title primitive='h2'>{common.getItemValue(pageItems, 'DevicePaymentAgreementHeader')}</Title>
            </MyPlanTitle>
            <MyPlanSubTitle>
              <Title primitive='p'>{common.getItemValue(pageItems, 'DevicePaymentAgreemenPromotiontText')}</Title>
            </MyPlanSubTitle>
          </Fragment>
        )}
        {paymentInfo?.hasPayOffBalance && !paymentInfo?.promoDevice && (
          <Fragment>
            <MyPlanTitle>
              <Title primitive='h2'>{common.getItemValue(pageItems, 'DevicePaymentAgreementHeader')}</Title>
            </MyPlanTitle>
            <MyPlanSubTitle>
              <Title primitive='p'>
                <span dangerouslySetInnerHTML={{ __html: DPASubtext }} />
              </Title>
            </MyPlanSubTitle>
          </Fragment>
        )}
        {selectedDeviceDetail?.[0]?.pearlTrialFlow ?
          <Fragment>
            <MyPlanTitle>
              <Title primitive='h2'>{common.getItemValue(pageItems, 'pearlEligibleHeaderText')}</Title>
            </MyPlanTitle>
            <MyPlanSubTitle>
              <Title primitive='p'>{common.getItemValue(pageItems, 'pearlEligibleSubHeader')}</Title>
            </MyPlanSubTitle>
          </Fragment>
          : !paymentInfo?.hasPayOffBalance && (
            <Fragment>
              <MyPlanTitle>
                <Title primitive='h2'>{common.getItemValue(pageItems, 'upgradeEligibilityHeaderText')}</Title>
              </MyPlanTitle>
              <MyPlanSubTitle>
                <Title primitive='p'>{title}</Title>
              </MyPlanSubTitle>
            </Fragment>)}
        {paymentInfo?.hasPayOffBalance && !paymentInfo?.promoDevice && (
          <UpgradeTileContent>
            <SecondRow>
              <Title primitive='p'>{paymentBalanceInfo}</Title>
            </SecondRow>
            <ThirdRow
              edgeUpRequiredPercent={paymentInfo?.edgeUpRequiredPercent}
              paidPercentage={Math.round(
                (parseFloat(paymentInfo?.numberOfInstallmentsBilled) /
                  (parseFloat(paymentInfo?.pendingNumberOfInstallments) + parseFloat(paymentInfo?.numberOfInstallmentsBilled))) *
                100
              )}
            >
              <Title id='firstDot' primitive='p'></Title>
              <Title id='total' primitive='p'></Title>
              {paymentInfo?.edgeUpRequiredPercent && parseInt(paymentInfo?.edgeUpRequiredPercent) == 50 && (
                <Title id='middleDot' primitive='p'></Title>
              )}
              <Title id='paid' primitive='p'></Title>
              <Title id='lastDot' primitive='p'></Title>
            </ThirdRow>
          </UpgradeTileContent>
        )}
      </div>)
    }

    const upgradeButton = (() => {

      return (
        <MyPlanDeviceCtaContainer className="upgrade">
          {isMtnSuspended
            && (common.getItemValue(pageItems, 'reconnectServiceBtn') ? (
              <Button
                use="secondary"
                data-track={`L1|P1||||||PaymentInfo Tile|${common.getItemValue(pageItems, 'reconnectServiceBtn')}`}
                data-testid="reconnectServiceBtnTestId"
                onClick={() => {
                  const reConnectDeviceActionKey = pageContent && common.getActionKey(pageItems, 'reconnectServiceBtn');
                  const reConnectDeviceAction = pageContent && common.getActionByKey(pageActions, reConnectDeviceActionKey);
                  window.location.href = reConnectDeviceAction.actionValue;
                }}
              >
                {common.getItemValue(pageItems, 'reconnectServiceBtn')}
              </Button>
            ) : (
              <Button
                use="secondary"
                data-track={`L1|P1||||||PaymentInfo Tile|${common.getItemValue(pageItems, 'suspendOrReconnectServiceBtn')}`}
                data-testid="suspendOrReconnectServiceBtnTestId"
                onClick={() => {
                  const reConnectDeviceActionKey = pageContent && common.getActionKey(pageItems, 'suspendOrReconnectServiceBtn');
                  const reConnectDeviceAction = pageContent && common.getActionByKey(pageActions, reConnectDeviceActionKey);
                  window.location.href = reConnectDeviceAction.actionValue;
                }}
              >
                {common.getItemValue(pageItems, 'suspendOrReconnectServiceBtn')}
              </Button>
            ))}
          {selectedDeviceDetail?.[0]?.pearlTrialFlow
            ? (
              <Button
                use="primary"
                data-track={`L1|P1||||||Pearl Trial Tile|${common.getItemValue(pageItems, 'pearlTrialBtn')}`}
                data-testid="pearlTrialBtnTestId"
                onClick={() => {
                  const actionKey = pageContent && common.getActionKey(pageItems, 'pearlTrialBtn');
                  const actionKeyValue = pageContent && common.getActionByKey(pageActions, actionKey);
                  const actionValue = actionKeyValue && actionKeyValue.actionValue;
                  window.location.href = `${actionValue}`;
                }}
              >
                {common.getItemValue(pageItems, 'pearlTrialBtn')}
              </Button>
            )
            : !isMtnSuspended && !paymentInfo?.hasPayOffBalance && (
              <Button
                use="primary"
                data-testid="payOffDeviceUpgBtnTestId"
                data-track={common.getItemValue(pageItems, 'upgradeBtn')}
                onClick={() => {
                  const simfreezeInfoValue = (simFreezeInfo?.simFreezeCode + simFreezeInfo?.simUnfreezeTimeStamp + simFreezeInfo?.isBlocked)
                  const simFreezeKey = pageContent && common.cipher(simfreezeInfoValue, 29)
                  if (simFreezeKey === simFreezeInfo?.simFreezeDetails) {
                    if (simFreezeInfo?.simFreezeCode === 'F' && simFreezeInfo?.isBlocked === 'Y') {
                      this.setState({
                        showSIMProtectionModal: true,
                        SIMProtectionDuration: simFreezeInfo?.simFreezeDuration,
                      });
                    } else if (simFreezeInfo?.simFreezeCode === 'N' && simFreezeInfo?.isBlocked === 'Y') {
                      this.setState({
                        showSIMProtectionNotification: true,
                        SIMProtectionDuration: simFreezeInfo?.simFreezeDuration,
                        SIMProtectionTimeStamp: simFreezeInfo?.simUnfreezeTimeStamp
                      })
                      dispatchNotifyEvent("Disable SIM protection", "Upgrade are blocked");
                    } else {
                      if (actionUrl !== undefined && actionUrl !== null && actionUrl !== '') {
                        this.setCookieForRecommendedDeviceUpgrade('selectedMtn', selectedMdn);
                        window.location.href = actionUrl;
                      } else {
                        let actionValue = this.getUpgradeActionValue(selectedDeviceDetail, pageContent, pageItems, pageActions, "upgradeBtn");
                        this.handleUpgradeRedirection({
                          selectedDeviceInfo: selectedDeviceDetail[0],
                          actionValue,
                          primaryMtnDetails: primaryMtn,
                        });
                      }
                    }
                  }
                  else {
                    window.location.reload();
                  }
                }}
              >
                {common.getItemValue(pageItems, 'upgradeBtn')}
              </Button>
            )}
          {paymentInfo?.payOffEligible && paymentInfo?.hasPayOffBalance && paymentInfo?.promoDevice && (
            <Button
              use="primary"
              data-testid="payOffDeviceBtnTestId"
              data-track={`L1|P1||||||PaymentInfo Tile|${common.getItemValue(pageItems, 'payOffDeviceBtn')}`}
              onClick={() => {
                const actionKey = pageContent && common.getActionKey(pageItems, 'payOffDeviceBtn');
                const actionKeyValue = pageContent && common.getActionByKey(pageActions, actionKey);
                const actionValue = actionKeyValue && actionKeyValue.actionValue;
                window.location.href = `${actionValue}${mtn}`;
              }}
            >
              {common.getItemValue(pageItems, 'payOffDeviceBtn')}
            </Button>
          )}
          {!isMtnSuspended && (paymentInfo?.displayReturnOption || dppPayOffBtn) && paymentInfo?.hasPayOffBalance && !paymentInfo?.promoDevice && (
            <Button
              use="primary"
              data-testid="returnAndUpgradeBtnTestId"
              data-track={`L1|P1||||||PaymentInfo Tile|${common.getItemValue(pageItems, 'returnAndUpgradeBtn')}`}
              onClick={() => {
                let actionValue = this.getUpgradeActionValue(selectedDeviceDetail, pageContent, pageItems, pageActions, 'returnAndUpgradeBtn');
                this.handleUpgradeRedirection({
                  actionValue,
                  selectedDeviceInfo: selectedDeviceDetail[0],
                  primaryMtnDetails: primaryMtn,
                });
              }}
            >
              {common.getItemValue(pageItems, buttonType)}
            </Button>
          )}
          {!isMtnSuspended
            && !paymentInfo?.displayReturnOption
            && paymentInfo?.upgradeEligible
            && paymentInfo?.hasPayOffBalance
            && !paymentInfo?.promoDevice && (
              <Button
                use="primary"
                data-testid="upgradeBtnTestId"
                data-track={common.getItemValue(pageItems, 'upgradeBtn')}
                onClick={() => {
                  const actionKey = pageContent && common.getActionKey(pageItems, 'upgradeBtn');
                  const actionKeyValue = pageContent && common.getActionByKey(pageActions, actionKey);
                  const actionValue = actionKeyValue && actionKeyValue.actionValue;
                  this.handleUpgradeRedirection({
                    actionValue,
                    selectedDeviceInfo: selectedDeviceDetail[0],
                    primaryMtnDetails: primaryMtn,
                  });
                }}
              >
                {common.getItemValue(pageItems, 'upgradeBtn')}
              </Button>
            )}
          {paymentInfo?.payOffEligible && paymentInfo?.hasPayOffBalance && !paymentInfo?.promoDevice && (
            <Button
              use="secondary"
              data-testid="payOffDeviceBtnNotPromoDevTestId"
              data-track={`L1|P1||||||PaymentInfo Tile|${common.getItemValue(pageItems, 'payOffDeviceBtn')}`}
              onClick={() => {
                const actionKey = pageContent && common.getActionKey(pageItems, 'payOffDeviceBtn');
                const actionKeyValue = pageContent && common.getActionByKey(pageActions, actionKey);
                const actionValue = actionKeyValue && actionKeyValue.actionValue;
                window.location.href = `${actionValue}${mtn}`;
              }}
            >
              {common.getItemValue(pageItems, 'payOffDeviceBtn')}
            </Button>
          )}
          {enablePersonalizedTile && (<Button
            use='secondary'
            data-testid='shopAllPhonesBtnTestId'
            data-track={JSON.stringify({ ...dataTrackObject, "name": `L1|P1||||||paymentinfo tile|Shop all phones` })}
            onClick={() => {
              window.location.href = `${window.origin}/smartphones`;
            }}
          >
            {"Shop all phones"}
          </Button>)}
        </MyPlanDeviceCtaContainer>

      )
    });

    return (
      <>
        <DeviceDetailContainer className=' main'>
          <Body size='large' color='#000000' bold={false}>
            <span data-cs-mask>{userRole}</span>
          </Body>
          <DeviceNameContainer>
            <Title size='small' primitive='h2'>
              <span data-cs-mask>{nickName}</span>
            </Title>
            <EditNickNameContainer>
              {this.props?.deviceHomeInfoSection?.updateNickNameFlag && (<TextLink
                type='standAlone'
                data-testid='editNickNameTestId'
                onClick={() => {
                  this.props.actions.openEditNickNameModal();
                }}
              >
                {selectedDeviceDetail?.[0]?.pearlTrialFlow ? common.getItemValue(pageItems, 'pearlTrialEditDeviceNameTextlink') : common.getItemValue(pageItems, 'editDeviceNameTextlink')}
              </TextLink>)}
            </EditNickNameContainer>
            {this.props.isOpenNickNameModal && (
              <EditNickNameModal
                isOpened={this.props.isOpenNickNameModal}
                handleCloseEditNickNameModal={() => this.props.actions.closeEditNickNameModal()}
                selectedDevice={selectedDeviceDetail.length && selectedDeviceDetail[0]}
                pageItems={pageItems}
              />
            )}
          </DeviceNameContainer>
          <span>{!selectedDeviceDetail?.[0]?.pearlTrialFlow && displayMtn}</span>
        </DeviceDetailContainer>


        <DeviceInfoContainer>
          <DeviceModelContainer isPearlFlow={selectedDeviceDetail?.[0]?.pearlTrialFlow}>
            {
              selectedDeviceDetail?.[0]?.pearlTrialFlow &&

              <ItemWrapper>
                <SubHeaderMobileTitle>
                  <Title primitive='h2'>{common.getItemValue(pageItems, 'modelHeader')}</Title>
                  <Body primitive='p'>
                    <span data-cs-mask>{modelName}</span>
                  </Body>
                </SubHeaderMobileTitle>
                <Wrapper>
                  {device5GE && (
                    <FiveGImg>
                      <img src='https://ss7.vzw.com/is/image/VerizonWireless/5g-logo-d-072822?$pngalpha$&scl=2' />
                    </FiveGImg>
                  )}
                </Wrapper>
              </ItemWrapper>
            }
            <DeviceModelContainerWrapper>
              <DeviceModelImage colSizes={{ mobile: 1 }} viewport='mobile'>
                <ContentContainer center>
                  <ProductImg isMtnSuspended={isMtnSuspended}>
                    <img src={images?.miniImage} />
                  </ProductImg>
                </ContentContainer>
              </DeviceModelImage>
              <DeviceModelDetails colSizes={{ mobile: 2 }}>
                <ContentContainer>
                  {!selectedDeviceDetail?.[0]?.pearlTrialFlow &&
                    <SubHeaderTitle isPearlFlow={selectedDeviceDetail?.[0]?.pearlTrialFlow}>
                      <Title primitive='h2'>{common.getItemValue(pageItems, 'modelHeader')}</Title>
                      <Body primitive='p'>
                        <span data-cs-mask>{modelName}</span>
                      </Body>
                    </SubHeaderTitle>
                  }
                  <SubHeaderTitle isPearlFlow={selectedDeviceDetail?.[0]?.pearlTrialFlow}>
                    {window.enableDualNumExp ? (
                      (secondMtn || isSecondNumber || hasSecondNumberEligible) ? (
                        <Title primitive='h2'>{common.getItemValue(pageItems, 'firstNumberHeader')}</Title>
                      ) : (
                        <Title primitive='h2'>{common.getItemValue(pageItems, 'mobileNumberHeader')}</Title>
                      )
                    ) : (
                      <Title primitive='h2'>{common.getItemValue(pageItems, 'mobileNumberHeader')}</Title>
                    )}
                    <Body primitive='p'>
                      <span data-cs-mask>
                        {!isSecondNumber ? displayMtn : primaryMtn && primaryMtn.displayMtn}{' '}
                        {!secondMtn &&
                          isSecondNumber &&
                          (!window.enableDualNumExp ? (
                            <TextLink
                              type='standAlone'
                              data-testid='manageTextTestId'
                              onClick={() => this.setState({ index: 0 })}
                            >
                              {common.getItemValue(pageItems, 'manageText')}
                            </TextLink>
                          ) : (
                            <TextLinkWrapper>
                              <TextLink
                                type='standAlone'
                                data-testid='manageTextTestId'
                                onClick={() => this.setState({ index: 0 })}
                              >
                                {common.getItemValue(pageItems, 'manageText')}
                              </TextLink>
                            </TextLinkWrapper>
                          ))}
                      </span>
                    </Body>
                    {!window.enableDualNumExp && (
                      <Body primitive='p'>
                        <span data-cs-mask>
                          {secondMdn ? secondMdn.displayMtn : !secondMtn && isSecondNumber && displayMtn}{' '}
                          {secondMtn && (
                            <TextLink
                              type='standAlone'
                              data-testid='manageTextTestId'
                              onClick={() => this.setState({ index: 1 })}
                            >
                              {common.getItemValue(pageItems, 'manageText')}
                            </TextLink>
                          )}
                        </span>
                      </Body>
                    )}
                  </SubHeaderTitle>
                  {window.enableDualNumExp && (secondMtn || isSecondNumber || hasSecondNumberEligible) && (
                    <SubHeaderTitle isPearlFlow={selectedDeviceDetail?.[0]?.pearlTrialFlow}>
                      {<Title primitive='h2'>{common.getItemValue(pageItems, 'secondNumberHeader')}</Title>}
                      {
                        <Title primitive='p'>
                          <span data-cs-mask>
                            {secondMdn ? secondMdn.displayMtn : !secondMtn && isSecondNumber && displayMtn}
                            {secondMtn && (
                              <TextLinkWrapper>
                                <TextLink
                                  type='standAlone'
                                  data-testid='manageTextTestId'
                                  onClick={() => this.setState({ index: 1 })}
                                >
                                  {common.getItemValue(pageItems, 'manageText')}
                                </TextLink>
                              </TextLinkWrapper>
                            )}
                          </span>
                        </Title>
                      }
                      {!secondMtn && !isSecondNumber && hasSecondNumberEligible && (
                        <Title primitive='p'>
                          <span data-cs-mask>
                            {common.getItemValue(pageItems, "getSeconNumberSubHeaderText")}
                            <TextLinkWrapper>
                              <TextLink
                                type="standAlone"
                                size='large'
                                data-track={common.getItemValue(pageItems, 'getSecondNumberLinkText')}
                                ariaLabel={common.getItemValue(pageItems, 'getSecondNumberLinkText')}
                                onClick={() => this.getOnClickInfo(pageContent, 'getSecondNumberAction')?.onclick()
                                }
                                data-testid="getASecondNumberLink"
                              >{common.getItemValue(pageItems, 'getSecondNumberLinkText')}</TextLink>
                            </TextLinkWrapper>
                          </span>
                        </Title>
                      )}
                    </SubHeaderTitle>
                  )}
                </ContentContainer>
              </DeviceModelDetails>
            </DeviceModelContainerWrapper>
            {
              !selectedDeviceDetail?.[0]?.pearlTrialFlow &&
              <Wrapper>
                {device5GE && (
                  <FiveGImg>
                    <img src='https://ss7.vzw.com/is/image/VerizonWireless/5g-logo-d-072822?$pngalpha$&scl=2' />
                  </FiveGImg>
                )}
              </Wrapper>
            }
          </DeviceModelContainer>
          <div colSizes={{ mobile: 1 }}>
            <ContentContainer>
              <SubHeaderTitle isPearlFlow={selectedDeviceDetail?.[0]?.pearlTrialFlow}>{esimCapable && <Title primitive='h2'>Device model</Title>}</SubHeaderTitle>
            </ContentContainer>
          </div>
          {!selectedDeviceDetail?.[0]?.pearlTrialFlow && SIMIDFun()}

          {simId && (
            <div colSizes={{ mobile: 1 }}>
              <ContentContainer>
                <SubHeaderTitle simHeader={'simHeader'} isPearlFlow={selectedDeviceDetail?.[0]?.pearlTrialFlow}>
                  <Title primitive='h2'>{common.getItemValue(pageItems, 'simIdHeader')}</Title>
                  {
                    selectedDeviceDetail?.[0]?.pearlTrialFlow ?
                      <Title primitive='p'>
                        {' '}
                        <span className='contains-PII' data-cs-mask>
                          {simType}ID {eSimActive ? common.getItemValue(pageItems, 'eSIMText') : pSimActive ? "(Removable SIM card):" : ""} {eSimActive && ":"}
                        </span>
                        <br />
                        <span>{simId}</span>
                      </Title>
                      :
                      <Title primitive='p'>
                        {' '}
                        <span className='contains-PII' data-cs-mask>
                          {simType}ID{' '}
                          {eSimActive ? (
                            `${common.getItemValue(pageItems, 'eSIMText')}:${simId}`
                          ) : pSimActive ? (
                            <span>
                              (Removable SIM card):<Title primitive='p'>{simId}</Title>
                            </span>
                          ) : (
                            `:${simId}`
                          )}
                        </span>
                      </Title>
                  }
                </SubHeaderTitle>
              </ContentContainer>
            </div>
          )}
          {selectedDeviceDetail?.[0]?.pearlTrialFlow && <br />}
          {selectedDeviceDetail?.[0]?.pearlTrialFlow && SIMIDFun()}
        </DeviceInfoContainer>



        <DeviceInfoContainer2>
          {(!enablePersonalizedTile) && (<TileContainerWrapper>
            <div id='upgrade'>
              <TileContainer
                backgroundColor='#F6F6F6'
                padding='16px 24px 24px 24px'
                backgroundImage='none'
                id='tileContainer'
                width='100%'
                height='280px'
              >
                {paymentBalanceDetails(recommendedDeviceId ? common.getItemValue(pageItems, 'upgradeEligibilityOneclickSubtHeader') : common.getItemValue(pageItems, 'upgradeEligibilitySubtHeader'))}
                {upgradeButton()}
              </TileContainer>
            </div>
          </TileContainerWrapper>)}

          {(enablePersonalizedTile) && (<TileContainerWrapper>
            <div id='personalizedUpgrade'>
              <TileContainer
                backgroundColor='#F6F6F6'
                padding='16px 24px 24px 24px'
                backgroundImage='none'
                id='tileContainer'
                width='100%'
                height='280px'
              >
                <Row>
                  <Col xs={8}>
                    <Banner showBanner={selectedMtnRecommendedDevice?.[0]?.offerAmount || 'NO_PROMO'}>
                      <Body size="small" primitive="p" color="#fff" bold>Save ${selectedMtnRecommendedDevice?.[0]?.offerAmount}</Body>
                    </Banner>
                    {paymentBalanceDetails(`Based on your current device, we recommend the ${selectedMtnRecommendedDevice?.[0]?.productDisplayName}.`)}
                  </Col>
                  <Col xs={4}>
                    <ContentContainer right>
                      <ProductImg center='right'>
                        <img style={{ width: '100%' }} src={selectedMtnRecommendedDevice?.[0]?.imageUrl} />
                      </ProductImg>
                    </ContentContainer>
                  </Col>
                </Row>
                {upgradeButton()}
              </TileContainer>
            </div>
          </TileContainerWrapper>)}

          {planUsageInfo?.planName && (
            <TileContainerWrapper>
              <TileContainer
                backgroundColor='#F6F6F6'
                padding='16px 24px 24px 24px'
                backgroundImage='none'
                id='tileContainer'
                width='100%'
                height='280px'
              >
                <MyPlanTitle>
                  <Title primitive='h2'>{common.getItemValue(pageItems, 'myPlanCardHeader')}</Title>
                </MyPlanTitle>
                <MyPlanSubTitle>
                  <Title primitive='p'>{planUsageInfo.planName}</Title>
                </MyPlanSubTitle>
                <MyPlanContent>
                  {accountPlan?.dataUsed && (
                    <Title primitive='p'>{`${accountPlan?.dataUsed} ${accountPlan?.unlimitedDataPlan
                      ? `${accountPlan?.unitOfMeasureCDForData} / ${common.getItemValue(pageItems, 'accountPlanUnlimitedDataText')}`
                      : `${accountPlan?.unitOfMeasureCDForData} / ${accountPlan?.dataPlan}`
                      }`}</Title>
                  )}
                  {accountPlan?.messageUsed && accountPlan?.messagePlan && (
                    <Title primitive='p'>{`${accountPlan?.messageUsed} ${accountPlan?.unlimitedMessagePlan
                      ? `/ ${common.getItemValue(pageItems, 'accountPlanUnlimitedMessageText')}`
                      : `/ ${accountPlan?.messagePlan}`
                      }`}</Title>
                  )}
                  {accountPlan?.minutesUsed && (
                    <Title primitive='p'>{`${accountPlan?.minutesUsed} ${accountPlan?.unlimitedDataPlan
                      ? `/ ${common.getItemValue(pageItems, 'accountPlanUnlimitedMinutesText')}`
                      : `/ ${accountPlan?.dataPlan}`
                      }`}</Title>
                  )}
                </MyPlanContent>
                <MyPlanDeviceCtaContainer>
                  {selectedDeviceDetail?.[0]?.pearlTrialFlow ?
                    (
                      <Button
                        use='primary'
                        data-track={`L1|P2||||||PlanUsage Tile|${common.getItemValue(pageItems, 'pearlTrialPlanBtn')}`}
                        data-testid='pearlTrialPlanBtn'
                        onClick={() => {
                          let actionKey = pageContent && common.getActionKey(pageItems, `pearlTrialPlanBtn`);
                          const actionKeyValue = pageContent && common.getActionByKey(pageActions, actionKey);
                          const actionValue = actionKeyValue && actionKeyValue.actionValue;
                          window.location.href = `${actionValue}`;
                        }}
                      >
                        {common.getItemValue(pageItems, 'pearlTrialPlanBtn')}
                      </Button>
                    ) : (!isSecondNumber ? (
                      <Button
                        use='primary'
                        data-track={`L1|P1||||||PlanUsage Tile|${common.getItemValue(pageItems, 'managePlanBtn')}`}
                        data-testid='managePlanBtnTestId'
                        onClick={() => {
                          let actionKey = pageContent && common.getActionKey(pageItems, `managePlanBtn`);
                          let click_info = this.getOnClickInfo(pageContent, actionKey);
                          click_info?.onclick();
                        }}
                      >
                        {common.getItemValue(pageItems, 'managePlanBtn')}
                      </Button>
                    ) : (
                      <Button
                        use='primary'
                        data-testid='upgradePlanBtnTestId'
                        data-track={`L1|P2||||||PlanUsage Tile|${common.getItemValue(pageItems, 'upgradePlanBtn')}`}
                        onClick={() => {
                          this.handleModalChange(true);
                        }}
                      >
                        {common.getItemValue(pageItems, 'upgradePlanBtn')}
                      </Button>
                    ))}
                  <Button
                    use='secondary'
                    data-testid='reviewUsageBtnTestId'
                    data-track={`L1|P1||||||PlanUsage Tile|${common.getItemValue(pageItems, 'reviewUsageBtn')}`}
                    onClick={() => {
                      if (common.getChannelId() === 'VZW-MFA') {
                        if (this.props?.deviceDetailInfoSection?.usageNewLandingFlag) {
                          const action = common.getActionByKey(pageActions, 'reviewUsageActionNew');
                          const UsageNewactionValue = action && action.actionValue;
                          window.location.href = UsageNewactionValue || "https://www.verizon.com/digital/nsa/secure/ui/myusage/landing";

                        }
                        else {
                          const action = common.getActionByKey(pageActions, 'reviewUsageAction_native');
                          const actionValue = action && action.actionValue;
                          nsaRedirectToNativePage(actionValue, this.state.selectedMdn);
                        }
                      } else {
                        let actionKey = pageContent && common.getActionKey(pageItems, `reviewUsageBtn`);
                        let click_info = this.getOnClickInfo(pageContent, actionKey, this.state.selectedMdn);
                        window.location.href = click_info.actionValue;
                      }
                    }}
                  >
                    {selectedDeviceDetail?.[0]?.pearlTrialFlow ? common.getItemValue(pageItems, 'checkUsageBtn') : common.getItemValue(pageItems, 'reviewUsageBtn')}
                  </Button>
                </MyPlanDeviceCtaContainer>
              </TileContainer>
            </TileContainerWrapper>
          )}

          {deviceProtectionEnrolled == 'Y' ? (
            <TileContainerWrapperDark isDarkTile={false}>
              <TileContainer
                backgroundColor='#000'
                padding='16px 24px 24px 24px'
                backgroundImage='none'
                id='tileContainer'
                width='100%'
                height='280px'
              >
                <ProtectioTitle isDarkTile={false}>
                  <Title primitive='h2'>{common.getItemValue(pageItems, 'deviceProtectionHeaderText')}</Title>
                </ProtectioTitle>
                <ProtectioSubTitle isDarkTile={false}>
                  <Title primitive='p'>{common.getItemValue(pageItems, 'deviceProtectionSubHeaderText')}</Title>
                </ProtectioSubTitle>
                <DeviceCtaContainer isDarkTile={false}>
                  <Button
                    data-testid='manageDeviceProtectionTestId'
                    use='secondary'
                    data-track={`L1|P1||||||Device Protect Tile|${common.getItemValue(pageItems, 'manageDeviceProtection')}`}
                    onClick={() => {
                      let actionKey = pageContent && common.getActionKey(pageItems, `manageDeviceProtection`);
                      let productGroupID = selectedDeviceDetail?.[0]?.productGroupId;
                      const actionKeyValue = pageContent && common.getActionByKey(pageActions, actionKey);
                      let actionValue = actionKeyValue && actionKeyValue.actionValue;
                      actionValue = (productGroupID != "" && productGroupID != null) ? actionValue + productGroupID : actionValue;
                      window.location.href = `${actionValue}`;
                    }}
                  >
                    {common.getItemValue(pageItems, 'manageDeviceProtection')}
                  </Button>
                  {fileAClaim === 'Y' && (
                    <Button
                      data-testid='fileClaimbtnTestId'
                      use='secondary'
                      data-track={`L1|P1||||||Device Protect Tile|${common.getItemValue(pageItems, 'fileClaimbtn')}`}
                      onClick={() => {
                        let actionKey = pageContent && common.getActionKey(pageItems, 'fileClaimbtn');
                        let fileAClaimAction = this.getOnClickInfo(pageContent, actionKey);
                        window.location.href = fileAClaimAction.actionValue;
                      }}
                    >
                      {common.getItemValue(pageItems, 'fileClaimbtn')}
                    </Button>
                  )}
                </DeviceCtaContainer>
              </TileContainer>
            </TileContainerWrapperDark>
          ) : !selectedDeviceDetail?.[0]?.pearlTrialFlow ? (
            <TileContainerWrapperDark isDarkTile={true}>
              <TileContainer
                backgroundColor='#000'
                padding='16px 24px 24px 24px'
                backgroundImage='none'
                id='tileContainer'
                width='100%'
                height='280px'
              >
                <ProtectioTitle isDarkTile={true}>
                  <Title primitive='h2'>{common.getItemValue(pageItems, 'cardHeaderText')}</Title>
                </ProtectioTitle>
                <ProtectioSubTitle isDarkTile={true}>
                  <Title primitive='p'>
                    {openEnrollmentPeriod == 'N' && deviceProtectionEnrolled == 'N' ? (
                      <span dangerouslySetInnerHTML={{ __html: common.getItemValue(pageItems, 'deviceProtectionNotEligibleSubHeaderText') }}></span>
                    ) : (
                      <span dangerouslySetInnerHTML={{ __html: common.getItemValue(pageItems, 'cardSubHeaderText') }}></span>
                    )}
                  </Title>
                </ProtectioSubTitle>
                <DeviceCtaContainer isDarkTile={true}>
                  {openEnrollmentPeriod == 'N' && deviceProtectionEnrolled == 'N' ? (
                    <Button
                      data-testid='learnMore-testid'
                      use='primary'
                      data-track={`L1|P1||||||Device Protect Tile|${common.getItemValue(pageItems, 'learnMore')}`}
                      onClick={() => {
                        let actionKey = pageContent && common.getActionKey(pageItems, `learnMore`);
                        let click_info = this.getOnClickInfo(pageContent, actionKey);
                        click_info?.onclick();
                      }}
                    >
                      {common.getItemValue(pageItems, 'learnMore')}
                    </Button>
                  ) : (
                    <Button
                      data-testid='enrollBtn-testid'
                      use='primary'
                      data-track={`L1|P1||||||Device Protect Tile|${common.getItemValue(pageItems, 'enrollBtn')}`}
                      onClick={() => {
                        let actionKey = pageContent && common.getActionKey(pageItems, `enrollBtn`);
                        let click_info = this.getOnClickInfo(pageContent, actionKey);
                        click_info?.onclick();
                      }}
                    >
                      {common.getItemValue(pageItems, 'enrollBtn')}
                    </Button>
                  )}
                </DeviceCtaContainer>
              </TileContainer>
            </TileContainerWrapperDark>
          ) : ""}
        </DeviceInfoContainer2>
      </>
    );
  };

  replaceParamValue = (urlParams, paramName, newValue) => {
    const regex = new RegExp(`${paramName}=[^&]+`, 'g');
    return urlParams.replace(regex, `${paramName}=${newValue}`);
  }

  hashParamValue = () => {
    let hashDetails = window.location?.hash?.substring(1);
    let splitedValue = hashDetails?.split('?');
    let result = { model: '', esimCapable: '' };
    if (splitedValue?.length >= 2) {
      result = splitedValue && splitedValue[1].split('&').reduce(function (res, item) {
        let parts = item?.split('=');
        res[parts[0]] = parts[1];
        return res;
      }, {});
    }
    return result;
  }

  render() {
    let pageContent;
    let newDeviceManagementArray = [];
    let isMvm = common.getChannelId() === 'VZW-MFA';
    const { selectedMdn } = this.state;

    if (this.props.deviceDetailInfoSection && this.props.deviceDetailInfoSection.sections) {
      pageContent = common.getContentFromSection(this.props.deviceDetailInfoSection, 'devicesLandingMainSection');
      pageContent = pageContent.sections[0];
    }
    let pageItems = pageContent && pageContent.contents && pageContent.contents[0].items;
    const pageActions = pageContent && pageContent.actions;
    let deviceList = (pageContent && pageContent.data) || [];

    let allDevices = [];

    if (deviceList) {
      deviceList.forEach((singleDevice, index) => {
        if (!singleDevice?.isSecondNumber) {
          allDevices.push(singleDevice);
        }
      });
    }

    if (isMvm) {
      allDevices = allDevices?.filter((value) => !value?.networkExtender);
    }
    let selectedDeviceDetail = (deviceList && deviceList.filter((singleDevice) => singleDevice.mtn == this.state.selectedMdn)) || [];
    let { pendingLineChange = false, paymentInfo = {}, secondMtn } = selectedDeviceDetail.length && selectedDeviceDetail[0];

    let selectedDualNum = (deviceList && deviceList.filter((singleDevice) => singleDevice.mtn == secondMtn)) || [];

    let paymentBalanceInfo = common.getItemValue(pageItems, 'PaymentBalanceHeader');

    if (paymentInfo?.pendingNumberOfInstallments && paymentBalanceInfo !== '') {
      paymentBalanceInfo = paymentBalanceInfo?.replace('##Months##', paymentInfo?.pendingNumberOfInstallments);
    }

    if (paymentInfo?.remainingBalance && paymentBalanceInfo !== '') {
      paymentBalanceInfo = paymentBalanceInfo?.replace('##balance##', `$${paymentInfo?.remainingBalance}`);
    }

    if (selectedDeviceDetail?.length && selectedDeviceDetail[0]) {
      if (common.getChannelId() === 'VZW-MFA') {
        pageActions?.map((item) => {
          if (item?.actionKey === 'activateOrGetSimAction' || item?.actionKey === 'changeOrReplaceDeviceAction') {
            let urlParams = item?.actionValue;
            const paramMtnName = 'mtn';
            let finalActionValue = urlParams;

            if (urlParams.includes(paramMtnName)) {
              urlParams = this.replaceParamValue(urlParams, paramMtnName, selectedMdn);
              finalActionValue = urlParams;
            } else {
              const queryParams = {
                mtn: selectedMdn,
              };
              const queryString = Object.keys(queryParams).map(key => `${key}=${queryParams[key]}`).join('&');
              finalActionValue = `${urlParams}?${queryString}`
            }
            item.actionValue = finalActionValue;
          }
        });
      }
    }

    let deviceManagementArray = {};
    let preferencesArray = {};
    let troubleshootAndSupportArray = {};
    let deviceData = {};
    if (selectedDeviceDetail?.length && selectedDualNum.length && this.state.index && secondMtn !== '') {
      deviceManagementArray = { ...selectedDualNum[0]?.deviceManagement };
      console.log('deviceManagementArray', deviceManagementArray);
      preferencesArray = { ...selectedDualNum[0]?.preferences };
      troubleshootAndSupportArray = { ...selectedDualNum[0]?.troubleshootAndSupport };
      deviceData = { ...selectedDualNum[0] };
    } else {
      deviceManagementArray = { ...selectedDeviceDetail[0]?.deviceManagement };
      preferencesArray = { ...selectedDeviceDetail[0]?.preferences };
      troubleshootAndSupportArray = { ...selectedDeviceDetail[0]?.troubleshootAndSupport };
      deviceData = { ...selectedDeviceDetail[0] };
    }

    if (!this.props.isFetching) {
      return (
        <ErrorBoundary
          id='devicesDetail'
          data-testid='errorBoundaryTestId'
          errorcode={this.props.statusCode}
          title={{ text: this.props.errorMessage && this.props.errorMessage != "" ? this.props.errorMessage : undefined, size: 'small', width: '100%' }}
          message={{ text: this.props.errorDesc, size: 'small', width: '100%' }}
          action={{ name: this.props.actionName, value: () => this.handleClickForError(this.props.actionType, this.props.actionValue) }}
        >
          <Fragment>
            <div data-testid='DeviceDetailTestId' id='deviceDetailsHome'></div>
            {(this.state.showSIMProtectionNotification) &&
              <Notification
                type="warning"
                title={common.getItemValue(pageItems, "SIMProtectionNotification").replace('<unfreeze timestamp>', this.state.SIMProtectionTimeStamp)}
                subtitle={common.getItemValue(pageItems, "SIMProtectionNotificationDesc").replace('<thaw threshold>', this.state.SIMProtectionDuration)}
                fullBleed
                inlineTreatment={false}
                onCloseButtonClick={() => this.buttonCloseClick()}
              />
            }
            {pendingLineChange && (
              <Notification
                type='warning'
                title={common.getItemValue(pageItems, 'pendingLineChangeNotificationTitle')}
                subtitle={common.getItemValue(pageItems, 'pendingLineChangeNotificationSubTitle')}
                fullBleed={true}
                inlineTreatment={false}
                disableFocus={false}
                layout='vertical'
                buttonData={[
                  {
                    children: common.getItemValue(pageItems, 'reviewDetail'),
                    'data-testid': 'reviewDetailLinkTestId',
                    onClick: () => this.handleReviewDetailLink(),
                  },
                ]}
              />
            )}
            <TitleContainer className='grid main'>
              <Title size='large' primitive='h1'>
                {selectedDeviceDetail?.[0]?.pearlTrialFlow ? common.getItemValue(pageItems, 'pearlHeaderText') : common.getItemValue(pageItems, 'headerText')}
              </Title>
            </TitleContainer>
            {
              !selectedDeviceDetail?.[0]?.pearlTrialFlow &&
              <DropdownSelectContainer className='main'>
                {/* <DropdownSelect
                  id='deviceListSelectBox'
                  label={common.getItemValue(pageItems, 'deviceListText')}
                  error={false}
                  disabled={false}
                  readOnly={false}
                  inlineLabel={false}
                  value={this.state.selectedMdn}
                  data-track='my select generic name'
                  data-testid='deviceListTestId'
                  onChange={(e) => {
                    this.handleSelectBoxChange(e);
                  }}
                >
                  {allDevices.length > 0 &&
                    allDevices.map((singleDevice, index) => (
                      <option
                        key={`${singleDevice?.networkExtender ? singleDevice?.deviceId : singleDevice.mtn}`}
                        value={`${singleDevice?.networkExtender ? singleDevice?.deviceId : singleDevice.mtn}`}
                        className=''
                        data-cs-mask
                      >{`${singleDevice.nickName} ${singleDevice?.networkExtender ? singleDevice?.deviceId : singleDevice.displayMtn}`}</option>
                    ))}
                </DropdownSelect> */}
                <DropDownSelector>
                  <DropDownSubSelector>
                    <DropDownLabel for="deviceListSelectBox"><p>{common.getItemValue(pageItems, 'deviceListText')}</p></DropDownLabel>
                    <DropdownSelectElement>
                      <select
                        id='deviceListSelectBox'
                        aria-label="Device List Optional"
                        data-track='my select generic name'
                        data-testid='deviceListTestId'
                        value={this.state.selectedMdn}
                        onChange={(e) => {
                          this.handleSelectBoxChange(e);
                        }}>
                        {allDevices.length > 0 &&
                          allDevices.map((singleDevice, index) => (
                            <option
                              key={`${singleDevice?.networkExtender ? singleDevice?.deviceId : singleDevice.mtn}`}
                              value={`${singleDevice?.networkExtender ? singleDevice?.deviceId : singleDevice.mtn}`}
                              className=''
                              data-cs-mask
                              role="option"
                              aria-label={`${singleDevice.nickName} ${singleDevice?.networkExtender ? singleDevice?.deviceId : singleDevice.displayMtn} item  ${index + 1} of ${allDevices.length}`}
                            >{`${singleDevice.nickName} ${singleDevice?.networkExtender ? singleDevice?.deviceId : singleDevice.displayMtn}`}</option>
                          ))}
                      </select>
                      <DownArrow><Icon name='down-caret' size='medium' /></DownArrow>
                    </DropdownSelectElement>
                  </DropDownSubSelector>
                </DropDownSelector>
                <TextLinkContainer>
                  <TextLink
                    type='standAlone'
                    data-testid='showAllDeviceTestId'
                    onClick={() => {
                      this.handleShowAllDevices();
                    }}
                  >
                    {common.getItemValue(pageItems, 'showAllDeviceTextlink')}
                  </TextLink>
                </TextLinkContainer>
              </DropdownSelectContainer>
            }
            {selectedDeviceDetail.length !== 0 &&
              ((selectedDeviceDetail[0]?.secondMtn && selectedDeviceDetail[0]?.secondMtn !== '') || selectedDeviceDetail[0]?.isSecondNumber) && (
                <Tabs
                  data-testid='tablist'
                  orientation='horizontal'
                  indicatorPosition='bottom'
                  fillContainer={true}
                  onTabChange={(event, tabindex) => {
                    this.setState({ index: tabindex });
                    console.log('event-tabindex', event, tabindex);
                  }}
                  selectedIndex={this.state.index}
                >
                  <Tab label='First number'>{this.displayNumber(selectedDeviceDetail[0]?.mtn)}</Tab>
                  <Tab label='Second number'>{this.displayNumber(selectedDualNum[0]?.mtn)}</Tab>
                </Tabs>
              )}
            {selectedDeviceDetail.length !== 0 && selectedDualNum.length == 0 && (
              <Wrapper>{this.displayNumber(selectedDeviceDetail[0]?.mtn)}</Wrapper>
            )}

            <ListGroupContainer className='grid main'>
              <Grid
                bleed="full"
                rowGutter="10px"
              >
                <Row>
                  <Col
                    colSizes={{
                      mobile: 4,
                      desktop: 12,
                      tablet: 12,
                    }}
                  >
                    <Title size='small' primitive='h2'>
                      {common.getItemValue(pageItems, 'deviceManagementText')}
                    </Title>
                  </Col>
                  {this.handleDeviceMangement(deviceManagementArray)}
                </Row>

                <RowContent>
                  <Col
                    colSizes={{
                      mobile: 4,
                      desktop: 12,
                      tablet: 12,
                    }}
                  >
                    <Title size='small' primitive='h2'>
                      {common.getItemValue(pageItems, 'preferencesText')}
                    </Title>
                  </Col>
                  {this.handlePreferences(preferencesArray)}
                </RowContent>

                <RowContent>
                  <Col
                    colSizes={{
                      mobile: 4,
                      desktop: 12,
                      tablet: 12,
                    }}
                  >
                    <Title size='small' primitive='h2'>
                      {common.getItemValue(pageItems, 'troubleshootAndSupportText')}
                    </Title>
                  </Col>
                  {this.handleTroubleshootAndSupport(troubleshootAndSupportArray)}
                </RowContent>
              </Grid>
            </ListGroupContainer>
            {this.props.showPinAndPukModal && <PinUnblockModal selectedDeviceForPinPuk={deviceData} />}
            {this.state.showModal && (
              <UpgradePlanModal
                showModal={this.state.showModal}
                handleModalChange={this.handleModalChange}
                handleCancel={this.handleCancel}
                deviceDetailInfoSection={this.props.deviceDetailInfoSection}
              />
            )}
            {this.state?.showSIMProtectionModal && (
              <UpgradeSIMProtectionModal
                showModal={this.state.showSIMProtectionModal}
                handleModalChange={this.handleSIMProtectionModalChange}
                handleRedirect={this.handleSIMProtectionModalRedirect}
                landingPageInfoSection={this.props?.deviceDetailInfoSection}
                SIMProtectionDuration={this.state.SIMProtectionDuration}
              />
            )}

            {this.state.changeOrReplaceModal && (
              <ChangeOrReplaceModal
                handleModalChange={this.handleChangeOrReplaceModalChange}
                handleCancel={this.handleChangeOrReplaceModalCancel}
                isChangeOrReplaceModal={this.state.changeOrReplaceModal}
                deviceDetailInfoSection={this.props.deviceDetailInfoSection}
              />
            )}

          </Fragment>
        </ErrorBoundary>
      );
    } else {
      const loadingImg = <Loader />;
      return <div data-testid='DeviceDetailTestId' id='deviceDetailSection'>{loadingImg}</div>;
    }
  }
}

const mapStateToProps = (store) => {
  return {
    isFetching: store.Detail.isFetching,
    statusCode: store.Detail.statusCode,
    statusMessage: store.Detail.statusMessage,
    errorMessage: store.Detail.errorMessage,
    errorObj: store.Detail.errorObj,
    errorDesc: store.Detail.errorDesc,
    actionName: store.Detail.actionName,
    actionValue: store.Detail.actionValue,
    actionType: store.Detail.actionType,
    selectedDevice: store.Home.selectedDevice,
    productList: store.Detail.productList,
    recommendedDevice: store.Detail.recommendedDevice,
    recommendedTiles: store.Detail.recommendedTiles,
    isOpenNickNameModal: store.Detail.isOpenNickNameModal,
    showPinAndPukModal: store.Detail.showPinAndPukModal,
    oneClickEligiblemtnList: store.Detail.oneClickEligiblemtnList,
    deviceDetailInfoSection:
      store.Detail.sectionContentMetaData && store.Detail.sectionContentMetaData.body
        ? store.Detail.sectionContentMetaData.body
        : store.Detail.sectionContentMetaData,
    deviceHomeInfoSection: store?.Detail?.sectionContentMetaData,
  };
};

const mapDispatchToProps = (dispatch) => ({
  actions: bindActionCreators(deviceDetailActions, dispatch),
});

export default connect(mapStateToProps, mapDispatchToProps)(DeviceDetail);
