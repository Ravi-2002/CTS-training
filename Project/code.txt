test('handleClick function should be triggered when clicking a preference link', async () => {
    let mockOnClick = jest.fn();
    let mockGetOnClickInfo = jest.fn(() => ({ onclick: mockOnClick }));

    common.getChannelId.mockReturnValue('VZW-MFA');
    common.getContentFromSection.mockReturnValue({
        contents: [{ items: {} }],
        data: [{ mtn: '8049557864', preferences: { shareNameIDBtn: true }, shareNameIDBtnThrottle: false }],
    });
    common.getItemValue.mockImplementation((_, key) => key);
    common.getActionKey.mockReturnValue('mockActionKey');

    render(<DeviceDetail selectedDevice={{ preferences: { shareNameIDBtn: true } }} />);

    const button = screen.getByTestId('preference-shareNameIDBtn'); // Ensure test ID matches
    expect(button).toBeInTheDocument();

    fireEvent.click(button);

    await waitFor(() => {
        expect(common.getOnClickInfo).toHaveBeenCalledWith(expect.anything(), 'nsa_mockActionKey');
        expect(mockOnClick).toHaveBeenCalled();
    });
});

test('handleClick should use native suffix for MVM users', async () => {
    let mockOnClick = jest.fn();
    let mockGetOnClickInfo = jest.fn(() => ({ onclick: mockOnClick }));

    common.getChannelId.mockReturnValue('MVM'); // Simulating MVM user
    render(<DeviceDetail selectedDevice={{ preferences: { shareNameIDBtn: true } }} />);

    const button = screen.getByTestId('preference-shareNameIDBtn'); // Ensure test ID matches
    fireEvent.click(button);

    await waitFor(() => {
        expect(common.getOnClickInfo).toHaveBeenCalledWith(expect.anything(), 'mockActionKey_native');
        expect(mockOnClick).toHaveBeenCalled();
    });
});