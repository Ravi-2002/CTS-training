import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import BlockCallsList from '../callsandmessages';
import '@testing-library/jest-dom';

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn()
}));

jest.mock('../../../../shared/utilities/native', () => ({
  nativeSetTitle: jest.fn()
}));

jest.mock('../../../../shared/utilities/util', () => ({
  getItemValue: jest.fn(() => 'Mocked Title'),
  mtnFormat: jest.fn((mtn) => `(${mtn})`)
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();

describe('BlockCallsList', () => {
  let store;
  let history;

  const setup = (mockState) => {
    useDispatch.mockReturnValue(mockDispatch);
    useSelector.mockImplementation(cb => cb({ Detail: mockState }));

    history = createMemoryHistory();
    store = mockStore({});
    localStorage.setItem('mdn', '1234567890');

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders with default blocked numbers', () => {
    setup({
      blockedNumbers: [{ phoneNumber: '1231231234' }],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false,
      callsMessages: {
        aemResponse: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '7701234567'
                  }
                }
              ]
            }
          ]
        }
      }
    });

    expect(screen.getByText('Mocked Title')).toBeInTheDocument();
    expect(screen.getByText('(7701234567)')).toBeInTheDocument();
    expect(screen.getByText('1231231234')).toBeInTheDocument();
  });

  it('uses addBlockCallMsg list if available', () => {
    setup({
      blockedNumbers: [],
      addBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '9999999999' }]
      },
      deleteBlockCallMsg: {},
      isFetching: false,
      callsMessages: {
        aemResponse: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '1111111111'
                  }
                }
              ]
            }
          ]
        }
      }
    });

    expect(screen.getByText('9999999999')).toBeInTheDocument();
  });

  it('uses deleteBlockCallMsg list if available', () => {
    setup({
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '5555555555' }]
      },
      isFetching: false,
      callsMessages: {
        aemResponse: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '2222222222'
                  }
                }
              ]
            }
          ]
        }
      }
    });

    expect(screen.getByText('5555555555')).toBeInTheDocument();
  });

  it('disables Add button when 5 numbers blocked', () => {
    setup({
      blockedNumbers: [
        { phoneNumber: '1' }, { phoneNumber: '2' },
        { phoneNumber: '3' }, { phoneNumber: '4' },
        { phoneNumber: '5' }
      ],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false,
      callsMessages: {
        aemResponse: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '3333333333'
                  }
                }
              ]
            }
          ]
        }
      }
    });

    expect(screen.getByRole('button', { name: /Add a number/i })).toBeDisabled();
  });

  it('navigates to view limitations page', () => {
    setup({
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false,
      callsMessages: {
        aemResponse: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '4444444444'
                  }
                }
              ]
            }
          ]
        }
      }
    });

    fireEvent.click(screen.getByText(/View Limitations/i));
    expect(history.location.pathname).toBe('/viewlimitation');
  });

  it('navigates to input page on Add button click', () => {
    setup({
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false,
      callsMessages: {
        aemResponse: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '5555555555'
                  }
                }
              ]
            }
          ]
        }
      }
    });

    fireEvent.click(screen.getByRole('button', { name: /Add a number/i }));
    expect(history.location.pathname).toBe('/callsandmessages');
  });

  it('dispatches delete action on X icon click', () => {
    setup({
      blockedNumbers: [{ phoneNumber: '8888888888' }],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false,
      callsMessages: {
        aemResponse: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '6666666666'
                  }
                }
              ]
            }
          ]
        }
      }
    });

    fireEvent.click(screen.getByRole('button', { name: /close/i }));
    expect(mockDispatch).toHaveBeenCalled();
  });
});