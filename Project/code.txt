import * as callsMessagesActions from '../../actions/callsMessagesActions';
import configureStore from '../../../../../shared/store/configureStore';
import rootReducer from '../../../reducers';
import { getHttpClientRequest, postHttpClientRequest } from '../../../../../shared/services/httpClient';

jest.mock('../../../../../shared/services/httpClient', () => ({
  ...jest.requireActual('../../../../../shared/services/httpClient'),
  getHttpClientRequest: jest.fn(),
  postHttpClientRequest: jest.fn()
}));

const store = configureStore(rootReducer);

const successResponse = {
  status: 200,
  data: {
    responseInfo: {
      responseCode: '00',
      responseMessage: 'SUCCESS'
    },
    body: {
      blockedPhoneNumbers: ['12345'],
      expiredBlockedPhoneNumbers: ['54321']
    }
  }
};

const failResponse = {
  status: 200,
  data: {
    responseInfo: {
      responseCode: '01',
      responseMessage: 'FAIL'
    },
    body: {}
  }
};

const errorResponse = {
  body: { message: 'Error occurred' }
};

describe('callsMessagesActions', () => {

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('getCallsMessages success', async () => {
    getHttpClientRequest.mockResolvedValueOnce(successResponse);

    await store.dispatch(callsMessagesActions.getCallsMessages());

    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test('getCallsMessages fail responseCode', async () => {
    getHttpClientRequest.mockResolvedValueOnce(failResponse);

    await store.dispatch(callsMessagesActions.getCallsMessages());

    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test('getCallsMessages error', async () => {
    getHttpClientRequest.mockRejectedValueOnce(errorResponse);

    await store.dispatch(callsMessagesActions.getCallsMessages());

    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test('postaddBlockCallMsg success', async () => {
    postHttpClientRequest.mockResolvedValueOnce(successResponse);

    await store.dispatch(callsMessagesActions.postaddBlockCallMsg({ phone: '99999' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('postaddBlockCallMsg fail responseCode', async () => {
    postHttpClientRequest.mockResolvedValueOnce(failResponse);

    await store.dispatch(callsMessagesActions.postaddBlockCallMsg({ phone: '99999' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('postaddBlockCallMsg error', async () => {
    postHttpClientRequest.mockRejectedValueOnce(errorResponse);

    await store.dispatch(callsMessagesActions.postaddBlockCallMsg({ phone: '99999' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('postDeleteBlockCallMsg success', async () => {
    postHttpClientRequest.mockResolvedValueOnce(successResponse);

    await store.dispatch(callsMessagesActions.postDeleteBlockCallMsg({ phone: '88888' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('postDeleteBlockCallMsg fail responseCode', async () => {
    postHttpClientRequest.mockResolvedValueOnce(failResponse);

    await store.dispatch(callsMessagesActions.postDeleteBlockCallMsg({ phone: '88888' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('postDeleteBlockCallMsg error', async () => {
    postHttpClientRequest.mockRejectedValueOnce(errorResponse);

    await store.dispatch(callsMessagesActions.postDeleteBlockCallMsg({ phone: '88888' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  // Action creators
  test('getCallsMessagesBegin returns correct type', () => {
    expect(callsMessagesActions.getCallsMessagesBegin()).toEqual({ type: 'CallsMessages/GET_CALLS_MESSAGES_BEGIN' });
  });

  test('getCallsMessagesSuccess returns correct payload', () => {
    const result = callsMessagesActions.getCallsMessagesSuccess(successResponse.data);
    expect(result.type).toBe('CallsMessages/GET_CALLS_MESSAGES_SUCCESS');
    expect(result.blockedNumbers).toEqual(['12345']);
    expect(result.expiredBlockNumbers).toEqual(['54321']);
  });

  test('getCallsMessagesError returns correct payload', () => {
    expect(callsMessagesActions.getCallsMessagesError(errorResponse)).toEqual({
      type: 'CallsMessages/GET_CALLS_MESSAGES_FAIL',
      payloadGetCMError: errorResponse.body
    });
  });

  test('postaddBlockCallMsgSuccess returns correct payload', () => {
    expect(callsMessagesActions.postaddBlockCallMsgSuccess(successResponse.data)).toEqual({
      type: 'CallsMessages/POST_ADD_CALL_MSG_SUCCESS',
      payloadAddCallMsg: successResponse.data.body
    });
  });

  test('postaddBlockCallMsgError returns correct payload', () => {
    expect(callsMessagesActions.postaddBlockCallMsgError(errorResponse)).toEqual({
      type: 'CallsMessages/POST_ADD_CALL_MSG_FAIL',
      payloadAddCallMsgError: errorResponse.body
    });
  });

  test('postDeleteBlockCallMsgSuccess returns correct payload', () => {
    expect(callsMessagesActions.postDeleteBlockCallMsgSuccess(successResponse.data)).toEqual({
      type: 'CallsMessages/POST_DELETE_CALL_MSG_SUCCESS',
      payloadDeleteCallMsg: successResponse.data.body
    });
  });

  test('postDeleteBlockCallMsgError returns correct payload', () => {
    expect(callsMessagesActions.postDeleteBlockCallMsgError(errorResponse)).toEqual({
      type: 'CallsMessages/POST_DELETE_CALL_MSG_FAIL',
      payloadDeleteCallMsgError: errorResponse.body
    });
  });
});