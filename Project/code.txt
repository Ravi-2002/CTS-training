import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import BlockCallsList from '../BlockCallsList';
import { useSelector, useDispatch } from 'react-redux';
import { postDeleteBlockCallMsg, getCallsMessages } from '../../actions/fetchCallsMessages';
import * as util from '../../../../../shared/utilities/util';

jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('../../actions/fetchCallsMessages', () => ({
  getCallsMessages: jest.fn(() => ({ type: 'MOCK_GET_CALLS_MESSAGES' })),
  postDeleteBlockCallMsg: jest.fn(),
}));

jest.mock('../../../../../shared/utilities/util', () => ({
  __esModule: true,
  default: {
    mtnFormat: jest.fn(() => '123-456-7890'),
    getItemValue: jest.fn(() => 'Block Calls and Messages Title'),
    getContentFromSection: jest.fn(() => ({
      sections: [
        {
          contents: [
            {
              items: [{ title: 'callsandMessageTitle' }],
            },
          ],
        },
      ],
    })),
  },
  nativeSetTitle: jest.fn(),
}));

describe('BlockCallsList', () => {
  const dispatch = jest.fn();

  const getMockHistory = () => ({
    push: jest.fn(),
    location: { pathname: '/' },
  });

  const renderComponent = (stateOverrides = {}) => {
    useDispatch.mockReturnValue(dispatch);
    useSelector.mockImplementation((selectorFn) =>
      selectorFn({
        Detail: {
          blockedNumbers: stateOverrides.blockedNumbers || [
            { phoneNumber: '1111111111' },
            { phoneNumber: '2222222222' },
          ],
          addBlockCallMsg: stateOverrides.addBlockCallMsg || null,
          deleteBlockCallMsg: stateOverrides.deleteBlockCallMsg || null,
          isFetching: stateOverrides.isFetching || false,
          callsMessages: {
            aemResponse: {
              sections: [
                {
                  sections: [
                    {
                      data: { mtn: '9876543210' },
                    },
                  ],
                },
              ],
            },
          },
        },
      })
    );

    localStorage.setItem('mdn', '9876543210');

    const history = getMockHistory();

    render(<BlockCallsList history={history} />);
    return history;
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders loader when fetching', () => {
    renderComponent({ isFetching: true });
    expect(screen.getByRole('progressbar')).toBeInTheDocument();
  });

  it('renders title and formatted MDN', () => {
    renderComponent();
    expect(screen.getByText('Block Calls and Messages Title')).toBeInTheDocument();
    expect(screen.getByText('123-456-7890')).toBeInTheDocument();
  });

  it('renders blocked numbers', () => {
    renderComponent();
    expect(screen.getByText('1111111111')).toBeInTheDocument();
    expect(screen.getByText('2222222222')).toBeInTheDocument();
  });

  it('calls deleteBlockCallMsg on remove', () => {
    renderComponent();
    const removeButtons = screen.getAllByRole('button');
    fireEvent.click(removeButtons[0]);

    expect(postDeleteBlockCallMsg).toHaveBeenCalledWith(
      expect.objectContaining({
        mtn: '9876543210',
        blockNumber: '1111111111',
        oldPhoneNumber: '1111111111',
      })
    );
  });

  it('displays correct block count text', () => {
    renderComponent();
    expect(screen.getByText('You are blocking 2 of 5 numbers.')).toBeInTheDocument();
  });

  it('disables add button when list has 5 numbers', () => {
    const numbers = Array(5).fill({ phoneNumber: '9999999999' });
    renderComponent({ blockedNumbers: numbers });
    const addButton = screen.getByRole('button', { name: /add a number/i });
    expect(addButton).toBeDisabled();
  });

  it('navigates to add screen on add button click', () => {
    const history = renderComponent();
    const addButton = screen.getByRole('button', { name: /add a number/i });
    fireEvent.click(addButton);
    expect(history.push).toHaveBeenCalledWith('/callsandmessages', {
      allowInput: true,
      mtn: '9876543210',
    });
  });

  it('navigates to View Limitations screen', () => {
    const history = renderComponent();
    const link = screen.getByText('View Limitations');
    fireEvent.click(link);
    expect(history.push).toHaveBeenCalledWith('/viewlimitation');
  });

  it('uses blockedNumbers if addBlockCallMsg is null', () => {
    renderComponent({
      addBlockCallMsg: null,
      blockedNumbers: [{ phoneNumber: '9999999999' }],
    });
    expect(screen.getByText('9999999999')).toBeInTheDocument();
  });

  it('uses deleteBlockCallMsg if available', () => {
    renderComponent({
      deleteBlockCallMsg: { blockedPhoneNumbers: [{ phoneNumber: '8888888888' }] },
    });
    expect(screen.getByText('8888888888')).toBeInTheDocument();
  });
});