/**
 * @jest-environment jsdom
 */
import React from "react";
import { render, fireEvent, screen } from "@testing-library/react";
import SettingPreferences from "../SettingPreferences";

// Mock utils
jest.mock("@/helpers/utils", () => ({
  getItemValue: jest.fn((items, key) => `${key}_label`),
  getActionKey: jest.fn((items, key) => `action_${key}`),
  getOnClickInfo: jest.fn(() => ({ onclick: jest.fn(), actionHref: "/testHref" })),
  getOnClickInfoMobile: jest.fn(() => ({ onclick: jest.fn() })),
}));

// Mock channel util
jest.mock("@vz/next-util", () => ({
  getClientChannelId: jest.fn(),
}));

// Mock useSearchParams
jest.mock("next/navigation", () => ({
  useSearchParams: jest.fn(),
}));

import {
  getItemValue,
  getActionKey,
  getOnClickInfo,
  getOnClickInfoMobile,
} from "@/helpers/utils";
import { getClientChannelId } from "@vz/next-util";
import { useSearchParams } from "next/navigation";

describe("SettingPreferences Component", () => {
  let mockSetHref: jest.SpyInstance;

  beforeEach(() => {
    jest.clearAllMocks();

    (useSearchParams as jest.Mock).mockReturnValue({
      get: jest.fn().mockReturnValue("encrypted123"),
    });

    mockSetHref = jest.spyOn(window, "location", "get");
    Object.defineProperty(window, "location", {
      value: { href: "" },
      writable: true,
    });
  });

  const makeProps = (overrides = {}) => ({
    deviceDetails: {
      body: {
        pageAttributes: { manageBlocksMVAFFlag: "true" },
        sections: [
          {
            sections: [
              {
                data: [
                  {
                    encryptedMtnDES: "encrypted123",
                    mtn: "9876543210",
                    preferences: {
                      backupContentToVerizonCloudBtn: true,
                      blockCallsAndMessagesBtn: true,
                      blockSpecificServicesBtn: true,
                      otherPrefBtn: true,
                    },
                  },
                ],
                contents: [
                  {
                    items: {
                      settingPreferencesText: "Preferences",
                      settingsAndPreferencesSubHeaderText: "Subheader",
                    },
                  },
                ],
              },
            ],
          },
        ],
      },
    },
    ...overrides,
  });

  it("renders container and toggles accordion", () => {
    render(<SettingPreferences {...makeProps()} />);

    const accordionHeader = screen.getByLabelText("settingPreferencesText_label");
    expect(accordionHeader).toBeInTheDocument();

    // Accordion toggle
    fireEvent.click(accordionHeader);
    expect(
      screen.getByTestId("settings-preferences-accordion-detail")
    ).toBeInTheDocument();

    fireEvent.click(accordionHeader); // collapse again
  });

  it("renders listGroupCommonCode and preferences", () => {
    render(<SettingPreferences {...makeProps()} />);
    expect(screen.getByText("backupContentToVerizonCloudBtn_label")).toBeInTheDocument();
    expect(screen.getByText("blockCallsAndMessagesBtn_label")).toBeInTheDocument();
    expect(screen.getByText("blockSpecificServicesBtn_label")).toBeInTheDocument();
    expect(screen.getByText("otherPrefBtn_label")).toBeInTheDocument();
  });

  it("handles click for backupContentToVerizonCloudBtn (non-MVA channel)", () => {
    (getClientChannelId as jest.Mock).mockReturnValue("NON-MVA");

    render(<SettingPreferences {...makeProps()} />);

    fireEvent.click(screen.getByText("backupContentToVerizonCloudBtn_label"));

    expect(getOnClickInfo).toHaveBeenCalled();
  });

  it("handles click for blockCallsAndMessagesBtn (MVA + enableBlocksMVA)", () => {
    (getClientChannelId as jest.Mock).mockReturnValue("VZW-MFA");

    render(<SettingPreferences {...makeProps()} />);

    fireEvent.click(screen.getByText("blockCallsAndMessagesBtn_label"));

    expect(window.location.href).toContain("/testHrefencrypted123");
  });

  it("handles click for blockSpecificServicesBtn (MVA + enableBlocksMVA=false)", () => {
    (getClientChannelId as jest.Mock).mockReturnValue("VZW-MFA");

    const props = makeProps({
      deviceDetails: {
        body: {
          pageAttributes: { manageBlocksMVAFFlag: "false" },
          sections: [
            {
              sections: [
                {
                  data: [
                    {
                      encryptedMtnDES: "encrypted123",
                      mtn: "9876543210",
                      preferences: { blockSpecificServicesBtn: true },
                    },
                  ],
                  contents: [{ items: { settingPreferencesText: "Preferences" } }],
                },
              ],
            },
          ],
        },
      },
    });

    render(<SettingPreferences {...props} />);

    fireEvent.click(screen.getByText("blockSpecificServicesBtn_label"));

    expect(getOnClickInfoMobile).toHaveBeenCalled();
  });

  it("handles click for otherPrefBtn (non-special link)", () => {
    (getClientChannelId as jest.Mock).mockReturnValue("NON-MVA");

    render(<SettingPreferences {...makeProps()} />);

    fireEvent.click(screen.getByText("otherPrefBtn_label"));

    expect(getOnClickInfo).toHaveBeenCalled();
  });

  it("returns null when preference is false", () => {
    const props = makeProps();
    props.deviceDetails.body.sections[0].sections[0].data[0].preferences.otherPrefBtn = false;

    render(<SettingPreferences {...props} />);

    expect(screen.queryByText("otherPrefBtn_label")).not.toBeInTheDocument();
  });
});