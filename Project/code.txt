/**
 * @jest-environment jsdom
 */
import React from "react";
import { render, screen, fireEvent, act } from "@testing-library/react";
import "@testing-library/jest-dom";

// ------------------ Declare mocks FIRST ------------------
const mockDispatch = jest.fn();
let mockState;

let useHandleMoveLineResponseMock;
let moveLineMock;
let getDeviceDetailsMock;
let getChildDetailsMock;
let onConfirmationMock;

// ------------------ Redux ------------------
jest.mock("react-redux", () => ({
  useDispatch: () => mockDispatch,
  useSelector: (selector) => selector(mockState),
}));

// ------------------ Router ------------------
let mockId = "child-1";
jest.mock("react-router-dom", () => ({
  useHistory: () => ({ push: jest.fn() }),
  useParams: () => ({ id: encodeURIComponent(mockId) }),
}));

// ------------------ Actions ------------------
jest.mock("../home/actions", () => ({
  setSelectedDeviceId: (id) => ({ type: "SET_ID", payload: id }),
  fetchDevices: () => ({ type: "FETCH" }),
  saveMoveLine: (req) => ({ type: "MOVE", payload: req }),
  sendSMS: (req) => ({ type: "SMS", payload: req }),
}));

// ------------------ JSON ------------------
jest.mock("../CommonModal/modalText.json", () => ({
  moveErrorMessage: { id: "ERRID", title: "Error Title" },
}));

// ------------------ Child Components ------------------
jest.mock("./ToNumberShare", () => (props) => (
  <div data-testid="share">
    <button
      data-testid="select"
      onClick={() => props.selectedDevice("parent-123")}
    >
      select
    </button>
  </div>
));

jest.mock("../CommonModal/CommonModal", () => (props) => (
  <div
    data-testid="modal"
    data-open={props.open ? "true" : "false"}
    onClick={props.close}
  >
    modal-{props.message?.id}
  </div>
));

jest.mock("../../../shared/components/Loader/CustomLoader", () => () => (
  <div data-testid="loader">loading</div>
));

// ------------------ Hook ------------------
jest.mock("../shared/useMoveLineHandler", () => ({
  __esModule: true,
  default: (...args) => useHandleMoveLineResponseMock(...args),
}));

// ------------------ Utils ------------------
jest.mock("./numbershareUtils", () => ({
  moveLine: (...args) => moveLineMock(...args),
  createSubmitForm: jest.fn(),
  getDeviceDetails: (...args) => getDeviceDetailsMock(...args),
  getChildDetails: (...args) => getChildDetailsMock(...args),
  onConfirmation: (...args) => onConfirmationMock(...args),
}));

// ------------------ IMPORT LAST ------------------
import ToNumberShareContainer from "./ToNumberShareContainer";

// ------------------ Setup before each test ------------------
beforeEach(() => {
  jest.clearAllMocks();
  mockState = { Home: { selectedDeviceId: "child-1" } };

  // Initialize fn mocks fresh for each test
  useHandleMoveLineResponseMock = jest.fn();
  moveLineMock = jest.fn();
  getDeviceDetailsMock = jest.fn();
  getChildDetailsMock = jest.fn();
  onConfirmationMock = jest.fn();
});

// ------------------ TESTS ------------------
describe("ToNumberShareContainer", () => {
  test("renders share component", () => {
    render(<ToNumberShareContainer />);
    expect(screen.getByTestId("share")).toBeInTheDocument();
  });

  test("selecting a device triggers state update", () => {
    render(<ToNumberShareContainer />);
    fireEvent.click(screen.getByTestId("select"));
    expect(mockDispatch).toHaveBeenCalledWith({
      type: "SET_ID",
      payload: "parent-123",
    });
  });

  test("shows loader when fetching", () => {
    mockState = { Home: { selectedDeviceId: "child-1", isFetching: true } };
    render(<ToNumberShareContainer />);
    expect(screen.getByTestId("loader")).toBeInTheDocument();
  });

  test("displays modal when open", () => {
    render(<ToNumberShareContainer />);
    fireEvent.click(screen.getByTestId("modal")); // simulate close
    expect(screen.getByTestId("modal")).toHaveAttribute("data-open", "false");
  });

  test("calls moveLine util when triggered", async () => {
    moveLineMock.mockResolvedValue({ success: true });
    render(<ToNumberShareContainer />);
    await act(async () => {
      fireEvent.click(screen.getByTestId("select"));
    });
    expect(moveLineMock).toHaveBeenCalled();
  });

  test("handles useHandleMoveLineResponseMock hook", () => {
    useHandleMoveLineResponseMock.mockReturnValue({ error: true });
    render(<ToNumberShareContainer />);
    expect(useHandleMoveLineResponseMock).toHaveBeenCalled();
  });

  test("calls getDeviceDetails and getChildDetails utils", () => {
    getDeviceDetailsMock.mockReturnValue({ name: "child" });
    getChildDetailsMock.mockReturnValue({ name: "parent" });
    render(<ToNumberShareContainer />);
    expect(getDeviceDetailsMock).toHaveBeenCalled();
    expect(getChildDetailsMock).toHaveBeenCalled();
  });

  test("calls onConfirmation when triggered", () => {
    render(<ToNumberShareContainer />);
    act(() => {
      onConfirmationMock("ok");
    });
    expect(onConfirmationMock).toHaveBeenCalledWith("ok");
  });
});