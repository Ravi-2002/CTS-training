import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import '@testing-library/jest-dom';
import BlockCallsList from '../../components/BlockCallsList';
import callsMessagesReducer from '../../redux/reducers/callsMessagesReducer';
import * as actions from '../../redux/actions/fetchCallsMessages';

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn()
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();

describe('BlockCallsList Component', () => {
  let store;
  let history;

  beforeEach(() => {
    useDispatch.mockReturnValue(mockDispatch);
  });

  const setup = (selectorData) => {
    store = mockStore({});
    history = createMemoryHistory();
    history.push('/call-message-blocking');

    useSelector.mockImplementation(cb => cb({ Detail: selectorData }));

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );

    return { store, history };
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders blocked numbers and add button', () => {
    setup({
      blockedNumbers: [{ phoneNumber: '1234567890' }],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false,
    });

    expect(screen.getByText(/Block calls and messages/i)).toBeInTheDocument();
    expect(screen.getByText(/732.609.9414/)).toBeInTheDocument();
    expect(screen.getByText(/1234567890/)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Add a number/i })).toBeInTheDocument();
  });

  it('navigates to input page on Add button click', () => {
    const { history } = setup({
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false,
    });

    fireEvent.click(screen.getByRole('button', { name: /Add a number/i }));
    expect(history.location.pathname).toBe('/callsandmessages');
  });
});

// Reducer test
describe('callsMessagesReducer', () => {
  const initialState = {
    isFetching: false,
    callsMessages: {},
    blockedNumbers: [],
    expiredNumbers: [],
    blockAgainResponse: {},
    addBlockCallMsg: {},
    editBlockCallMsg: {},
    deleteBlockCallMsg: {},
    editAllBlockCallMsg: {},
    getCMError: {}
  };

  it('should return initial state', () => {
    expect(callsMessagesReducer(undefined, {})).toEqual(initialState);
  });

  it('should handle GET_CALLS_MESSAGES_SUCCESS', () => {
    const payload = {
      body: {
        blockedPhoneNumbers: [{ phoneNumber: '111' }],
        expiredBlockedPhoneNumbers: [{ phoneNumber: '222' }]
      }
    };
    const action = actions.getCallsMessagesSuccess(payload);
    const expected = {
      ...initialState,
      callsMessages: payload.body,
      blockedNumbers: payload.body.blockedPhoneNumbers,
      expiredNumbers: payload.body.expiredBlockedPhoneNumbers,
      isFetching: false,
    };
    expect(callsMessagesReducer(initialState, action)).toEqual(expected);
  });

  it('should handle POST_ADD_CALL_MSG_SUCCESS', () => {
    const response = { body: { blockedPhoneNumbers: ['999'] } };
    const action = actions.postaddBlockCallMsgSuccess(response);
    const expected = {
      ...initialState,
      addBlockCallMsg: response.body,
      isFetching: false,
    };
    expect(callsMessagesReducer(initialState, action)).toEqual(expected);
  });
});

// Action creators test
describe('fetchCallsMessages actions', () => {
  it('should create GET_CALLS_MESSAGES_SUCCESS action', () => {
    const response = {
      body: {
        blockedPhoneNumbers: ['123'],
        expiredBlockedPhoneNumbers: []
      }
    };
    const expected = {
      type: actions.GET_CALLS_MESSAGES_SUCCESS,
      payload: response.body,
      blockedNumbers: ['123'],
      expiredBlockNumbers: []
    };
    expect(actions.getCallsMessagesSuccess(response)).toEqual(expected);
  });

  it('should create POST_ADD_CALL_MSG_SUCCESS action', () => {
    const response = { body: ['added'] };
    const expected = {
      type: actions.POST_ADD_CALL_MSG_SUCCESS,
      payloadAddCallMsg: ['added']
    };
    expect(actions.postaddBlockCallMsgSuccess(response)).toEqual(expected);
  });
});