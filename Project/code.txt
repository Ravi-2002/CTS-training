// Reducer test
describe('callsMessagesReducer', () => {
  const initialState = {
    isFetching: false,
    callsMessages: {},
    blockedNumbers: [],
    expiredNumbers: [],
    blockAgainResponse: {},
    addBlockCallMsg: {},
    editBlockCallMsg: {},
    deleteBlockCallMsg: {},
    editAllBlockCallMsg: {},
    getCMError: {},
  };

  it('should return initial state', () => {
    expect(callsMessagesReducer(undefined, {})).toEqual(initialState);
  });

  it('handles GET_CALLS_MESSAGES_BEGIN', () => {
    const result = callsMessagesReducer(initialState, { type: actions.GET_CALLS_MESSAGES_BEGIN });
    expect(result).toEqual({ ...initialState, isFetching: true });
  });

  it('handles GET_CALLS_MESSAGES_SUCCESS', () => {
    const payload = {
      body: { data: 'success' },
      blockedPhoneNumbers: ['111'],
      expiredBlockedPhoneNumbers: ['222'],
    };
    const result = callsMessagesReducer(initialState, {
      type: actions.GET_CALLS_MESSAGES_SUCCESS,
      payload: payload.body,
      blockedNumbers: payload.blockedPhoneNumbers,
      expiredBlockNumbers: payload.expiredBlockedPhoneNumbers,
    });
    expect(result).toEqual({
      ...initialState,
      callsMessages: payload.body,
      blockedNumbers: payload.blockedPhoneNumbers,
      expiredNumbers: payload.expiredBlockedPhoneNumbers,
      isFetching: false,
    });
  });

  it('handles GET_CALLS_MESSAGES_FAIL', () => {
    const error = { message: 'fail' };
    const result = callsMessagesReducer(initialState, {
      type: actions.GET_CALLS_MESSAGES_FAIL,
      payloadGetCMError: error,
    });
    expect(result).toEqual({ ...initialState, getCMError: error, isFetching: false });
  });

  // ---------- ADD ----------
  it('handles POST_ADD_CALL_MSG_BEGIN', () => {
    const result = callsMessagesReducer(initialState, {
      type: actions.POST_ADD_CALL_MSG_BEGIN,
    });
    expect(result).toEqual({ ...initialState, isFetching: true });
  });

  it('handles POST_ADD_CALL_MSG_SUCCESS', () => {
    const result = callsMessagesReducer(initialState, {
      type: actions.POST_ADD_CALL_MSG_SUCCESS,
      payloadAddCallMsg: { message: 'added' },
    });
    expect(result).toEqual({
      ...initialState,
      addBlockCallMsg: { message: 'added' },
      isFetching: false,
    });
  });

  it('handles POST_ADD_CALL_MSG_FAIL', () => {
    const result = callsMessagesReducer(initialState, {
      type: actions.POST_ADD_CALL_MSG_FAIL,
      payloadAddCallMsgError: { error: 'fail' },
    });
    expect(result).toEqual({
      ...initialState,
      addBlockCallMsg: { error: 'fail' },
      isFetching: false,
    });
  });

  // ---------- DELETE ----------
  it('handles POST_DELETE_CALL_MSG_BEGIN', () => {
    const result = callsMessagesReducer(initialState, {
      type: actions.POST_DELETE_CALL_MSG_BEGIN,
    });
    expect(result).toEqual({ ...initialState, isFetching: true });
  });

  it('handles POST_DELETE_CALL_MSG_SUCCESS', () => {
    const result = callsMessagesReducer(initialState, {
      type: actions.POST_DELETE_CALL_MSG_SUCCESS,
      payloadDeleteCallMsg: { message: 'deleted' },
    });
    expect(result).toEqual({
      ...initialState,
      deleteBlockCallMsg: { message: 'deleted' },
      isFetching: false,
    });
  });

  it('handles POST_DELETE_CALL_MSG_FAIL', () => {
    const result = callsMessagesReducer(initialState, {
      type: actions.POST_DELETE_CALL_MSG_FAIL,
      payloadDeleteCallMsgError: { error: 'delete-fail' },
    });
    expect(result).toEqual({
      ...initialState,
      deleteBlockCallMsg: { error: 'delete-fail' },
      isFetching: false,
    });
  });
});