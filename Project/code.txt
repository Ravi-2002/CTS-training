import React from 'react';
import { render, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { MemoryRouter } from 'react-router-dom';
import Routes from '../routes'; // adjust path if needed

// Mock all lazy-loaded components with minimal components that have test IDs
jest.mock('../home/components', () => () => <div data-testid="HomeComponent" />);
jest.mock('../deviceDetail/components', () => () => <div data-testid="DeviceDetailComponent" />);
jest.mock('../home/components/servicedetails', () => () => <div data-testid="ServiceDetailsComponent" />);
jest.mock('../deviceDetail/components/ViewLimitation', () => () => <div data-testid="ViewLimitationsComponent" />);
jest.mock('../deviceDetail/components/callsandmessages', () => () => <div data-testid="CallsMessagesComponent" />);

const mockStore = configureStore([]);
const store = mockStore({});

describe('Routes', () => {
  const renderWithPath = (path) =>
    render(
      <Provider store={store}>
        <MemoryRouter initialEntries={[path]}>
          <Routes />
        </MemoryRouter>
      </Provider>
    );

  it('renders Home route for /blockService', () => {
    renderWithPath('/blockService');
    expect(screen.getByTestId('HomeComponent')).toBeInTheDocument();
  });

  it('renders ServiceDetails route for /service-details/:serviceName', () => {
    renderWithPath('/service-details/TestService');
    expect(screen.getByTestId('ServiceDetailsComponent')).toBeInTheDocument();
  });

  it('renders CallsMessages route for /call-message-blocking', () => {
    renderWithPath('/call-message-blocking');
    expect(screen.getByTestId('CallsMessagesComponent')).toBeInTheDocument();
  });

  it('renders DeviceDetail route for /callsandmessages', () => {
    renderWithPath('/callsandmessages');
    expect(screen.getByTestId('DeviceDetailComponent')).toBeInTheDocument();
  });

  it('renders ViewLimitations route for /viewlimitation', () => {
    renderWithPath('/viewlimitation');
    expect(screen.getByTestId('ViewLimitationsComponent')).toBeInTheDocument();
  });
});