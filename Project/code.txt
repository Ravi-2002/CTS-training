import React from 'react';
import { render, fireEvent, screen, waitFor } from '@testing-library/react';
import BlockServices from '../index'; // adjust if your path differs
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import { MemoryRouter } from 'react-router-dom';
import * as common from '../../../../../shared/utilities/util';
import * as actions from '../../actions/blockServicesActions';

// Mock VDS component
jest.mock('@vds/alert', () => ({ Alert: ({ children }) => <div>{children}</div> }));
jest.mock('@vds/toggle', () => ({ Toggle: ({ toggled, onToggle }) => (
  <button data-testid="toggle" onClick={() => onToggle(!toggled)}>
    {toggled ? 'ON' : 'OFF'}
  </button>
)}));
jest.mock('@vds/typography', () => ({
  Body: ({ children }) => <div>{children}</div>,
  Heading: ({ children }) => <div>{children}</div>,
}));
jest.mock('@vds/spinner', () => ({ Spinner: () => <div>Loading...</div> }));
jest.mock('@vds/link', () => ({ Link: ({ children, onClick }) => (
  <a href="#" onClick={onClick}>{children}</a>
)}));

// Mock utils
jest.mock('../../../../../shared/utilities/util', () => ({
  getItemValue: jest.fn(),
  getContentFromSection: jest.fn(),
  getChannelId: jest.fn(),
  mtnFormat: jest.fn((value) => `formatted-${value}`),
}));

const mockStore = configureStore([thunk]);

describe('BlockServices Component', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      Home: {
        getServicesResponse: {
          status: 200,
          responseCode: '00',
          serviceList: [
            {
              serviceName: 'Voicemail',
              serviceStatus: 'Active',
              type: 'CALL',
              subType: 'VOICEMAIL',
              displayName: 'Voicemail Service',
            },
            {
              serviceName: 'International Calling',
              serviceStatus: 'Inactive',
              type: 'CALL',
              subType: 'INTL',
              displayName: 'International Calling',
            },
          ],
        },
        postServicesResponse: {
          status: 200,
          responseCode: '00',
          message: 'Service updated successfully.',
        },
        postError: '',
      },
      Detail: {
        blockServices: {
          aemResponse: {
            sections: [
              {
                name: 'blockServiceLandingSection',
                items: [{ key: 'backToDevicePage', value: '/device' }],
              },
              {
                name: 'blockServiceHeaderSection',
                items: [{ key: 'blockServiceTitle', value: 'Manage Your Services' }],
              },
            ],
          },
        },
      },
    });

    // Mock utility return values
    common.getContentFromSection.mockImplementation((content, sectionName) => {
      return content.sections.find(sec => sec.name === sectionName);
    });

    common.getItemValue.mockImplementation((items, key) => {
      const item = items.find(i => i.key === key);
      return item ? item.value : '';
    });

    common.getChannelId.mockReturnValue('VZW');
  });

  it('renders correctly with service list and handles toggle', async () => {
    const { container } = render(
      <Provider store={store}>
        <MemoryRouter>
          <BlockServices />
        </MemoryRouter>
      </Provider>
    );

    expect(screen.getByText('Manage Your Services')).toBeInTheDocument();
    expect(screen.getByText('Voicemail Service')).toBeInTheDocument();
    expect(screen.getByText('International Calling')).toBeInTheDocument();

    const toggleButtons = screen.getAllByTestId('toggle');
    expect(toggleButtons.length).toBe(2);

    // Fire toggle event
    fireEvent.click(toggleButtons[0]);

    const actionsDispatched = store.getActions();
    expect(actionsDispatched.some(action => action.type.includes('POST_SERVICES'))).toBe(true);

    expect(container).toMatchSnapshot();
  });

  it('displays success message on post response', () => {
    render(
      <Provider store={store}>
        <MemoryRouter>
          <BlockServices />
        </MemoryRouter>
      </Provider>
    );

    expect(screen.getByText('Service updated successfully.')).toBeInTheDocument();
  });

  it('displays error message on post failure', () => {
    const errorStore = {
      ...store.getState(),
      Home: {
        ...store.getState().Home,
        postError: 'An error occurred',
      },
    };

    render(
      <Provider store={mockStore(errorStore)}>
        <MemoryRouter>
          <BlockServices />
        </MemoryRouter>
      </Provider>
    );

    expect(screen.getByText('An error occurred')).toBeInTheDocument();
  });

  it('navigates back to device page', () => {
    render(
      <Provider store={store}>
        <MemoryRouter>
          <BlockServices />
        </MemoryRouter>
      </Provider>
    );

    const backLink = screen.getByText('Back');
    expect(backLink).toBeInTheDocument();

    fireEvent.click(backLink); // You can spy on useNavigate if needed
  });

  it('renders loading state when getServices is not yet loaded', () => {
    const loadingStore = {
      ...store.getState(),
      Home: {
        getServicesResponse: null,
        postServicesResponse: null,
        postError: '',
      },
    };

    render(
      <Provider store={