import React, { Component } from "react";
import { connect } from "react-redux";
import * as actions from "../../actions/fetchServices";
import { bindActionCreators } from "redux";
import styled from "styled-components";

import "./style.css";
import Alert from "../../../alert";
import BSEmailDomains from "../blocksEmailDomains/BSEmailDomains";
import { Modal, ModalBody, ModalFooter, ModalTitle } from "@vds/modals";
import { Button, TextLink } from "@vds/buttons";
import { Body, Title } from "@vds/typography";
import { Loader } from "@vds/loaders";

const BLOCK_EMAIL_DOMAIN = "Emails & domains";

class BlockServices extends Component {
  constructor(props) {
    super(props);
    this.state = {
      services: {},
      updatedService: null,
    };
  }

  handleServices = (e, accordion) => {
    e.preventDefault();
    if (accordion === "BS") {
      this.props.selectAccordian("BS");
      this.props.actions.getServices(this.props.selectedDevice.encryptedMtn);
      window.scrollTo(0, 0);
    }
  };

  componentDidUpdate(prevProps) {
    const { services, serviceStatus } = this.props;

    if (serviceStatus !== prevProps.serviceStatus && serviceStatus.responseInfo?.responseCode === "0") {
      const formattedServices = Object.keys(services || {}).reduce(
        (acc, key) => {
          acc[key] = {
            isExpand: false,
            data: services[key]?.map((item) => ({ ...item, showMore: false })),
          };
          return acc;
        },
        { [BLOCK_EMAIL_DOMAIN]: { isExpand: false } }
      );

      this.setState({ services: formattedServices });
    }
  }

  handleSubServices = (e, service) => {
    e.preventDefault();
    const updatedServices = { ...this.state.services };
    Object.keys(updatedServices).forEach((key) => {
      updatedServices[key].isExpand = key === service ? !updatedServices[key].isExpand : false;
    });
    this.setState({ services: updatedServices });
  };

  toggleOn = (e, service, i) => {
    e.preventDefault();
    const { selectedDevice, actions } = this.props;
    const { services } = this.state;

    const payload = {
      mdn: selectedDevice.encryptedMtn,
      sfoCode: services[service].data[i].sfoCode,
      sfoEnabled: services[service].data[i].sfoEnabled === "Y" ? "N" : "Y",
    };

    actions.postServices(payload).then(() => {
      const updatedServices = { ...services };
      const currentService = updatedServices[service].data[i];
      currentService.sfoEnabled = currentService.sfoEnabled === "Y" ? "N" : "Y";

      this.setState({ services: updatedServices, updatedService: currentService.sfoCode });
    });
  };

  render() {
    const { services } = this.state;
    const { isFetching, failServices, confirmServices } = this.props;

    return (
      <div className="accordion">
        <div className="accordion__item">
          <div
            className="accordion__title"
            role="button"
            tabIndex="0"
            onClick={(e) => this.handleServices(e, "BS")}
            aria-expanded={this.props.selectedAccordian === "BS"}
          >
            <FAQsHeadSection id="blockservices">Block services</FAQsHeadSection>
          </div>
          <Loader show={isFetching} aria-label="Loading..." />

          {services &&
            Object.keys(services).map((service) => (
              <div key={service}>
                <div
                  className="accordion__title"
                  role="button"
                  tabIndex="0"
                  onClick={(e) => this.handleSubServices(e, service)}
                  aria-expanded={services[service].isExpand}
                >
                  <FAQs1HeadSection>{service}</FAQs1HeadSection>
                </div>

                <div className={services[service].isExpand ? "accordion__body" : "accordion__body--hidden"}>
                  {service === BLOCK_EMAIL_DOMAIN && <BSEmailDomains selectedDevice={this.props.selectedDevice} />}

                  {services[service].data?.map((detail, i) => (
                    <div key={detail.sfoCode} className="o-row">
                      <Body size="large" bold>
                        {detail.serviceName}
                      </Body>
                      <label className="form-switch" onClick={(e) => this.toggleOn(e, service, i)}>
                        <input type="checkbox" checked={detail.sfoEnabled === "Y"} readOnly />
                        <i />
                        <span>{detail.sfoEnabled === "Y" ? "On" : "Off"}</span>
                      </label>
                      <Modal
                        toggleButton={
                          <TextLink>
                            <Body size="medium">View More Details</Body>
                          </TextLink>
                        }
                      >
                        <ModalTitle>
                          <Title size="large">{detail.serviceName}</Title>
                        </ModalTitle>
                        <ModalBody>
                          <p dangerouslySetInnerHTML={{ __html: detail.shortDescription }} />
                          <p dangerouslySetInnerHTML={{ __html: detail.longDescription }} />
                        </ModalBody>
                      </Modal>
                    </div>
                  ))}
                </div>
              </div>
            ))}
        </div>
      </div>
    );
  }
}

const FAQsHeadSection = styled.div`
  padding: 10px 0;
  border-bottom: 2px solid #000;
  font-size: 18px;
  font-weight: bold;
`;

const FAQs1HeadSection = styled.div`
  padding: 10px 0;
  border-bottom: 1px solid #000;
  font-size: 18px;
`;

const mapStateToProps = (state) => ({
  services: state.Detail.serviceCalls.services,
  serviceStatus: state.Detail.serviceCalls.serviceStatus,
  isFetching: state.Detail.serviceCalls.isFetching,
  confirmServices: state.Detail.serviceCalls.confirmServices,
});

const mapDispatchToProps = (dispatch) => ({
  actions: bindActionCreators(actions, dispatch),
});

export default connect(mapStateToProps, mapDispatchToProps)(BlockServices);