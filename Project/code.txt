import React from 'react';
import { render } from '@testing-library/react';
import DeviceDetail from '../DeviceDetail';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import { MemoryRouter } from 'react-router-dom';
import * as util from '../../../../shared/js/util';
import * as common from '../../../../shared/js/common';

const mockStore = configureStore([]);

jest.mock('../../../../shared/js/util', () => ({
  getChannelId: jest.fn(() => 'VZW'),
  getItem: jest.fn(() => 'dummyItem'),
}));

jest.mock('../../../../shared/js/common', () => ({
  getItemValue: jest.fn((items, key) => {
    const found = items.find(item => item.key === key);
    return found ? found.value : '';
  }),
  getContentFromSection: jest.fn(() => ({
    data: {
      isAppleDevice: true,
    },
    appleDeviceMessage: 'This is an Apple device message.',
    sections: [],
  })),
}));

const mockLocationState = {
  devices: ['Device1', 'Device2'],
  isSingleDevice: false,
  selectedDevice: { encryptedMtn: 'encrypted-value' },
  advanceControls: {},
  showAdvanceControls: false,
};

describe('DeviceDetail', () => {
  const store = mockStore({
    Detail: {
      deviceDetails: {
        model: 'iPhone 13',
        manufacturer: 'Apple',
      },
      activeDevice: {
        deviceId: '123456',
        deviceType: 'Smartphone',
      },
    },
  });

  const pageItems = [
    { key: 'model', value: 'iPhone 13' },
    { key: 'manufacturer', value: 'Apple' },
  ];

  const pageContent = {
    data: {
      isAppleDevice: true,
    },
    appleDeviceMessage: 'This is an Apple device message.',
    sections: [],
  };

  it('renders without crashing', () => {
    const { getByText } = render(
      <Provider store={store}>
        <MemoryRouter>
          <DeviceDetail
            pageItems={pageItems}
            pageContent={pageContent}
            location={{ state: mockLocationState }}
          />
        </MemoryRouter>
      </Provider>
    );
    expect(getByText('iPhone 13')).toBeInTheDocument();
  });

  it('should correctly set appleNotice and Showmsg when isAppleDevice is true', () => {
    render(
      <Provider store={store}>
        <MemoryRouter>
          <DeviceDetail
            pageItems={pageItems}
            pageContent={pageContent}
            location={{ state: mockLocationState }}
          />
        </MemoryRouter>
      </Provider>
    );
    expect(pageContent.data.isAppleDevice).toBe(true);
    expect(pageContent.appleDeviceMessage).toBe('This is an Apple device message.');
  });

  it('renders with empty pageItems and pageContent gracefully', () => {
    const { container } = render(
      <Provider store={store}>
        <MemoryRouter>
          <DeviceDetail
            pageItems={[]}
            pageContent={{}}
            location={{ state: mockLocationState }}
          />
        </MemoryRouter>
      </Provider>
    );
    expect(container).toBeDefined();
  });

  it('handles null pageItems and pageContent gracefully', () => {
    const { container } = render(
      <Provider store={store}>
        <MemoryRouter>
          <DeviceDetail
            pageItems={null}
            pageContent={null}
            location={{ state: mockLocationState }}
          />
        </MemoryRouter>
      </Provider>
    );
    expect(container).toBeDefined();
  });

  it('handles null location.state gracefully', () => {
    const { container } = render(
      <Provider store={store}>
        <MemoryRouter>
          <DeviceDetail
            pageItems={pageItems}
            pageContent={pageContent}
            location={{ state: null }}
          />
        </MemoryRouter>
      </Provider>
    );
    expect(container).toBeDefined();
  });

  it('handles undefined location.state gracefully', () => {
    const { container } = render(
      <Provider store={store}>
        <MemoryRouter>
          <DeviceDetail
            pageItems={pageItems}
            pageContent={pageContent}
            location={{}}
          />
        </MemoryRouter>
      </Provider>
    );
    expect(container).toBeDefined();
  });
});