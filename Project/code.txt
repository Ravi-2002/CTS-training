import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureMockStore from 'redux-mock-store';
import { BrowserRouter } from 'react-router-dom';
import DeviceDetail from './DeviceDetail';

const mockStore = configureMockStore();

describe('DeviceDetail Component', () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      Detail: {
        Details: {
          isFetching: false,
          deviceDetails: {
            showServices: true,
            data: { isAppleDevice: false },
            contents: [
              {
                items: [
                  { itemKey: 'appleDeviceMessage', itemValue: 'Test Apple Message' },
                ],
              },
            ],
          },
        },
      },
    });
  });

  test('renders the component without crashing', () => {
    render(
      <Provider store={store}>
        <BrowserRouter>
          <DeviceDetail location={{ state: { devices: [], selectedDevice: {}, isSingleDevice: true } }} />
        </BrowserRouter>
      </Provider>
    );

    expect(screen.getByText("Now, let's manage blocks")).toBeInTheDocument();
  });

  test('displays loading state when fetching data', () => {
    store = mockStore({
      Detail: {
        Details: { isFetching: true, deviceDetails: null },
      },
    });

    render(
      <Provider store={store}>
        <BrowserRouter>
          <DeviceDetail location={{ state: { devices: [], selectedDevice: {}, isSingleDevice: true } }} />
        </BrowserRouter>
      </Provider>
    );

    expect(screen.getByRole('status')).toBeInTheDocument(); // Assuming Loader uses `role="status"`
  });

  test('renders dropdown with devices', () => {
    render(
      <Provider store={store}>
        <BrowserRouter>
          <DeviceDetail
            location={{
              state: {
                devices: [
                  { mtn: '12345', deviceNickname: 'Device 1', isFiveGDevice: false },
                  { mtn: '67890', deviceNickname: 'Device 2', isFiveGDevice: false },
                ],
                selectedDevice: { mtn: '12345', deviceNickname: 'Device 1' },
                isSingleDevice: false,
              },
            }}
          />
        </BrowserRouter>
      </Provider>
    );

    expect(screen.getByRole('combobox')).toBeInTheDocument();
    expect(screen.getByText('Device 1 12345')).toBeInTheDocument();
    expect(screen.getByText('Device 2 67890')).toBeInTheDocument();
  });

  test('calls handleOnChangeDevice when a device is selected', () => {
    const handleOnChangeDevice = jest.fn();

    render(
      <Provider store={store}>
        <BrowserRouter>
          <DeviceDetail
            location={{
              state: {
                devices: [
                  { mtn: '12345', deviceNickname: 'Device 1', isFiveGDevice: false },
                  { mtn: '67890', deviceNickname: 'Device 2', isFiveGDevice: false },
                ],
                selectedDevice: { mtn: '12345', deviceNickname: 'Device 1' },
                isSingleDevice: false,
              },
            }}
          />
        </BrowserRouter>
      </Provider>
    );

    fireEvent.change(screen.getByRole('combobox'), { target: { value: '67890' } });

    // Add expectations to verify handleOnChangeDevice behavior
  });

  test('shows alert for Apple devices', () => {
    store = mockStore({
      Detail: {
        Details: {
          isFetching: false,
          deviceDetails: {
            data: { isAppleDevice: true },
            appleDeviceMessage: 'Test Apple Message',
          },
        },
      },
    });

    render(
      <Provider store={store}>
        <BrowserRouter>
          <DeviceDetail
            location={{
              state: {
                devices: [{ mtn: '12345', deviceNickname: 'Device 1' }],
                selectedDevice: { mtn: '12345', deviceNickname: 'Device 1' },
                isSingleDevice: true,
              },
            }}
          />
        </BrowserRouter>
      </Provider>
    );

    expect(screen.getByText('Test Apple Message')).toBeInTheDocument();
  });

  test('redirects to home when devices state is undefined', () => {
    render(
      <Provider store={store}>
        <BrowserRouter>
          <DeviceDetail location={{ state: null }} />
        </BrowserRouter>
      </Provider>
    );

    expect(screen.getByText('Redirecting...')).toBeInTheDocument(); // Modify based on your redirect logic
  });
});