import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useDispatch } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import BlockCallsList from '../callsandmessages';
import '@testing-library/jest-dom';

// Mocks
jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
}));

jest.mock('../../../../shared/utilities/native', () => ({
  nativeSetTitle: jest.fn(),
}));

jest.mock('../../../../shared/utilities/util', () => ({
  mtnFormat: jest.fn((num) => num),
  getItemValue: jest.fn((items, key) => {
    if (key === 'callsandMessageTitle') return 'Block calls and messages from up to 5 numbers.';
    if (key === 'TellMeMoreHeader') return 'Tell me more';
    return '';
  }),
  getContentFromSection: jest.fn((content, key) => content.sections[0]),
  getChannelId: jest.fn(() => 'WEB'),
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();

describe('BlockCallsList', () => {
  let store;
  let history;

  const renderComponent = (detailOverrides = {}) => {
    useDispatch.mockReturnValue(mockDispatch);
    localStorage.setItem('mdn', '1234567890');
    history = createMemoryHistory();

    store = mockStore({
      Detail: {
        blockedNumbers: [],
        addBlockCallMsg: {},
        deleteBlockCallMsg: {},
        isFetching: false,
        callsMessages: {
          aemResponse: {
            sections: [
              {
                sections: [
                  {
                    data: {
                      mtn: '1234567890',
                    },
                  },
                ],
              },
            ],
          },
        },
        ...detailOverrides,
      },
    });

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders title and default blocked numbers', () => {
    renderComponent({
      blockedNumbers: [{ phoneNumber: '1112223333' }],
    });

    expect(screen.getByText(/Block calls and messages/i)).toBeInTheDocument();
    expect(screen.getByText('1112223333')).toBeInTheDocument();
  });

  it('renders updated list from addBlockCallMsg', () => {
    renderComponent({
      addBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '9999999999' }],
      },
    });

    expect(screen.getByText('9999999999')).toBeInTheDocument();
  });

  it('renders updated list from deleteBlockCallMsg', () => {
    renderComponent({
      deleteBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '5555555555' }],
      },
    });

    expect(screen.getByText('5555555555')).toBeInTheDocument();
  });

  it('disables Add button if 5 numbers exist', () => {
    renderComponent({
      blockedNumbers: [
        { phoneNumber: '1' },
        { phoneNumber: '2' },
        { phoneNumber: '3' },
        { phoneNumber: '4' },
        { phoneNumber: '5' },
      ],
    });

    expect(screen.getByRole('button', { name: /Add a number/i })).toBeDisabled();
  });

  it('navigates to view limitations page', () => {
    renderComponent();

    const link = screen.getByText(/View Limitations/i);
    fireEvent.click(link);
    expect(history.location.pathname).toBe('/viewlimitation');
  });

  it('navigates to add number input page on button click', () => {
    renderComponent();

    const addButton = screen.getByRole('button', { name: /Add a number/i });
    fireEvent.click(addButton);
    expect(history.location.pathname).toBe('/callsandmessages');
  });

  it('calls dispatch when X icon clicked for removal', () => {
    renderComponent({
      blockedNumbers: [{ phoneNumber: '1231231234' }],
    });

    const closeButton = screen.getByRole('button', { name: /close/i });
    fireEvent.click(closeButton);
    expect(mockDispatch).toHaveBeenCalled();
  });
});