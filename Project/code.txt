import React, { useState, useEffect } from 'react'; import { connect } from 'react-redux'; import { Redirect } from 'react-router-dom'; import { Body } from '@vds/typography'; import { bindActionCreators } from 'redux'; import { Button, TextLink } from '@vds/buttons'; import { Line } from '@vds/lines'; import { Modal, ModalBody, ModalTitle } from '@vds/modals'; import { Toggle } from '@vds/toggles'; import { Loader } from '@vds/loaders'; import { DropdownSelect } from '@vds/selects'; import { Tooltip } from '@vds/tooltips'; import BlockServices from './blocksServices/BlockServices'; import BlockCallsMessages from './blockCallsMessages'; import Alert from '../../alert'; import * as deviceDetailActions from '../actions'; import AdvancedControls from '../../home/components/AdvanceControls'; import { Col, Grid, Row } from '@vds/grids';

const MDN_ROLE_MESSAGE = "This line isn't registered for a My Verizon Account yet. You'll need this line to complete the online registration in order to access the features within My Verizon."; const MDN_ROLE_NONREG_MESSAGE = "Non Registered";

const DeviceDetail = ({ location, actions, isFetching, deviceDetails }) => { const [state, setState] = useState({ selectedDevice: location.state?.selectedDevice, devices: location.state?.devices, advanceControls: location.state?.advanceControls, applePopUp: false, isSingleDevice: location.state?.isSingleDevice, selectedAccordian: "", });

useEffect(() => { window.scrollTo({ top: 0, behavior: 'smooth' }); if (state.selectedDevice?.encryptedMtn) { actions.getDeviceDetail(state.selectedDevice.encryptedMtn); } }, [state.selectedDevice, actions]);

const handleOnChangeDevice = (event) => { const newSelectedDevice = state.devices.find(device => device.mtn === event.target.value); if (newSelectedDevice) { actions.getDeviceDetail(newSelectedDevice.encryptedMtn); setState(prev => ({ ...prev, selectedDevice: newSelectedDevice, selectedAccordian: "" })); } };

const selectAccordian = (name) => { setState(prev => ({ ...prev, selectedAccordian: prev.selectedAccordian === name ? "" : name })); };

if (!state.devices) { return <Redirect push to={{ pathname: '/' }} />; }

const deviceOptions = state.devices .filter(device => !device.isFiveGDevice) .map(device => <option key={device.mtn} value={device.mtn}>{device.deviceNickname} {device.mtn}</option>);

let message = ""; let appleNotice = deviceDetails?.data?.isAppleDevice || false; let showNotice = deviceDetails?.data?.isDataOnlyPlan || deviceDetails?.data?.isTrackingDevice || false;

return ( <div className="oneD"> <Loader show={isFetching} /> <h1>Now, let's manage blocks for this device.</h1> {!state.isSingleDevice && ( <Button use="secondary" surface="light" onClick={() => window.location.href = "/digital/nsa/secure/ui/devices/blocks/#/"}>See all devices</Button> )} {!state.isSingleDevice && ( <Grid> <Row> <Col colSizes={{ desktop: 4, mobile: 4 }}> <DropdownSelect onChange={handleOnChangeDevice} defaultValue={state.selectedDevice.mtn}> {deviceOptions} </DropdownSelect> </Col> </Row> </Grid> )} <Line /> <Grid rowGutter="10px"> <Row> <Col colSizes={{ desktop: 5 }}> <p className="role">{state.selectedDevice.role}</p> {state.selectedDevice.role === MDN_ROLE_NONREG_MESSAGE && <Tooltip>{MDN_ROLE_MESSAGE}</Tooltip>} <h4>{state.selectedDevice.deviceNickname}</h4> <h4>{state.selectedDevice.displayMtn}</h4> {appleNotice && <div>{deviceDetails.appleDeviceMessage}</div>} <img src={state.selectedDevice?.images?.mediumImage} alt="Device" /> </Col> <Col colSizes={{ desktop: 7, mobile: 4 }}> <span>Select a section below to get started. All changes are automatically saved.</span> {deviceDetails?.data?.isFamilyBase && <Alert Message={deviceDetails.familyBaseMessage} URL={deviceDetails.familyBaseUrl} Type={1} />} {showNotice && <Alert Message={message} Type={1} />} <BlockCallsMessages selectAccordian={selectAccordian} selectedAccordian={state.selectedAccordian} selectedDevice={state.selectedDevice} disabled={true} /> <BlockServices key={state.selectedDevice.mtn} selectAccordian={selectAccordian} selectedAccordian={state.selectedAccordian} selectedDevice={state.selectedDevice} /> </Col> </Row> </Grid> {location.state?.showAdvanceControls && <AdvancedControls advanceControls={state.advanceControls} />} </div> ); };

const mapStateToProps = (store) => ({ isFetching: store.Detail.Details.isFetching, deviceDetails: store.Detail.Details.deviceDetails, });

const mapDispatchToProps = (dispatch) => ({ actions: bindActionCreators({ ...deviceDetailActions }, dispatch), });

export default connect(mapStateToProps, mapDispatchToProps)(DeviceDetail);

