import axios from 'axios';
import apiUrl from '../../../../shared/utilities/apiUrl';
import { getHttpClientRequest, postHttpClientRequest } from '../../../../shared/services/httpClient';
// import { notifySuccess, notifyError } from "../../../utils/VendorScripts/VendorScripts"

export const GET_CALLS_MESSAGES_BEGIN = "CallsMessages/GET_CALLS_MESSAGES_BEGIN"
export const GET_CALLS_MESSAGES_SUCCESS =
  "CallsMessages/GET_CALLS_MESSAGES_SUCCESS"
export const GET_CALLS_MESSAGES_FAIL = "CallsMessages/GET_CALLS_MESSAGES_FAIL"

export const POST_ADD_CALL_MSG_BEGIN = "CallsMessages/POST_ADD_CALL_MSG_BEGIN"
export const POST_ADD_CALL_MSG_SUCCESS =
  "CallsMessages/POST_ADD_CALL_MSG_SUCCESS"
export const POST_ADD_CALL_MSG_FAIL = "CallsMessages/POST_ADD_CALL_MSG_FAIL"

export const POST_DELETE_CALL_MSG_BEGIN =
  "CallsMessages/POST_DELETE_CALL_MSG_BEGIN"
export const POST_DELETE_CALL_MSG_SUCCESS =
  "CallsMessages/POST_DELETE_CALL_MSG_SUCCESS"
export const POST_DELETE_CALL_MSG_FAIL =
  "CallsMessages/POST_DELETE_CALL_MSG_FAIL"



export const getCallsMessages = (payload) => async dispatch => {

  dispatch(getCallsMessagesBegin())
    

    const onSuccess = (resp) => {
      if (
        resp &&
        resp.data &&
        resp.data.responseInfo &&
        resp.data.responseInfo.responseCode == "00"
      ) {
        dispatch(getCallsMessagesSuccess(resp.data));
      } else {
        dispatch(getCallsMessagesError(resp.data));
      }
    };
  
    const onError = error => {
        dispatch(getCallsMessagesError(error));

    };
  
    const callMS = () => {
      let axConfig = {
        headers: {
          flowName:'Blocks',
          contentType: 'application/json',
          // pageName: 'dsrDeviceLanding',
          // flowName: 'Device',
        },
      }
      return getHttpClientRequest(apiUrl().callsMessages, axConfig)
    }
  
    callMS()
      .then(msResp => {
        console.log(msResp, 'msResp')
        if (msResp && msResp.status == 200) {
          onSuccess(msResp);
        }
      })
      .catch(onError);
}

export const postaddBlockCallMsg = (blockNum) => async dispatch => {

  dispatch(postaddBlockCallMsgBegin())
  const onSuccess = (resp) => {
    if (
      resp &&
      resp.data &&
      resp.data.responseInfo &&
      resp.data.responseInfo.responseCode == "00"
    ) {
      
      dispatch(postaddBlockCallMsgSuccess(resp.data));
    } else {
      dispatch(postaddBlockCallMsgError(resp.data));
    }
  };
  
  const onError = error => {
      dispatch(postaddBlockCallMsgError(error));
  };
  
  const callMS = () => {
    let axConfig = {
      headers: {
        flowName:'Blocks',
        contentType: 'application/json',
        
      },
    }
    if (apiUrl().addNumber?.indexOf('ApiData') > -1) {
      return postHttpClientRequest(
        apiUrl().addNumber,blockNum,
        axConfig
      ) 
    } else {
      
      return postHttpClientRequest(
        apiUrl().addNumber,
        blockNum,
        axConfig
      );
    }
  }
  
  callMS()
    .then(msResp => {
      console.log(msResp, 'msResp')
      if (msResp && msResp.status == 200) {
        onSuccess(msResp);
      }
    })
    .catch(onError);

}


export const postDeleteBlockCallMsg = (blockNum) => async dispatch => {

  dispatch(postDeleteBlockCallMsgBegin())
 const onSuccess = (resp) => {
  if (
    resp &&
    resp.data &&
    resp.data.responseInfo &&
    resp.data.responseInfo.responseCode == "00"
  ) {
    
    dispatch(postDeleteBlockCallMsgSuccess(resp.data));
  } else {
    dispatch(postDeleteBlockCallMsgError(resp.data));
  }
};

const onError = error => {
  
    dispatch(postDeleteBlockCallMsgError(error));
  
};

const callMS = () => {
  let axConfig = {
    headers: {
      flowName:'Blocks',
      contentType: 'application/json',
    },
  }
  if (apiUrl().deleteNumber?.indexOf('ApiData') > -1) {
    return postHttpClientRequest(
      apiUrl().deleteNumber,blockNum,
      axConfig
    ) 
  } else {
    
    return postHttpClientRequest(
      apiUrl().deleteNumber,
      blockNum,
      axConfig
    );
  }
}

callMS()
  .then(msResp => {
    console.log(msResp, 'msResp')
    if (msResp && msResp.status == 200) {
      onSuccess(msResp);
    }
  })
  .catch(onError);
   
}





export const getCallsMessagesBegin = () => ({
  type: GET_CALLS_MESSAGES_BEGIN
})
export const getCallsMessagesSuccess = (response) => ({
  type: GET_CALLS_MESSAGES_SUCCESS,
  payload: response.body,
  blockedNumbers: response.body.blockedPhoneNumbers,
  expiredBlockNumbers: response.body.expiredBlockedPhoneNumbers
})
export const getCallsMessagesError = (response) => ({
  type: GET_CALLS_MESSAGES_FAIL,
  payloadGetCMError: response.body
})

export const postaddBlockCallMsgBegin = () => ({
  type: POST_ADD_CALL_MSG_BEGIN
})
export const postaddBlockCallMsgSuccess = (response) => ({
  type: POST_ADD_CALL_MSG_SUCCESS,
  payloadAddCallMsg: response.body
})
export const postaddBlockCallMsgError = (response) => ({
  type: POST_ADD_CALL_MSG_FAIL,
  payloadAddCallMsgError: response.body
})

export const postDeleteBlockCallMsgBegin = () => ({
  type: POST_DELETE_CALL_MSG_BEGIN
})
export const postDeleteBlockCallMsgSuccess = (response) => ({
  type: POST_DELETE_CALL_MSG_SUCCESS,
  payloadDeleteCallMsg: response.body
})
export const postDeleteBlockCallMsgError = (response) => ({
  type: POST_DELETE_CALL_MSG_FAIL,
  payloadDeleteCallMsgError: response.body
})
