import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import BlockServices from "./BlockServices";

const mockStore = configureStore([]);
const mockActions = {
  getServices: jest.fn(),
  postServices: jest.fn(),
};
const initialState = {
  Detail: {
    serviceCalls: {
      services: {
        "Sample Service": {
          isExpand: false,
          data: [
            {
              serviceName: "Sample Service 1",
              sfoCode: "001",
              sfoEnabled: "Y",
              shortDescription: "This is a short description.",
              longDescription: "This is a long description.",
              showMore: false,
            },
          ],
        },
      },
      serviceStatus: { responseInfo: { responseCode: 0 } },
      getServices: true,
      confirmServices: { successMsg: "Success" },
      confirmServiceFlag: true,
      failServices: null,
      serviceFail: false,
      serviceErrorFlag: false,
      servicesError: null,
      isFetching: false,
    },
  },
};

describe("BlockServices Component", () => {
  let store;

  beforeEach(() => {
    store = mockStore(initialState);
    jest.clearAllMocks();
  });

  it("renders the BlockServices component correctly", () => {
    render(
      <Provider store={store}>
        <BlockServices actions={mockActions} />
      </Provider>
    );

    expect(screen.getByText("Block services")).toBeInTheDocument();
    expect(screen.getByText("Sample Service")).toBeInTheDocument();
  });

  it("expands and collapses services accordion on click", () => {
    render(
      <Provider store={store}>
        <BlockServices actions={mockActions} />
      </Provider>
    );

    const accordionButton = screen.getByText("Sample Service");
    fireEvent.click(accordionButton);

    expect(accordionButton.closest("div").getAttribute("aria-expanded")).toBe(
      "true"
    );

    fireEvent.click(accordionButton);
    expect(accordionButton.closest("div").getAttribute("aria-expanded")).toBe(
      "false"
    );
  });

  it("calls getServices action when Block services is clicked", () => {
    render(
      <Provider store={store}>
        <BlockServices actions={mockActions} />
      </Provider>
    );

    const blockServicesButton = screen.getByText("Block services");
    fireEvent.click(blockServicesButton);

    expect(mockActions.getServices).toHaveBeenCalled();
  });

  it("toggles the service on and off", async () => {
    render(
      <Provider store={store}>
        <BlockServices actions={mockActions} />
      </Provider>
    );

    const toggleInput = screen.getByLabelText("Sample Service 1 Toggle Button On");
    expect(toggleInput).toBeChecked();

    fireEvent.click(toggleInput);
    expect(mockActions.postServices).toHaveBeenCalledWith({
      mdn: undefined,
      sfoCode: "001",
      sfoEnabled: "N",
    });
  });

  it("displays a success message when confirmServiceFlag is true", () => {
    render(
      <Provider store={store}>
        <BlockServices actions={mockActions} />
      </Provider>
    );

    expect(screen.getByText("Success")).toBeInTheDocument();
  });

  it("displays error message when serviceErrorFlag is true", () => {
    const errorState = {
      ...initialState,
      Detail: {
        ...initialState.Detail,
        serviceCalls: {
          ...initialState.Detail.serviceCalls,
          serviceErrorFlag: true,
          servicesError: { errorMessage: "Something went wrong!" },
        },
      },
    };
    const errorStore = mockStore(errorState);

    render(
      <Provider store={errorStore}>
        <BlockServices actions={mockActions} />
      </Provider>
    );

    expect(screen.getByText("Something went wrong!")).toBeInTheDocument();
  });

  it("shows the loader when isFetching is true", () => {
    const fetchingState = {
      ...initialState,
      Detail: {
        ...initialState.Detail,
        serviceCalls: { ...initialState.Detail.serviceCalls, isFetching: true },
      },
    };
    const fetchingStore = mockStore(fetchingState);

    render(
      <Provider store={fetchingStore}>
        <BlockServices actions={mockActions} />
      </Provider>
    );

    expect(screen.getByTestId("loader")).toBeInTheDocument();
  });
});