import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useDispatch } from 'react-redux';
import { createMemoryHistory } from 'history';
import { Router } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import '@testing-library/jest-dom';

import BlockCallsEmpty from '../../components/index';

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn()
}));

const mockStore = configureStore([]);

describe('BlockCallsEmpty Component', () => {
  let store;
  let history;
  const mockDispatch = jest.fn();

  beforeEach(() => {
    localStorage.setItem('mdn', '1234567890');
    require('react-redux').useDispatch.mockReturnValue(mockDispatch);
  });

  const setup = (stateOverrides, routeState = {}) => {
    const initialState = {
      Detail: {
        blockedNumbers: [],
        addBlockCallMsg: {},
        isFetching: false,
        ...stateOverrides
      }
    };

    store = mockStore(initialState);
    history = createMemoryHistory();
    history.push('/block-calls', routeState);

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsEmpty history={history} />
        </Router>
      </Provider>
    );

    return { store, history };
  };

  it('renders and disables the button initially', () => {
    setup();
    expect(screen.getByText(/Block calls and messages/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Block number/i })).toBeDisabled();
  });

  it('enables the button when number is typed', () => {
    setup();
    fireEvent.change(screen.getByRole('textbox'), {
      target: { value: '1234567890' }
    });
    expect(screen.getByRole('button', { name: /Block number/i })).not.toBeDisabled();
  });

  it('redirects to list page if blockedNumbers > 0 and allowInput is false', () => {
    const { history } = setup(
      { blockedNumbers: [{ phoneNumber: '1112223333' }] },
      { allowInput: false }
    );
    expect(history.location.pathname).toBe('/call-message-blocking');
  });

  it('does not redirect if allowInput is true', () => {
    const { history } = setup(
      { blockedNumbers: [{ phoneNumber: '1112223333' }] },
      { allowInput: true }
    );
    expect(history.location.pathname).toBe('/block-calls');
  });

  it('redirects after successful block', () => {
    const { history } = setup({
      blockedNumbers: [],
      addBlockCallMsg: {
        responseInfo: { responseCode: '00' }
      }
    });
    expect(history.location.pathname).toBe('/call-message-blocking');
  });
});