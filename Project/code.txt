import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import BlockCallsMessages from '../BlockCallsMessages';
import configureStore from 'redux-mock-store';
import { Provider } from 'react-redux';
import thunk from 'redux-thunk';
import * as actions from '../../actions/fetchCallsMessages';

jest.mock('../../actions/fetchCallsMessages', () => ({
  fetchCallsMessages: jest.fn(() => ({ type: 'FETCH_CALLS_MESSAGES' })),
  postaddBlockCallMsg: jest.fn(() => ({ type: 'ADD_BLOCK_CALL' })),
  postDeleteBlockCallMsg: jest.fn(() => ({ type: 'DELETE_BLOCK_CALL' })),
}));

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

const setup = (stateOverrides = {}) => {
  const store = mockStore({
    Detail: {
      callsMessages: {
        loading: false,
        blockedNumbers: [],
        postaddBlockCallMsgResponse: {},
        postDeleteBlockCallMsgResponse: {},
        ...stateOverrides
      },
    },
  });

  return render(
    <Provider store={store}>
      <BlockCallsMessages />
    </Provider>
  );
};

describe('BlockCallsMessages Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders loading spinner', () => {
    setup({ loading: true });
    expect(screen.getByText('Loading...')).toBeInTheDocument();
  });

  it('renders when no blocked numbers', () => {
    setup();
    expect(screen.getByText('Block Calls and Messages')).toBeInTheDocument();
    expect(screen.getByText('No blocked numbers.')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Block Number/i })).toBeInTheDocument();
  });

  it('renders list of blocked numbers with remove buttons', () => {
    setup({
      blockedNumbers: ['12345', '67890'],
    });

    expect(screen.getByText('12345')).toBeInTheDocument();
    expect(screen.getByText('67890')).toBeInTheDocument();
    const removeButtons = screen.getAllByRole('button', { name: /Remove/i });
    expect(removeButtons).toHaveLength(2);
  });

  it('allows adding a blocked number', () => {
    setup();

    const input = screen.getByPlaceholderText('Enter number');
    fireEvent.change(input, { target: { value: '98765' } });

    const button = screen.getByRole('button', { name: /Block Number/i });
    fireEvent.click(button);

    expect(actions.postaddBlockCallMsg).toHaveBeenCalledWith('98765');
  });

  it('removes a blocked number', () => {
    setup({
      blockedNumbers: ['11111'],
    });

    const removeButton = screen.getByRole('button', { name: /Remove/i });
    fireEvent.click(removeButton);

    expect(actions.postDeleteBlockCallMsg).toHaveBeenCalledWith('11111');
  });

  it('shows success and error messages', () => {
    setup({
      postaddBlockCallMsgResponse: { success: true },
      postDeleteBlockCallMsgResponse: { error: 'Failed to delete' },
    });

    expect(screen.getByText('Number blocked successfully.')).toBeInTheDocument();
    expect(screen.getByText('Failed to delete')).toBeInTheDocument();
  });
});