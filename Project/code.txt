import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import BlockServices from "./BlockServices";

const jsonResponse = {
  body: {
    sections: [
      {
        sections: [
          {
            data: {
              serviceDetailsMap: {
                "Additional Services": [
                  {
                    longDescription:
                      "<p>If you want to allow your number to display on a per-call basis, you can dial *82 + area code and phone number + SEND.</p>",
                    sfoEnabled: "##SFO_BOOLE##",
                    shortDescription:
                      "Permanently block your number from displaying to others when you call.",
                    serviceName: "Caller ID Blocking",
                    sfoCode: "48577",
                  },
                ],
                "Data and Internet": [
                  {
                    longDescription:
                      "Instead of Block Mobile Web, consider <b>Content Filtering</b> to manage the type of content your Account Member can view/download.",
                    sfoEnabled: "##SFO_71905_BOOLEAN##",
                    shortDescription:
                      "Block Mobile Web will prevent you from accessing the Mobile Web from your handset.",
                    serviceName: "Block Mobile Web",
                    sfoCode: "71905",
                  },
                ],
                Messaging: [
                  {
                    longDescription:
                      "<p>If you have a Messaging package on your line, Block All Messaging will remove your Messaging package.</p>",
                    sfoEnabled: "##SFO_54307_BOOLEAN##",
                    shortDescription:
                      "Prevents incoming and outgoing Text, Multimedia, PSMS (Premium Messages).",
                    serviceName: "Block All Messaging",
                    sfoCode: "54307",
                  },
                ],
                Purchases: [
                  {
                    longDescription:
                      "Does not cancel existing subscriptions. To prevent billing for other subscription applications previously downloaded, please cancel them.",
                    sfoEnabled: "##SFO_66139_BOOLEAN##",
                    shortDescription:
                      "Prevents you from purchasing application downloads via Get It Now/Media Center.",
                    serviceName: "Block All Application Downloads",
                    sfoCode: "66139",
                  },
                ],
              },
            },
          },
        ],
      },
    ],
  },
};

// Extract services array from the JSON
const extractedServices = Object.entries(
  jsonResponse.body.sections[0].sections[0].data.serviceDetailsMap
).flatMap(([category, services]) =>
  services.map((service) => ({
    id: service.sfoCode,
    name: service.serviceName,
    enabled: service.sfoEnabled.includes("BOOLEAN") ? false : true,
  }))
);

describe("BlockServices Component", () => {
  const onToggleServiceMock = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  test("renders all services from JSON data", () => {
    render(
      <BlockServices
        services={extractedServices}
        isFetching={false}
        onToggleService={onToggleServiceMock}
      />
    );

    extractedServices.forEach((service) => {
      expect(screen.getByText(service.name)).toBeInTheDocument();
    });
  });

  test("renders correct number of checkboxes", () => {
    render(
      <BlockServices
        services={extractedServices}
        isFetching={false}
        onToggleService={onToggleServiceMock}
      />
    );

    const checkboxes = screen.getAllByRole("checkbox");
    expect(checkboxes.length).toBe(extractedServices.length);
  });

  test("checkbox states reflect service.enabled", () => {
    render(
      <BlockServices
        services={extractedServices}
        isFetching={false}
        onToggleService={onToggleServiceMock}
      />
    );

    extractedServices.forEach((service) => {
      const checkbox = screen.getByRole("checkbox", {
        name: `${service.name} Toggle Button`,
      });
      if (service.enabled) {
        expect(checkbox).toBeChecked();
      } else {
        expect(checkbox).not.toBeChecked();
      }
    });
  });

  test("calls onToggleService when a checkbox is clicked", () => {
    render(
      <BlockServices
        services={extractedServices}
        isFetching={false}
        onToggleService={onToggleServiceMock}
      />
    );

    const checkbox = screen.getByRole("checkbox", {
      name: `${extractedServices[0].name} Toggle Button`,
    });

    fireEvent.click(checkbox);
    expect(onToggleServiceMock).toHaveBeenCalledWith(extractedServices[0].id);
  });

  test("renders loader when isFetching is true", () => {
    render(<BlockServices isFetching={true} services={[]} />);
    expect(screen.getByTestId("loader")).toHaveTextContent("Loading...");
  });

  test("displays success message", () => {
    const successMessage = "Services updated successfully";
    render(
      <BlockServices
        services={[]}
        isFetching={false}
        successMessage={successMessage}
      />
    );
    expect(screen.getByText(successMessage)).toBeInTheDocument();
  });

  test("displays error message", () => {
    const errorMessage = "An error occurred";
    render(
      <BlockServices
        services={[]}
        isFetching={false}
        errorMessage={errorMessage}
      />
    );
    expect(screen.getByText(errorMessage)).toBeInTheDocument();
  });

  test("renders empty services list without errors", () => {
    render(<BlockServices services={[]} isFetching={false} />);
    expect(screen.queryByRole("checkbox")).not.toBeInTheDocument();
  });
});