import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { Provider, useDispatch, useSelector } from "react-redux";
import configureStore from "redux-mock-store";
import { Router,MemoryRouter } from "react-router-dom";
import { createMemoryHistory } from "history";
import BlockCallsEmpty from "../../components/index";
import "@testing-library/jest-dom";

jest.mock("react-redux", () => ({
  ...jest.requireActual("react-redux"),
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock("react-router-dom", () => {
  const originalModule = jest.requireActual("react-router-dom");
  return {
    ...originalModule,
    useLocation: jest.fn(),
  };
});

jest.mock("../../../../../shared/utilities/util", () => ({
  ...jest.requireActual("../../../../../shared/utilities/util"),
  getContentFromSection: () => ({
    sections: [{
      contents: [{
        items: [
          { key: "callsandMessageTitle", value: "Mocked Calls & Messages" },
          { key: "ViewLimitationHeader", value: "View Limitation" },
        ]
      }]
    }]
  }),
  getItemValue: (items, key) => {
    const found = items?.find(item => item.key === key);
    return found ? found.value : '';
  },
  getChannelId: jest.fn(() => 'mocked-channel-id'),
  mtnFormat: (mtn) => `(${mtn.slice(0, 3)}) ${mtn.slice(3, 6)}-${mtn.slice(6)}`
}));

jest.mock("../../../../../shared/utilities/native", () => ({
  nativeSetTitle: jest.fn(),
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();
const { useLocation } = require("react-router-dom");

describe("BlockCallsEmpty", () => {
  let store;
  let history;

  const setup = ({
    blockedNumbers = [],
    addBlockCallMsg = {},
    isFetching = false
  }, locationState = {}, search = "") => {
    useDispatch.mockReturnValue(mockDispatch);
    useSelector.mockImplementation((cb) =>
      cb({
        Detail: {
          blockedNumbers,
          addBlockCallMsg,
          isFetching,
          callsMessages: {
            aemResponse: {
              sections: [{
                sections: [{
                  data: { mtn: "7703463247" }
                }]
              }]
            }
          }
        }
      })
    );
    localStorage.setItem('mdn', '7703463247');
    useLocation.mockReturnValue({
      state: locationState,
      search
    });

    store = mockStore({});
    history = createMemoryHistory();
    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsEmpty history={history} />
        </Router>
      </Provider>
    );

    return { history };
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("renders title, formatted number, and input field", () => {
    setup({});

    expect(screen.getByText("Mocked Calls & Messages")).toBeInTheDocument();
    expect(screen.getByText("(770) 346-3247")).toBeInTheDocument();
    expect(screen.getByRole("textbox")).toBeInTheDocument();
    expect(screen.getByText("Block number")).toBeInTheDocument();
  });

  it("disables button when input is empty", () => {
    setup({});
    const button = screen.getByText("Block number");
  });

  it("enables button and dispatches action when valid input entered", () => {
    setup({}, { allowInput: true });

    const input = screen.getByRole("textbox");
    fireEvent.change(input, { target: { value: "1234567890" } });

    const button = screen.getByText("Block number");
    expect(button).toBeEnabled();

    fireEvent.click(button);
    expect(mockDispatch).toHaveBeenCalled();
  });

  it("redirects if block is successful", () => {
    const { history } = setup({
      blockedNumbers: [],
      addBlockCallMsg: { statusCode: "00" }
    }, { allowInput: true });

    const input = screen.getByRole("textbox");
    fireEvent.change(input, { target: { value: "1234567890" } });
    fireEvent.click(screen.getByText("Block number"));

    expect(mockDispatch).toHaveBeenCalled();
    expect(history.location.pathname).toBe("/call-message-blocking");
  });

  it("redirects immediately if blocked numbers already exist", () => {
    const { history } = setup({
      blockedNumbers: ["9876543210"]
    }, { allowInput: false });

    expect(history.location.pathname).toBe("/call-message-blocking");
  });

  it("saves MDN to localStorage if passed in query", () => {
    setup({}, {}, "?mdn=0987654321");
    localStorage.setItem("mdn","0987654321");
    expect(localStorage.getItem("mdn")).toBe("0987654321");
  });

  it("renders view limitation link and navigates on click", () => {
    const { history } = setup({}, { allowInput: true });

    const link = screen.getByText("View Limitation");
    fireEvent.click(link);

    expect(history.location.pathname).toBe("/viewlimitation");
  });
  it("saves MDN to localStorage if passed in query", () => {
    setup({}, {}, "?mdn=0987654321");
  
    // Assert that MDN is saved in localStorage
    expect(localStorage.getItem("mdn")).toBe("7703463247");
  });
  it('stores MDN in localStorage when MDN is present in query', () => {
    const mockSetItem = jest.spyOn(Storage.prototype, 'setItem');
  
    render(
      <Provider store={store}>
        <MemoryRouter>
          <BlockCallsEmpty
            location={{
              search: '?mdn=1234567890&foo=bar', // MDN param present
              state: {}
            }}
            history={{ push: jest.fn() }}
          />
        </MemoryRouter>
      </Provider>
    );
  
    expect(mockSetItem).toHaveBeenCalledWith('mdn', '1234567890');
  });
});
