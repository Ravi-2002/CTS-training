import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import '@testing-library/jest-dom';

import BlockServices from '../../components/index';

import * as reactRedux from 'react-redux';

const mockStore = configureStore([]);

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn()
}));

describe('BlockServices Component', () => {
  let store;
  let history;
  const mockDispatch = jest.fn();

  beforeEach(() => {
    reactRedux.useDispatch.mockReturnValue(mockDispatch);
  });

  const setup = (selectorData) => {
    store = mockStore({});
    history = createMemoryHistory();
    history.push('/block-services?mdn=1234567890');

    reactRedux.useSelector.mockImplementation(cb =>
      cb({ Home: selectorData })
    );

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockServices />
        </Router>
      </Provider>
    );

    return { store, history };
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders and toggles service correctly', () => {
    setup({
      services: {
        Category1: [
          { serviceName: 'Service A', sfoEnabled: 'Y', sfoCode: '001' },
          { serviceName: 'Service B', sfoEnabled: 'N', sfoCode: '002' }
        ]
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {},
      servicesError: {}
    });

    expect(screen.getByText(/Be in charge of who does what/i)).toBeInTheDocument();
    expect(screen.getByText('Service A')).toBeInTheDocument();
    expect(screen.getByText('Service B')).toBeInTheDocument();

    fireEvent.click(screen.getAllByRole('checkbox')[1]);
    expect(mockDispatch).toHaveBeenCalled();
  });

  it('shows success notification when confirmServices responseCode is 00', () => {
    setup({
      services: {
        Category1: []
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {
        responseInfo: { responseCode: '00' }
      },
      servicesError: {}
    });

    expect(screen.getByText(/Service updated successfully/i)).toBeInTheDocument();
  });

  it('shows error notification when responseCode is 99', () => {
    setup({
      services: {
        Category1: []
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {},
      servicesError: {
        responseInfo: { responseCode: '99' },
        libErrorInfo: {
          internalErrors: [
            { errorMessage: 'Sample error' }
          ]
        }
      }
    });

    expect(screen.getByText(/Error/i)).toBeInTheDocument();
  });

  it('renders failure message if service load fails', () => {
    setup({
      services: {},
      isFetching: false,
      serviceFail: true,
      confirmServices: {},
      servicesError: {}
    });

    expect(screen.getByText(/Failed to fetch services/i)).toBeInTheDocument();
  });

  it('navigates to service details on TextLink click', () => {
    const { history } = setup({
      services: {
        Category1: [
          { serviceName: 'Service A', sfoEnabled: 'Y', sfoCode: '001' }
        ]
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {},
      servicesError: {}
    });

    const tellMeMore = screen.getByText(/Tell me more/i);
    fireEvent.click(tellMeMore);
    expect(history.location.pathname).toContain('/service-details/Service A');
  });
});
