import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import BlockCallsMessages from "../BlockCallsMessages";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import thunk from "redux-thunk";
import { MemoryRouter } from "react-router-dom";
import * as common from "../../../../../shared/utilities/util";
import * as actions from "../../actions/fetchCallsMessages";

jest.mock("../../../../../shared/utilities/util", () => ({
  __esModule: true,
  getItemValue: jest.fn(),
  getChannelId: jest.fn(),
  mtnFormat: jest.fn(),
  getContentFromSection: jest.fn(),
}));

jest.mock("../../actions/fetchCallsMessages", () => ({
  fetchCallsMessages: jest.fn(),
  postaddBlockCallMsg: jest.fn(),
  postDeleteBlockCallMsg: jest.fn(),
}));

const mockStore = configureStore([thunk]);

describe("BlockCallsMessages Component", () => {
  let store;

  const mockAemResponse = {
    pageItems: [{}, {}, {}],
    sections: [
      {
        contents: [{ key: "blockCallsMsgs", value: "Block Calls & Messages" }],
      },
    ],
  };

  beforeEach(() => {
    common.getChannelId.mockReturnValue("web");
    common.getItemValue.mockReturnValue("Some Item");
    common.getContentFromSection.mockReturnValue(mockAemResponse.sections[0]);
    common.mtnFormat.mockImplementation((num) => `+91 ${num}`);

    actions.fetchCallsMessages.mockImplementation(() => ({ type: "FETCH" }));
    actions.postaddBlockCallMsg.mockImplementation(() => ({ type: "ADD" }));
    actions.postDeleteBlockCallMsg.mockImplementation(() => ({ type: "DELETE" }));
  });

  const setup = (callsMessagesState) => {
    store = mockStore({
      Detail: {
        callsMessages: callsMessagesState,
      },
    });

    return render(
      <Provider store={store}>
        <MemoryRouter>
          <BlockCallsMessages />
        </MemoryRouter>
      </Provider>
    );
  };

  test("renders with empty blocked numbers", () => {
    setup({
      aemResponse: mockAemResponse,
      blockedNumbers: [],
      fetchCallsMessagesRes: { loading: false },
    });

    expect(screen.getByText("Block Calls & Messages")).toBeInTheDocument();
    expect(screen.getByText("Add number")).toBeInTheDocument();
  });

  test("renders with blocked numbers and handles remove", async () => {
    setup({
      aemResponse: mockAemResponse,
      blockedNumbers: [{ id: 1, msisdn: "9876543210" }],
      fetchCallsMessagesRes: { loading: false },
    });

    expect(screen.getByText("Block Calls & Messages")).toBeInTheDocument();
    expect(screen.getByText("+91 9876543210")).toBeInTheDocument();

    const removeBtn = screen.getByText("Remove");
    fireEvent.click(removeBtn);

    await waitFor(() => {
      expect(actions.postDeleteBlockCallMsg).toHaveBeenCalled();
    });
  });

  test("clicking add number dispatches action", async () => {
    setup({
      aemResponse: mockAemResponse,
      blockedNumbers: [],
      fetchCallsMessagesRes: { loading: false },
    });

    const addBtn = screen.getByText("Add number");
    fireEvent.click(addBtn);

    await waitFor(() => {
      expect(actions.postaddBlockCallMsg).toHaveBeenCalled();
    });
  });

  test("shows loader when loading is true", () => {
    setup({
      aemResponse: mockAemResponse,
      blockedNumbers: [],
      fetchCallsMessagesRes: { loading: true },
    });

    expect(screen.getByTestId("loader")).toBeInTheDocument();
  });

  test("handles API success message", () => {
    setup({
      aemResponse: mockAemResponse,
      blockedNumbers: [],
      postaddBlockCallMsgRes: { status: 200, responseCode: "00" },
      fetchCallsMessagesRes: { loading: false },
    });

    expect(screen.getByText("Number added successfully")).toBeInTheDocument();
  });

  test("handles API error message", () => {
    setup({
      aemResponse: mockAemResponse,
      blockedNumbers: [],
      postaddBlockCallMsgRes: { status: 500, responseCode: "01", message: "Failed" },
      fetchCallsMessagesRes: { loading: false },
    });

    expect(screen.getByText("Failed")).toBeInTheDocument();
  });
});