import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import BlockCallsList from '../callsandmessages';
import '@testing-library/jest-dom';

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn()
}));

jest.mock('../../../../shared/utilities/util', () => ({
  getItemValue: jest.fn((items, key) => {
    if (key === 'callsandMessageTitle') return 'Block calls and messages from up to 5 numbers.';
    if (key === 'TellMeMoreHeader') return 'Tell me more';
    return 'Mocked text';
  }),
  mtnFormat: jest.fn((mtn) => `(${mtn})`),
  getContentFromSection: jest.fn((body, id) => ({
    sections: [{ contents: [{ items: [{ key: 'callsandMessageTitle', value: 'Block calls and messages from up to 5 numbers.' }] }] }]
  })),
  getChannelId: jest.fn(() => 'test-channel-id')
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();

describe('BlockCallsList Component', () => {
  let store;
  let history;

  beforeEach(() => {
    useDispatch.mockReturnValue(mockDispatch);
    localStorage.setItem('mdn', '1234567890');
    history = createMemoryHistory();
    history.push('/call-message-blocking');
  });

  const setup = (selectorData) => {
    store = mockStore({});
    useSelector.mockImplementation(cb => cb({ Detail: selectorData }));

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders title and mtn', () => {
    setup({
      callsMessages: {
        aemResponse: {
          sections: [
            {
              sections: [
                { data: { mtn: '1234567890' } }
              ]
            }
          ]
        }
      },
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    expect(screen.getByText(/Block calls and messages/i)).toBeInTheDocument();
    expect(screen.getByText('(1234567890)')).toBeInTheDocument();
  });

  it('displays blocked number from blockedNumbers', () => {
    setup({
      callsMessages: {
        aemResponse: {
          sections: [{ sections: [{ data: { mtn: '1234567890' } }] }]
        }
      },
      blockedNumbers: [{ phoneNumber: '1112223333' }],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    expect(screen.getByText('1112223333')).toBeInTheDocument();
  });

  it('displays blocked number from addBlockCallMsg', () => {
    setup({
      callsMessages: {
        aemResponse: {
          sections: [{ sections: [{ data: { mtn: '1234567890' } }] }]
        }
      },
      blockedNumbers: [],
      addBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '9999999999' }]
      },
      deleteBlockCallMsg: {},
      isFetching: false
    });

    expect(screen.getByText('9999999999')).toBeInTheDocument();
  });

  it('displays blocked number from deleteBlockCallMsg', () => {
    setup({
      callsMessages: {
        aemResponse: {
          sections: [{ sections: [{ data: { mtn: '1234567890' } }] }]
        }
      },
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '8888888888' }]
      },
      isFetching: false
    });

    expect(screen.getByText('8888888888')).toBeInTheDocument();
  });

  it('disables add number button if 5 numbers blocked', () => {
    const blocked = Array.from({ length: 5 }).map((_, i) => ({ phoneNumber: `${i}` }));
    setup({
      callsMessages: {
        aemResponse: {
          sections: [{ sections: [{ data: { mtn: '1234567890' } }] }]
        }
      },
      blockedNumbers: blocked,
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    expect(screen.getByRole('button', { name: /Add a number/i })).toBeDisabled();
  });

  it('navigates to /viewlimitation when TextLink clicked', () => {
    setup({
      callsMessages: {
        aemResponse: {
          sections: [{ sections: [{ data: { mtn: '1234567890' } }] }]
        }
      },
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    fireEvent.click(screen.getByText(/View Limitations/i));
    expect(history.location.pathname).toBe('/viewlimitation');
  });

  it('navigates to /callsandmessages when Add button clicked', () => {
    setup({
      callsMessages: {
        aemResponse: {
          sections: [{ sections: [{ data: { mtn: '1234567890' } }] }]
        }
      },
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    const addBtn = screen.getByRole('button', { name: /Add a number/i });
    fireEvent.click(addBtn);
    expect(history.location.pathname).toBe('/callsandmessages');
  });

  it('dispatches delete action when X is clicked', () => {
    setup({
      callsMessages: {
        aemResponse: {
          sections: [{ sections: [{ data: { mtn: '1234567890' } }] }]
        }
      },
      blockedNumbers: [{ phoneNumber: '3213213210' }],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    const deleteBtn = screen.getByRole('button', { name: /close/i });
    fireEvent.click(deleteBtn);
    expect(mockDispatch).toHaveBeenCalled();
  });
});