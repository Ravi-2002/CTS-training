it("covers axios.post call inside changeParent", async () => {
  const mockRes = { data: { body: { valid: true } } };
  axios.post.mockResolvedValueOnce(mockRes);

  render(<Devices {...baseProps} />);

  const announce = jest.fn();
  // Simulate a drag end with valid reqObj
  const result = {
    source: { index: 0 },
    destination: { index: 1 },
    draggableId: "id3", // non-SPK device so drag continues
    reason: "DROP",
  };

  await act(async () => {
    // Manually call onDragEnd from context
    const ctx = screen.getByTestId("DevicesTestId").querySelector(
      "[data-rbd-droppable-context-id]"
    );
    ctx.props?.onDragEnd?.(result, { announce });
    jest.runAllTimers();
  });

  // assert axios.post was called
  expect(axios.post).toHaveBeenCalledWith(
    expect.any(String),
    expect.objectContaining({
      moveFrom: expect.any(String),
      moveTo: expect.any(String),
      secondaryDevice: expect.any(String),
    }),
    expect.any(Object)
  );
});