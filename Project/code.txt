// blockCallsList.test.js
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import BlockCallsList from '../callsandmessages';
import '@testing-library/jest-dom';

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn()
}));

jest.mock('../../../../shared/utilities/util', () => ({
  __esModule: true,
  default: {
    getItemValue: jest.fn(() => 'Mocked Title'),
    mtnFormat: jest.fn((mtn) => `(${mtn})`),
    getContentFromSection: jest.fn(() => ({
      sections: [
        {
          contents: [
            {
              items: [
                { key: 'callsandMessageTitle', value: 'Block calls and messages from up to 5 numbers.' }
              ]
            }
          ]
        }
      ]
    }))
  }
}));

jest.mock('../../../../shared/utilities/native', () => ({
  nativeSetTitle: jest.fn()
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();

describe('BlockCallsList', () => {
  let store;
  let history;

  beforeEach(() => {
    localStorage.setItem('mdn', '1234567890');
    history = createMemoryHistory();
    useDispatch.mockReturnValue(mockDispatch);
  });

  const renderComponent = (detailData) => {
    store = mockStore({
      Detail: {
        ...detailData,
        callsMessages: {
          aemResponse: {
            sections: [
              {
                sections: [
                  {
                    data: {
                      mtn: '7703463247'
                    }
                  }
                ]
              }
            ]
          }
        }
      }
    });

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );
  };

  it('renders title and default blocked numbers', () => {
    renderComponent({
      blockedNumbers: [{ phoneNumber: '1112223333' }],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    expect(screen.getByText(/Mocked Title/i)).toBeInTheDocument();
    expect(screen.getByText('1112223333')).toBeInTheDocument();
  });

  it('renders updated list from addBlockCallMsg', () => {
    renderComponent({
      blockedNumbers: [],
      addBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '9999999999' }]
      },
      deleteBlockCallMsg: {},
      isFetching: false
    });

    expect(screen.getByText('9999999999')).toBeInTheDocument();
  });

  it('renders updated list from deleteBlockCallMsg', () => {
    renderComponent({
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '5555555555' }]
      },
      isFetching: false
    });

    expect(screen.getByText('5555555555')).toBeInTheDocument();
  });

  it('disables Add button if 5 numbers exist', () => {
    renderComponent({
      blockedNumbers: [
        { phoneNumber: '1' }, { phoneNumber: '2' }, { phoneNumber: '3' },
        { phoneNumber: '4' }, { phoneNumber: '5' }
      ],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    expect(screen.getByRole('button', { name: /Add a number/i })).toBeDisabled();
  });

  it('navigates to view limitations page', () => {
    renderComponent({
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    fireEvent.click(screen.getByText(/View Limitations/i));
    expect(history.location.pathname).toBe('/viewlimitation');
  });

  it('navigates to add number input page', () => {
    renderComponent({
      blockedNumbers: [],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    fireEvent.click(screen.getByRole('button', { name: /Add a number/i }));
    expect(history.location.pathname).toBe('/callsandmessages');
  });

  it('calls dispatch on X icon click', () => {
    renderComponent({
      blockedNumbers: [{ phoneNumber: '1231231234' }],
      addBlockCallMsg: {},
      deleteBlockCallMsg: {},
      isFetching: false
    });

    const closeBtn = screen.getByRole('button', { name: /close/i });
    fireEvent.click(closeBtn);
    expect(mockDispatch).toHaveBeenCalled();
  });
});