renderPreferenceLink = (singleLink, index) => {
    const { deviceDetailInfoSection } = this.props;
    const isMvm = common.getChannelId() === 'VZW-MFA';

    // Extract page content
    const pageContent = deviceDetailInfoSection?.sections
        ? common.getContentFromSection(deviceDetailInfoSection, 'devicesLandingMainSection')?.sections?.[0]
        : null;

    // Extract page attributes
    const enableSharenameid = common.getItemValue(deviceDetailInfoSection?.pageAttributes, 'enableSharenameid');
    const enableCallFilter = common.getItemValue(deviceDetailInfoSection?.pageAttributes, 'enableCallFilter');
    const enableBlocks = common.getItemValue(deviceDetailInfoSection?.pageAttributes, 'enableBlocks');

    // Extract device details
    const deviceList = pageContent?.data || [];
    const selectedDeviceDetail = deviceList.find(device => device.mtn === this.state.selectedMdn) || {};
    const { preferences, shareNameIDBtnThrottle } = selectedDeviceDetail;

    // Exit early if preference doesn't exist
    if (!preferences?.[singleLink]) return null;

    // Define action mapping
    const actionConditions = {
        shareNameIDBtn: enableSharenameid === 'true' || shareNameIDBtnThrottle,
        blockSpecificServicesBtn: enableBlocks === 'true',
        blockCallsAndMessagesBtn: enableBlocks === 'true',
        manageCallFilterBtn: enableCallFilter === 'true',
    };

    const handleClick = () => {
        const actionKey = common.getActionKey(pageContent?.contents?.[0]?.items, singleLink);
        const clickInfo = this.getOnClickInfo(pageContent, `nsa_${actionKey}`);
        clickInfo?.onclick();
    };

    return (
        <Col key={singleLink} colSizes={{ mobile: 4, desktop: 6, tablet: 6 }}>
            <ListGroup topLine={false} bottomLine={true} surface="light" viewport="desktop">
                <ListGroupItem
                    ariaLabel={common.getItemValue(pageContent?.contents?.[0]?.items, singleLink)}
                    actionElement="none"
                    ariaRole="link"
                    onClick={() => (actionConditions[singleLink] ? handleClick() : handleClick())}
                >
                    <ListGroupItemTitle bold={false}>
                        <ListGroupItemTitleContent>
                            <ItemWrapper>
                                <span>{common.getItemValue(pageContent?.contents?.[0]?.items, singleLink)}</span>
                                <span><Icon name="right-arrow" size="medium" /></span>
                            </ItemWrapper>
                        </ListGroupItemTitleContent>
                    </ListGroupItemTitle>
                </ListGroupItem>
            </ListGroup>
        </Col>
    );
};