const toggle = screen.getByTestId('toggle-Test Service');

// Check if it's initially off
expect(toggle).toHaveAttribute('aria-checked', 'false');

// Simulate toggle
fireEvent.click(toggle);

// Simulate Redux update with confirmServices.responseCode === '00'
useSelector.mockImplementation((cb) =>
  cb({
    Home: {
      services: initialServices,
      isFetching: false,
      serviceFail: false,
      confirmServices: {
        responseInfo: { responseCode: '00' }
      },
      servicesError: {},
    },
  })
);

// Re-render
render(
  <Provider store={store}>
    <Router history={history}>
      <BlockServices />
    </Router>
  </Provider>
);

// Now should be on
expect(screen.getByTestId('toggle-Test Service')).toHaveAttribute('aria-checked', 'true');