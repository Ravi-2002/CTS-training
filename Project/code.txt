renderPreferenceLink = (singleLink, index) => {
    const { deviceDetailInfoSection } = this.props;
    const isMvm = common.getChannelId() === 'VZW-MFA';

    // Extract relevant data safely
    const pageContent = deviceDetailInfoSection?.sections
        ? common.getContentFromSection(deviceDetailInfoSection, 'devicesLandingMainSection')?.sections?.[0]
        : null;

    const pageAttributes = deviceDetailInfoSection?.pageAttributes;
    const enableSharenameid = common.getItemValue(pageContent?.pageAttributes, 'enableSharenameid');
    const enableCallFilter = common.getItemValue(pageContent?.pageAttributes, 'enableCallFilter');
    const enableBlocks = common.getItemValue(pageContent?.pageAttributes, 'enableBlocks');

    const pageItems = pageContent?.contents?.[0]?.items;
    const deviceList = pageContent?.data || [];

    // Get selected device details
    const selectedDeviceDetail = deviceList.find(device => device.mtn === this.state.selectedMdn) || {};
    const { preferences, shareNameIDBtnThrottle } = selectedDeviceDetail;

    // Exit early if preference does not exist
    if (!preferences?.[singleLink]) return null;

    // Handle click event
    const handleClick = () => {
        let actionKey = common.getActionKey(pageItems, singleLink);
        let nsaActionKey = `nsa_${actionKey}`;

        let clickInfo = this.getOnClickInfo(pageContent, isMvm ? nsaActionKey : actionKey);
        
        // If NSA action doesn't exist, use normal action key
        if (!clickInfo?.onclick && isMvm) {
            clickInfo = this.getOnClickInfo(pageContent, actionKey);
        }

        clickInfo?.onclick();
    };

    // Define allowed actions
    const allowedActions = {
        shareNameIDBtn: enableSharenameid === 'true' || selectedDeviceDetail?.shareNameIDBtnThrottle,
        blockSpecificServicesBtn: enableBlocks === 'true',
        blockCallsAndMessagesBtn: enableBlocks === 'true',
        manageCallFilterBtn: enableCallFilter === 'true',
    };

    return (
        <Col key={singleLink} colSizes={{ mobile: 4, desktop: 6, tablet: 6 }}>
            <ListGroup topLine={false} bottomLine={true} surface="light" viewport="desktop">
                <ListGroupItem
                    ariaLabel={common.getItemValue(pageItems, singleLink)}
                    actionElement="none"
                    ariaRole="link"
                    onClick={allowedActions[singleLink] ? handleClick : null} // Only call if action is allowed
                >
                    <ListGroupItemTitle bold={false}>
                        <ListGroupItemTitleContent>
                            <ItemWrapper>
                                <span>{common.getItemValue(pageItems, singleLink)}</span>
                                <span><Icon name="right-arrow" size="medium" /></span>
                            </ItemWrapper>
                        </ListGroupItemTitleContent>
                    </ListGroupItemTitle>
                </ListGroupItem>
            </ListGroup>
        </Col>
    );
};