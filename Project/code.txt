import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import '@testing-library/jest-dom';

import BlockServices from '../../components/BlockServices';

// Safe dispatch and selector mock
jest.mock('react-redux', () => {
  const ActualRedux = jest.requireActual('react-redux');
  return {
    ...ActualRedux,
    useDispatch: () => jest.fn(),
    useSelector: jest.fn()
  };
});

import { useSelector } from 'react-redux';

const mockStore = configureStore([]);

describe('BlockServices', () => {
  let store, history;

  const baseState = {
    Home: {
      services: {
        Category1: [
          { serviceName: 'Service A', sfoEnabled: 'Y', sfoCode: '001' },
          { serviceName: 'Service B', sfoEnabled: 'N', sfoCode: '002' }
        ]
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {},
      servicesError: {}
    }
  };

  const setup = (overrideState = {}) => {
    const state = { Home: { ...baseState.Home, ...overrideState } };
    store = mockStore(state);
    history = createMemoryHistory();
    history.push('/block-services?mdn=1234567890');

    useSelector.mockImplementation((selector) => selector({ Home: state.Home }));

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockServices />
        </Router>
      </Provider>
    );

    return { store, history };
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders services and toggles', () => {
    setup();
    expect(screen.getByText(/Be in charge of who does what/i)).toBeInTheDocument();
    expect(screen.getByText('Service A')).toBeInTheDocument();
    expect(screen.getByText('Service B')).toBeInTheDocument();
    expect(screen.getAllByRole('switch')).toHaveLength(2);
  });

  it('navigates to service detail on Tell me more click', () => {
    const { history } = setup();
    fireEvent.click(screen.getAllByText(/Tell me more/i)[0]);
    expect(history.location.pathname).toContain('/service-details/Service%20A');
  });

  it('shows success notification when responseCode is 00', () => {
    setup({
      confirmServices: {
        responseInfo: { responseCode: '00' }
      }
    });
    expect(screen.getByText(/Service updated successfully/i)).toBeInTheDocument();
  });

  it('shows error when responseCode is 99', () => {
    setup({
      servicesError: {
        responseInfo: { responseCode: '99' },
        libErrorInfo: {
          internalErrors: [{ errorMessage: 'Sample error' }]
        }
      }
    });
    expect(screen.getByText(/Error/i)).toBeInTheDocument();
  });

  it('shows failure message if service load fails', () => {
    setup({ serviceFail: true });
    expect(screen.getByText(/Failed to fetch services/i)).toBeInTheDocument();
  });
});