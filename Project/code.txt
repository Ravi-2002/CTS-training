// BlockServices.test.js

import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { Provider } from "react-redux";
import { createStore, applyMiddleware } from "redux";
import thunk from "redux-thunk";
import BlockServices from "./BlockServices"; // Import your BlockServices component
import rootReducer from "../../reducers"; // Adjust this according to your project

// Mock Redux store
const store = createStore(rootReducer, applyMiddleware(thunk));

jest.mock("../../actions/fetchServices", () => ({
  getServices: jest.fn(),
  postServices: jest.fn(),
}));

jest.mock("../blocksEmailDomains/BSEmailDomains", () => () => <div>Mocked BSEmailDomains Component</div>);

describe("BlockServices Component", () => {
  const mockProps = {
    selectedAccordian: "BS",
    selectedDevice: {
      encryptedMtn: "1234567890",
    },
    services: {
      "Emails & domains": {
        isExpand: false,
        data: [
          { sfoCode: "001", serviceName: "Email Filtering", sfoEnabled: "Y", shortDescription: "Short description", longDescription: "Long description" },
        ],
      },
    },
    serviceStatus: {
      responseInfo: { responseCode: "0" },
    },
    isFetching: false,
    failServices: null,
    confirmServices: null,
    actions: {
      getServices: jest.fn(),
      postServices: jest.fn(),
    },
  };

  it("renders BlockServices component", () => {
    render(
      <Provider store={store}>
        <BlockServices {...mockProps} />
      </Provider>
    );

    // Check if the main header is rendered
    expect(screen.getByText("Block services")).toBeInTheDocument();
  });

  it("toggles service on click", async () => {
    render(
      <Provider store={store}>
        <BlockServices {...mockProps} />
      </Provider>
    );

    const serviceName = screen.getByText("Email Filtering");
    const checkbox = screen.getByRole("checkbox");

    // Ensure the checkbox is initially checked
    expect(checkbox).toBeChecked();

    // Simulate checkbox click
    fireEvent.click(checkbox);

    await waitFor(() => {
      // Check if postServices action has been called
      expect(mockProps.actions.postServices).toHaveBeenCalledTimes(1);
      // Check if the service state is toggled correctly (the checkbox should now be unchecked)
      expect(checkbox).not.toBeChecked();
    });
  });

  it("displays loader when fetching is true", () => {
    render(
      <Provider store={store}>
        <BlockServices {...{ ...mockProps, isFetching: true }} />
      </Provider>
    );

    // Ensure loader is visible when fetching is true
    expect(screen.getByRole("loader")).toBeInTheDocument();
  });

  it("renders service details modal", async () => {
    render(
      <Provider store={store}>
        <BlockServices {...mockProps} />
      </Provider>
    );

    const viewDetailsLink = screen.getByText("View More Details");

    // Simulate clicking the 'View More Details' link
    fireEvent.click(viewDetailsLink);

    // Wait for modal to appear
    await waitFor(() => {
      expect(screen.getByText("Email Filtering")).toBeInTheDocument();
      expect(screen.getByText("Short description")).toBeInTheDocument();
      expect(screen.getByText("Long description")).toBeInTheDocument();
    });
  });

  it("expands and collapses sub-services", () => {
    render(
      <Provider store={store}>
        <BlockServices {...mockProps} />
      </Provider>
    );

    // Initially, the service should not be expanded
    expect(screen.queryByText("Email Filtering")).toHaveClass("accordion__body--hidden");

    // Click to expand the service
    fireEvent.click(screen.getByText("Emails & domains"));

    // Check if service expanded
    expect(screen.queryByText("Email Filtering")).not.toHaveClass("accordion__body--hidden");
  });
});