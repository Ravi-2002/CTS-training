import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Title, Body } from "@vds/typography";
import { Button, TextLink } from "@vds/buttons";
import { ButtonIcon} from "@vds/button-icons";
import { Icon } from "@vds/icons";
import { Loader } from "@vds/loaders";
import styled from "styled-components";
import {
  getCallsMessages,
  postaddBlockCallMsg,
  postDeleteBlockCallMsg,
} from "../actions/fetchCallsMessages";
import { Line } from "@vds/lines";
import { ListGroup } from "@vds/lists";
import { nativeSetTitle } from "../../../../shared/utilities/native";
import common from "../../../../shared/utilities/util";

const BlockCallsList = ({ history }) => {
  useEffect(() => {
    nativeSetTitle('Block Calls & Messages',false);
  },[]);
  const dispatch = useDispatch();
  const [blockedList, setBlockedList] = useState([]);
  const mdn = localStorage.getItem('mdn');
  const {
    blockedNumbers,
    addBlockCallMsg,
    deleteBlockCallMsg,
    isFetching,
  } = useSelector((state) => state.Detail);
  const Content = useSelector((state)=>state.Detail.callsMessages.aemResponse)
  const mtn = Content.sections[0].sections[0].data.mtn;
  let pageContent;
    if (Content && Content?.sections[0]) {
      pageContent = common.getContentFromSection(Content, 'devicesBlocksMainSection');
      pageContent = pageContent.sections[0];
    }
  let pageItems = pageContent && pageContent.contents && pageContent.contents[0].items;
  useEffect(() => {
    dispatch(getCallsMessages(mdn));
  }, [dispatch]);

  useEffect(() => {
    if (addBlockCallMsg?.blockedPhoneNumbers) {
      setBlockedList(addBlockCallMsg.blockedPhoneNumbers);
    }
    else if(blockedNumbers){
      setBlockedList(blockedNumbers)
    }
  }, [addBlockCallMsg,blockedNumbers]);

  useEffect(() => {
    if (deleteBlockCallMsg?.blockedPhoneNumbers) {
      setBlockedList(deleteBlockCallMsg.blockedPhoneNumbers);
    }
  }, [deleteBlockCallMsg]);

  

  const handleRemove = (num) => {
    let payload = {
      mtn: mdn,
      blockNumber: num,
      oldPhoneNumber: num,
      memo: "",
      expiredPhoneNumber: "",
      blockedNumbers: [],
      applyAll: false,
      onlyMemo: false
    }
    dispatch(postDeleteBlockCallMsg(payload));
  };

  return (
    <PageWrapper>
      <Loader active={isFetching} fullscreen />
      <Title size="large" bold>{common.getItemValue(pageItems,"callsandMessageTitle")}</Title>
      <MdnWrapper>
      <Body size='large'>{common.mtnFormat(mtn)}</Body>
      </MdnWrapper>
      <TextWrapper>
        <Body bold size='large'>You are blocking {blockedList.length} of 5 numbers.</Body>
      </TextWrapper>
      {blockedList.map((item, idx) => (
          <ListGroupWrapper key={idx}>
          <ListGroup>
            <RemoveWrapper>
              <Body size="large">{item.phoneNumber}</Body>
              <ButtonIcon
                kind="ghost"
                size="small"
                onClick={() => handleRemove(item.phoneNumber)}
                renderIcon={(props) => <Icon name="close" {...props} />}
              />
            </RemoveWrapper>
            <Line type="secondary" surface="light" />
          </ListGroup>
        </ListGroupWrapper>
      ))}
      
    <LimitationWrapper>
      <Body>
        There is no charge to block.{" "}
        <TextLink
          type="standAlone"
          surface="light"
          onClick={() => history.push("/viewlimitation")}
        >
          View Limitations
        </TextLink>
      </Body>
      </LimitationWrapper>
          <ButtonWrapper>
            <Button disabled={blockedList.length>=5} 
                onClick={() => 
                history.push({
                  pathname: "/callsandMessages",
                  state: { allowInput: true, mtn: mdn },
                })}>
              Add a number
            </Button>
          </ButtonWrapper>
    </PageWrapper>
  );
};

const PageWrapper = styled.div` padding: 20px; `;
const MdnWrapper = styled.div` padding-top: 7px; padding-bottom:7px`;
const LimitationWrapper = styled.div` padding-top: 7px; padding-bottom:7px; display: flex; justify-content: center;`;
const ButtonWrapper = styled.div` display: flex; justify-content: center; padding: 20px 0; `;
const TextWrapper = styled.div` margin-bottom: 1rem; display: flex; justify-content: center; padding-top:30px; padding-bottom:20px `;
const ListGroupWrapper = styled.div` padding-bottom: 10px; `;
const RemoveWrapper = styled.div` display: flex; justify-content: space-between; align-items: center; `;

export default BlockCallsList;
