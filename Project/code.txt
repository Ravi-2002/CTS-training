import React from 'react';
import '../../../../../config/jest/test-setup';
import {
  act, render, screen, fireEvent,
  waitFor,
} from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import { Provider } from 'react-redux';
import { getHttpClientRequest } from '@vz/react-util';
import { persistStore } from 'redux-persist';
import { PersistGate } from 'redux-persist/integration/react';
import configureStore from '../../../../shared/store/configureStore';
import rootReducer from '../../reducers';
import DeviceDetail from '../components/index';
import {
  deviceDetail, deviceDetail5, deviceDetailNew,
} from './mockResponse';
import * as actions from '../../home/actions';
import common from '../../../../shared/utilities/util';

const store = configureStore(rootReducer);
const persistor = persistStore(store);

const data = {
  mtn: '8049557864',
  displayMtn: '804-955-7864',
  encryptedMtn: '7mRmqweZh69k4RQaZu6xHA%3D%3D',
  modelName: 'Galaxy J3 Eclipse in Black',
  nickName: 'EDIT NICKNAME',
  simId: '89148000002444998436',
  encryptedSimId: 'ZAEiJc%2B0MTnLUt2QZTs1GmRXgDNxzZN7',
  simType: 'ICC',
  upgradeEligible: true,
  userRole: 'Manager',
  device4G: false,
  device5GE: false,
  device5GA: false,
  smartPhone: true,
  basicPhone: false,
  deviceId: '356352080020741',
  paymentInfo: {
    hasPayOffBalance: false,
    promoDevice: false,
    upgradeEligible: false,
  },
  preferences: {
    shareNameIDBtn: true,
    manageCallForwardingBtn: true,
    blockSpecificServicesBtn: true,
    blockCallsAndMessagesBtn: true,
    manageCallFilterBtn: true,
    manageVoicemailPasswordBtn: true,
    backupContentToVerizonCloudBtn: true,
  },
  planUsageInfo: {
    planName: '10GB',
  },
  deviceManagement: {
    tradeInBtn: true,
    activateOrSwitchDeviceBtn: true,
    upgradeDeviceBtn: true,
    changeMobileNumberBtn: true,
    transferYourServiceBtn: true,
    manageConnectedDevicesBtn: false,
    suspendOrReconnectServiceBtn: true,
    numberLockBtn: true,
    numberTransferPinBtn: true,
    disconnectDeviceBtn: true,
    pinandPersonalUnblockingKeyBtn: true,
    manageNumberShareBtn: true,
    checkNetworkCompatibiltyText: false,
    viewAddOnsBtn: true,
  },
  troubleshootAndSupport: {
    troubleshootBtn: true,
    techCoachSupportBtn: true,
    runHealthCheckBtn: false,
    transferContentBetweenPhonesBtn: false,
    launchSecurityDashboardBtn: false,
  },
  images: {
    defaultImage: 'https://ss7.vzw.com/is/image/VerizonWireless/samsung-galaxy-j3-eclipse-black',
    largeImage: 'https://ss7.vzw.com/is/image/VerizonWireless/samsung-galaxy-j3-eclipse-black?$device-lg$',
    mediumImage: 'https://ss7.vzw.com/is/image/VerizonWireless/samsung-galaxy-j3-eclipse-black?$device-med$',
    miniImage: 'https://ss7.vzw.com/is/image/VerizonWireless/samsung-galaxy-j3-eclipse-black?$device-mini$',
    thumbImage: 'https://ss7.vzw.com/is/image/VerizonWireless/samsung-galaxy-j3-eclipse-black?$device-thumb$',
  },
  displayDeviceCategory: '4G Smartphone',
  esim: false,
  psim: true,
  router: true,
  dynamicData: {
    deviceName: 'Galaxy J3 Eclipse in Black',
    encMdn: '7mRmqweZh69k4RQaZu6xHA==',
    nsaHost: 'https://www.verizon.com',
  },
  pendingLineChange: false,
  deviceCategory: 'phone',
  mtnStatus: 'A',
  isMtnSuspended: false,
  openEnrollmentPeriod: 'Y',
  deviceProtectionEnrolled: 'N',
  productDisplayName: 'Galaxy J3 Eclipse',
};

jest.mock('@vz/react-util', () => ({
  ...jest.requireActual('@vz/react-util'),
  getHttpClientRequest: jest.fn(),
}));

const props = {
  selectedDevice: {
    pearlTrialFlow: true,
    mtn: '2144707276',
  },
  match: {
    params: {
    },
  },
};
// const props1 = {
//   selectedDevice: {
//     pearlTrialFlow: true,
//     mtn: '3058073905',
//   },
//   match: {
//     params: {
//     },
//   },
// };

describe('<DeviceDetail />', () => {
  window.VZTAG_IS_READY = 'true';
  beforeEach(async () => {
    getHttpClientRequest.mockImplementation(() => Promise.resolve({ status: 200, data: { ...deviceDetailNew } }));

    await act(async () => render(
      <Provider store={store}>
        <PersistGate loading={null} persistor={persistor}>
          <DeviceDetail />
        </PersistGate>
      </Provider>
    ));
  });

  
  test("pearlTrialBtnTestId test", async() => {
    jest.setTimeout('10000');
    const manageBtn = screen.getByTestId(`pearlTrialBtnTestId`);
    expect(manageBtn).toBeInTheDocument();
    fireEvent.click(manageBtn);
    await waitFor(() => {
      jest.setTimeout("10000")
      const sonToggle = screen.getAllByTestId("buttonIcon")[0]
      expect(sonToggle).toBeInTheDocument()
      fireEvent.click(sonToggle)
      const sonToggle2 = screen.getAllByTestId("buttonIcon")[1]
      expect(sonToggle2).toBeInTheDocument()
      fireEvent.click(sonToggle2)
      const sonToggle3 = screen.getAllByTestId("buttonIcon")[2]
      expect(sonToggle3).toBeInTheDocument()
      fireEvent.click(sonToggle3)
      const sonToggle4 = screen.getAllByTestId("buttonIcon")[3]
      expect(sonToggle4).toBeInTheDocument()
      fireEvent.click(sonToggle4)
      const sonToggle5 = screen.getAllByTestId("buttonIcon")[4]
      expect(sonToggle5).toBeInTheDocument()
      fireEvent.click(sonToggle5)
      const sonToggle6 = screen.getAllByTestId("buttonIcon")[5]
      expect(sonToggle6).toBeInTheDocument()
      fireEvent.click(sonToggle6)
      const sonToggle7 = screen.getAllByTestId("buttonIcon")[6]
      expect(sonToggle7).toBeInTheDocument()
      fireEvent.click(sonToggle7)
      const sonToggle8 = screen.getAllByTestId("buttonIcon")[7]
      expect(sonToggle8).toBeInTheDocument()
      fireEvent.click(sonToggle8)
      const sonToggle9 = screen.getAllByTestId("buttonIcon")[8]
      expect(sonToggle9).toBeInTheDocument()
      fireEvent.click(sonToggle9)
      const sonToggle10 = screen.getAllByTestId("buttonIcon")[9]
      expect(sonToggle10).toBeInTheDocument()
      fireEvent.click(sonToggle10)
      const sonToggle11 = screen.getAllByTestId("buttonIcon")[10]
      expect(sonToggle11).toBeInTheDocument()
      fireEvent.click(sonToggle11)
      const sonToggle12 = screen.getAllByTestId("buttonIcon")[11]
      expect(sonToggle12).toBeInTheDocument()
      fireEvent.click(sonToggle12)
      const sonToggle13 = screen.getAllByTestId("buttonIcon")[12]
      expect(sonToggle13).toBeInTheDocument()
      fireEvent.click(sonToggle13)
      const sonToggle14 = screen.getAllByTestId("buttonIcon")[13]
      expect(sonToggle14).toBeInTheDocument()
      fireEvent.click(sonToggle14)
      const sonToggle15 = screen.getAllByTestId("buttonIcon")[14]
      expect(sonToggle15).toBeInTheDocument()
      fireEvent.click(sonToggle15)
      const sonToggle16 = screen.getAllByTestId("buttonIcon")[15]
      expect(sonToggle16).toBeInTheDocument()
      fireEvent.click(sonToggle16)
      const sonToggle17 = screen.getAllByTestId("buttonIcon")[16]
      expect(sonToggle17).toBeInTheDocument()
      fireEvent.click(sonToggle17)
      const sonToggle18 = screen.getAllByTestId("buttonIcon")[17]
      expect(sonToggle18).toBeInTheDocument()
      fireEvent.click(sonToggle18)
      const sonToggle19 = screen.getAllByTestId("buttonIcon")[18]
      expect(sonToggle19).toBeInTheDocument()
      fireEvent.click(sonToggle19)  
    })  
});
  test('pearlTrialPlanBtn test', () => {
    jest.setTimeout('10000');
    const manageBtn = screen.getByTestId('pearlTrialPlanBtn');
    expect(manageBtn).toBeInTheDocument();
    fireEvent.click(manageBtn);
  });
});

describe('<DeviceDetail />', () => {
  window.VZTAG_IS_READY = 'true';
  beforeEach(async () => {
    getHttpClientRequest.mockImplementation(() => Promise.resolve({ status: 200, data: { ...deviceDetail } }));

    await act(async () => render(
      <Provider store={store}>
        <PersistGate loading={null} persistor={persistor}>
          <DeviceDetail {...props} />
        </PersistGate>
      </Provider>
    ));
  });

  test('it should mount', () => {
    const doc = screen.getByTestId('DeviceDetailTestId');
    expect(doc).toBeInTheDocument();
  });

  test('learnMore btn test', () => {
    jest.setTimeout('10000');
    const enrollBtn = screen.getByTestId('learnMore-testid');
    expect(enrollBtn).toBeInTheDocument();
    fireEvent.click(enrollBtn);
  });

  test('showAllDeviceTestId test', () => {
    jest.setTimeout('10000');
    fireEvent.click(screen.getByTestId('showAllDeviceTestId'));
  });
  test('editNickNameTestId test', () => {
    jest.setTimeout('10000');
    waitFor(() => {
      fireEvent.click(screen.getByTestId('editNickNameTestId'));
    });
  });
  test('returnAndUpgradeBtnTestId test', () => {
    jest.setTimeout('10000');
    fireEvent.click(screen.getByTestId('returnAndUpgradeBtnTestId'));
  });
  // test("suspendOrReconnectServiceBtnTestId test", () => {
  //     jest.setTimeout('10000');
  //     fireEvent.click(screen.getByTestId(`suspendOrReconnectServiceBtnTestId`));
  // })
  test('managePlanBtnTestId test', () => {
    jest.setTimeout('10000');
    const manageBtn = screen.getByTestId('managePlanBtnTestId');
    expect(manageBtn).toBeInTheDocument();
    fireEvent.click(manageBtn);
  });
  test('reviewUsageBtnTestId test', () => {
    jest.setTimeout('10000');
    const manageBtn = screen.getByTestId('reviewUsageBtnTestId');
    expect(manageBtn).toBeInTheDocument();
    fireEvent.click(manageBtn);
  });
  test('reviewDetailLinkTestId test', () => {
    jest.setTimeout('10000');
    fireEvent.click(screen.getByTestId('reviewDetailLinkTestId'));
  });
  test('deviceListTestId test', () => {
    jest.setTimeout('10000');
    jest.spyOn(common, 'getChannelId').mockReturnValue('VZW-MFA');
    fireEvent.change(screen.getByTestId('deviceListTestId'));
    store.dispatch(actions.setSelectedDevice(data));
  });
});

describe('<DeviceDetail /> deviceDetail5', () => {
  window.VZTAG_IS_READY = 'true';
  beforeEach(async () => {
    getHttpClientRequest.mockImplementation(() => Promise.resolve({ status: 200, data: { ...deviceDetail5 } }));

    await act(async () => render(
      <Provider store={store}>
        <PersistGate loading={null} persistor={persistor}>
          <DeviceDetail {...props} selectedDevice={props?.selectedDevice} />
        </PersistGate>
      </Provider>
    ));
  });

  test('manageTextTestId test', () => {
    waitFor(() => {
      fireEvent.click(screen.getAllByText('Manage')[0]);
    });
  });
});

describe('<DeviceDetail /> secondNumberDeviceDetail', () => {
  window.VZTAG_IS_READY = 'true';
  beforeEach(async () => {
    getHttpClientRequest.mockImplementation(() => Promise.resolve({ status: 200, data: { ...deviceDetail } }));
    common.getChannelId = () => 'VZW-MFA';
    await act(async () => render(
      <Provider store={store}>
        <PersistGate loading={null} persistor={persistor}>
          <DeviceDetail />
        </PersistGate>
      </Provider>
    ));
  });

  test('manageTextTestId test', () => {
    waitFor(() => {
      fireEvent.click(screen.getAllByText('Manage')[0]);
    });
  });
});
