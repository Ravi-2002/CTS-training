import React, { lazy, Fragment, Suspense } from "react";
import { Switch, Route } from "react-router-dom";
import styled from "styled-components";

import Spinner from './../../shared/components/Loader/spinner';
import common from "./../../shared/utilities/util";

const Home = lazy(()=> import("./home/components/index"));
const DeviceDetail = lazy(()=> import("./deviceDetail/components/index"));
const ServiceDetails = lazy(()=> import("./home/components/servicedetails"));
const ViewLimitations = lazy(()=> import("./deviceDetail/components/ViewLimitation"));
const Callsmessages = lazy(()=> import("./deviceDetail/components/callsandmessages"));


import { GlobalHistory } from "./history";
import { TransitionGroup, CSSTransition } from "react-transition-group";

const loadingImg = (<Spinner />);
const pageRoutes = [
  "interstitial",
  "landing",
  "suspendoptions",
  "confirmation"
];

const TransitionWrapper = styled(TransitionGroup)`
 height: 100%;
 width: 100%; 
 display: flex;
 flex-direction: column;
 overflow: hidden;
 `;


const TransitionContainer = styled.div`
  height: 100%;
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  overflow: auto;
  margin-right: 0%;
  // padding: 0px 20px;
`;
let oldClass = "";
const nativePlatform = common.getOsType(); //"ios";

function getPageDirection(location) {
  if (location && !reactGlobals.transitionFallback) {
    const pageDirection = location.state && location.state.transition;
    return pageDirection
      ? `${nativePlatform} ${pageDirection}`
      : `${nativePlatform} backWard`;
  }
  return null;
}
/* istanbul ignore next */
function getNewUrl(location) {
  if (location && location.pathname) {
    const locationArray = location.pathname.split("/");
    if (locationArray && locationArray.length > 2) {
      return `${locationArray[1]}/${locationArray[2]}`;
    }
    return locationArray[1];
  }
  return null;
}

function getUrlIndex(url, pageRoutes) {
  return pageRoutes.findIndex(item => item.toLowerCase() === url.toLowerCase());
}

function getClassBasedOnUrlComparison(newUrl, _currentPageUrl, pageRoutes) {
  const newUrlIndex = getUrlIndex(newUrl, pageRoutes);
  const oldUrlIndex = getUrlIndex(_currentPageUrl, pageRoutes);

  if (oldUrlIndex === newUrlIndex && oldClass !== "") {
    return `${nativePlatform} ${oldClass}`;
  }

  if (oldUrlIndex <= newUrlIndex) {
    oldClass = "forWard";
    return `${nativePlatform} forWard`;
  }

  oldClass = "backWard";
  return `${nativePlatform} backWard`;
}

function getClassName(location) {
  const pageDirection = getPageDirection(location);
  if (pageDirection) return pageDirection;

  if (
    location &&
    location.pathname &&
    !(typeof _currentPageUrl === "undefined" || _currentPageUrl === null) &&
    _currentPageUrl
  ) {
    const newUrl = getNewUrl(location);
    if (newUrl) {
      return getClassBasedOnUrlComparison(newUrl, _currentPageUrl, pageRoutes);
    }
  }

  return `${nativePlatform} forWard`;
}
const childFactoryCreator = (classNames) => (child) =>
  React.cloneElement(child, {
    classNames,
  });

const isMVM = common.getChannelId() === "VZW-MFA";

function renderRoutes(location) {
  const className = `${getClassName(location)} pageSlider`;

  return (
    <TransitionWrapper childFactory={childFactoryCreator(className)}>
      <CSSTransition
        id="csstrans"
        name="csstrans"
        key={location.pathname}
        timeout={isMVM ? 500 : 0}
        classNames={className}
        mountOnEnter={true}
        unmountOnExit={true}
      >
        <TransitionContainer>
          <GlobalHistory />
          <Suspense fallback={loadingImg}>
            <Switch location={location}>
              <Route exact path="/blockService" component={Home} />
              <Route
                exact
                path="/service-details/:serviceName"
                component={ServiceDetails}
              />
              <Route
                exact
                path="/call-message-blocking"
                component={Callsmessages}
              />
              <Route
                exact
                path="/callsandMessages"
                component={DeviceDetail}
              />
              <Route
                exact
                path="/viewlimitation"
                component={ViewLimitations}
              />
            </Switch>
          </Suspense>
        </TransitionContainer>
      </CSSTransition>
    </TransitionWrapper>
  );
}

class Routes extends React.Component {
  render() {
    return (
      <Fragment>
        <Route render={({ location }) => renderRoutes(location)} />
      </Fragment>
    );
  }
}

export default Routes;
