// DashboardHome.test.js
/**
 * Single-file comprehensive test for DashboardHome component.
 * - This file heavily mocks external modules used by the component.
 * - It renders the component in multiple states to exercise branches, methods, lifecycle hooks.
 *
 * Adjust the import path for DashboardHome below to match your project location.
 */

import React from 'react';
import { render, fireEvent, act } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';

// ----- MOCKS FOR EXTERNAL DEPENDENCIES -----
jest.mock('react-redux', () => {
  return {
    connect: () => (component) => component,
  };
});
jest.mock('redux', () => ({
  bindActionCreators: (actions, dispatch) => actions,
}));

// Mock styling & heavy libs as simple placeholders
jest.mock('react-circular-progressbar', () => ({
  CircularProgressbarWithChildren: ({ children }) => <div data-testid="circular">{children}</div>,
  buildStyles: () => ({}),
}));
jest.mock('./RadialSeparators', () => () => <div data-testid="radial" />);
jest.mock('./tourSection', () => ({ children }) => <div data-testid="tour">{children}</div>);
jest.mock('./tourAnimation', () => ({
  pop: 'pop',
  fadeIn: 'fadeIn',
  barBounce: 'barBounce'
}));
jest.mock('../Loader', () => () => <div data-testid="loaderpage">loader</div>);
jest.mock('@vds/loaders', () => ({ Loader: () => <div data-testid="loader">loader</div> }));
jest.mock('@vds/icons', () => ({ default: ({ name }) => <span data-testid={`icon-${name}`}>{name}</span> }));
jest.mock('../../shared/components/Typography', () => ({
  Title: ({ children, ...p }) => <div data-testid="title">{children}</div>,
  Body: ({ children }) => <div data-testid="body">{children}</div>,
  Micro: ({ children, ...p }) => <span data-testid="micro">{children}</span>
}));
jest.mock('@vds/buttons', () => ({ Button: ({ children, ...p }) => <button {...p}>{children}</button>, TextLink: ({ children, ...p }) => <a {...p}>{children}</a> }));
jest.mock('@vds3/buttons', () => ({ ButtonGroup: ({ children }) => <div>{children}</div> }));
jest.mock('react-bootstrap', () => ({
  Carousel: ({ children, ...p }) => <div data-testid="carousel">{children}</div>,
  CarouselItem: ({ children }) => <div>{children}</div>
}));
jest.mock('react-bootstrap/ProgressBar', () => ({ __esModule: true, default: ({ now }) => <div data-testid="progress">{now}</div> }));
jest.mock('@vds/utilities', () => ({ VDSManager: ({ children }) => <div>{children}</div> }));
jest.mock('../../shared/utilities/util', () => ({
  getQueryParams: () => ({ selectedMDN: '98765' }),
}));
jest.mock('../../shared/services/externalServiceCall', () => ({
  postToKafkaCall: jest.fn(),
  feedbackNBXCall: jest.fn()
}));
jest.mock('../../../shared/Native/native', () => ({
  updateAppPageTitle: jest.fn(),
  updateTabBar: jest.fn(),
  openUrlCTA: jest.fn(),
  openNativePage: jest.fn(),
  openNativePageWithParams: jest.fn(),
  openNativePageWithRequestParams: jest.fn(),
  getJSBridgeDetails: jest.fn(),
  openChatWithUs: jest.fn(),
  openChatWithSecurityAdvisor: jest.fn(),
  updateNavigation: jest.fn(),
}));
jest.mock('../../Tagging/taggingScripts', () => ({
  dispatchPageView: jest.fn(),
  dispatchOpenView: jest.fn(),
  dispatchCloseView: jest.fn(),
}));
jest.mock('./actions', () => ({
  refreshDashboardHomeInfo: jest.fn(() => Promise.resolve({})),
}));

// Mock constants used in code
jest.mock('../../shared/constants/constants', () => ({
  healthCheckLandingUrl: '/health/',
  securityDashboardLandingUrl: '/security/',
  selfAssessmentLandingUrl: '/self/',
  twoChoiceUrl: '/two/',
  multiChoiceUrl: '/multi/'
}));

// ----- IMPORT THE COMPONENT (connected is mocked to return raw class) -----
const DashboardHome = require('./Untitled document (2).txt').default; // adjust to match where you put the component

// ----- BEGIN TESTS -----
describe('DashboardHome - comprehensive single test file', () => {

  let baseProps;

  beforeEach(() => {
    // reset all timers and mocks
    jest.useFakeTimers();
    jest.clearAllMocks();

    // Minimal content/data shape to exercise many branches
    const content = {
      homePageHeader: 'Home Header',
      ratingLabel: 'Rating Label',
      ratingLinkText: 'Rating Link',
      securityRating: 'SECURITY',
      securityRatingMessage: 'Keep safe',
      recommendations: [
        {
          recommendationLabel: 'Rec1',
          recommendationText: 'Text1',
          recommendationLogo: '/logo1',
          ctaLabel: 'CTA1',
          templateId: 'TID_TITLE_MESSAGE_WITH_OPEN_URL_CTA',
          androidAppURL: 'app://a',
          iosAppURL: 'app://i',
          androidBrowserURL: 'https://a',
          iosBrowserURL: 'https://i'
        },
        {
          recommendationLabel: 'Rec2',
          recommendationText: 'Text2',
          recommendationLogo: '/logo2',
          ctaLabel: '',
          templateId: 'TID_TITLE_MESSAGE_WITH_OPEN_NATIVE_PAGE',
          productGroupId: 'pg1',
          router: 'nativeRouter'
        },
        {
          recommendationLabel: 'Rec3',
          recommendationText: 'Text3',
          recommendationLogo: '/logo3',
          ctaLabel: 'CTA3',
          templateId: 'TID_TITLE_MESSAGE_OPEN_NSA_PAGE',
          router: 'router3'
        }
      ],
      moreButtonText: 'More',
      updateRatingProgressLabel: 'Updating...',
      phishingCardImageUrl: '/phish.png',
      phishingCardHeader: 'Phish',
      phishingCardText: 'Phish text',
      malwareCardImageUrl: '/mal.png',
      malwareCardHeader: 'Malware',
      malwareCardText: 'Mal text',
      scamCardImageUrl: '/scam.png',
      scamCardHeader: 'Scam',
      scamCardText: 'Scam text',
      cardCTAText: 'Take quiz',
      tourSecurityRatingHeaderText: 'Tour title',
      tourSecurityRatingBodyText: 'Tour body',
      tourSecurityChecklistHeaderText: 'Checklist title',
      tourSecurityChecklistBodyText: 'Checklist body',
      tourSecurityFeaturesHeaderText: 'Features title',
      tourSecurityFeaturesBodyText: 'Features body',
      tourHelpHeaderText: 'Help title',
      tourHelpBodyText: 'Help body',
      tourInfoHeaderText: 'Info title',
      tourInfoBodyText: 'Info body',
      tourNextCTAText: 'Next',
      tourExitCTAText: 'Exit',
      // DS fields
      digitalSecureHeader: 'DS header',
      statusNotInstalledLabel: 'Not installed',
      statusSomeFeaturesOffLabel: 'Some off',
      statusOffLabel: 'Off',
      statusOnLabel: 'On',
      statusUnavailableLabel: 'Unavailable',
      strongChecklistLabel: 'Strong',
      strongChecklistText: 'Strong text',
      allFeaturesOnText: 'All features',
      includedVPLabel: 'VP label',
      includedVPHLabel: 'VPH label',
      includedVZMobileProtectLabel: 'VZ Mobile label',
      includedMobileSecureLabel: 'Mobile secure label',
      includedDSLabel: 'Included DS',
      digitalSecureOpenAppText: 'Open app',
      digitalSecureGetAppText: 'Get app',
      getAppCTAText: 'Get app CTA',
      learnMoreCTAText: 'Learn more',
      showDetailsCTAText: 'Show details',
      openAppCTAText: 'Open app',
      callFilterHeader: 'Call filter',
      callFilterOffText: 'Call filter off',
      callFilterOnText: 'Call filter on',
      callFilterTurnOnText: 'Turn on'
    };

    const data = {
      scoreVersion: 'totalAlgorithmScore',
      totalAlgorithmScore: 50,
      maximumRatingScore: 100,
      totalRating: 50,
      accountNumber: '1234-5678',
      lastScanTime: new Date().toISOString(),
      threatHistoryTotalCount: '2',
      digitalSecureStatus: 'somefeaturesoff',
      inactiveDSFeatures: ['feature1', 'feature2'],
      isDigitalSecureInstalled: 'No',
      isVZProtectEnrolled: 'Yes',
      isVZProtectHomeEnrolled: 'No',
      isVZMobileProtectEnrolled: 'No',
      isMobileSecureEnrolled: 'No',
      isDigitalSecureEnrolled: 'Yes',
      isDigitalSecureActivated: 'No',
      isSmartphone: 'true',
      customerRole: 'owner',
      isSfoExist: 'No',
      isCallFilterEnabled: 'No',
      callFilterRiskLevel: 'low',
      isSecurityAdvisorEnabled: 'No',
      quizVersion: 'A',
      sessionId: 'sess1'
    };

    baseProps = {
      isFetching: false,
      dashboardDetails: { content, data },
      overviewDetails: { data: { totalRating: 10 } },
      actions: {
        refreshDashboardHomeInfo: jest.fn(() => Promise.resolve({}))
      }
    };
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  it('renders loader when isFetching true', () => {
    const { getByTestId } = render(<DashboardHome {...baseProps} isFetching={true} />);
    expect(getByTestId('loaderpage')).toBeInTheDocument();
  });

  it('mounts, runs componentDidMount and renders main content', async () => {
    const props = { ...baseProps };
    let container;
    await act(async () => {
      container = render(<DashboardHome {...props} />);
    });

    // Expect main pieces present
    expect(container.getByTestId('title')).toBeInTheDocument();
    expect(container.getByTestId('radial')).toBeInTheDocument();
    expect(container.getByTestId('circular')).toBeInTheDocument();

    // moreButton click should call window.location.href change: simulate by calling method on instance
    const instance = container.container.firstChild._reactInternals ? null : null; // fallback: we will get instance through ref rendering below
  });

  it('exposes instance methods and state changes via ref (covers many methods)', async () => {
    // render component with a ref so we can call instance methods directly
    let ref = React.createRef();
    const { container } = render(<DashboardHome ref={ref} {...baseProps} />);

    // wait for any effects
    await act(async () => {
      // flush pending promises from refreshDashboardHomeInfo
      await Promise.resolve();
      jest.runOnlyPendingTimers();
    });

    const inst = ref.current;
    expect(inst).toBeTruthy();

    // setTourContentArray and openTakeTour + gotoNextTour + resetTour
    act(() => {
      inst.setTourContentArray(baseProps.dashboardDetails.content);
    });
    expect(inst.tourContent && inst.tourContent.length).toBeGreaterThan(0);

    // open tour - should set enableTour true and schedule timeouts
    act(() => inst.openTakeTour());
    expect(inst.state.enableTour).toBe(true);

    // manually test gotoNextTour (change selected index)
    act(() => {
      inst.gotoNextTour();
    });

    // resetTour should hide the tour
    act(() => inst.resetTour());
    expect(inst.state.enableTour).toBe(false);

    // carousel update
    act(() => inst.carouselInfoUpdate(2));
    expect(inst.state.carouselIndex).toBe(2);

    // set redirect and render redirect path by setting state and checking render returns Redirect element
    act(() => inst.setState({ redirect: true, redirectUrl: '/custom' }));
    const rerendered = render(<DashboardHome ref={ref} {...baseProps} />);
    // Redirect component is mocked via actual react-router-dom real; but render will include something - at least component should not crash

    // getCurrentTimeStamp: should return a string with GMT
    const ts = inst.getCurrentTimeStamp();
    expect(typeof ts).toBe('string');
    expect(ts.includes('GMT')).toBeTruthy();

    // getLastScanTime formatting
    const last = inst.getLastScanTime(new Date().toISOString());
    expect(typeof last).toBe('string');
    expect(last.length > 0).toBeTruthy();

    // getUrlToConstruct with params
    const u = inst.getUrlToConstruct('/foo', 'a=1');
    expect(u).toContain('a=1');

    // takeQuizBtnClick - multiple switch branches
    act(() => inst.takeQuizBtnClick('twoChoicePhishing'));
    act(() => inst.takeQuizBtnClick('twoChoiceMalware'));
    act(() => inst.takeQuizBtnClick('twoChoiceFraudScams'));
    act(() => inst.takeQuizBtnClick('multiChoicePhishing'));
    act(() => inst.takeQuizBtnClick('selfAssessment'));
    act(() => inst.takeQuizBtnClick('UNKNOWN_TYPE')); // default branch

    // navigateFunc: test different templateId flows
    const recs = baseProps.dashboardDetails.content.recommendations;
    act(() => inst.navigateFunc(recs[0])); // openUrlCTA branch
    act(() => inst.navigateFunc(recs[1])); // openNativePageWithParams branch
    act(() => inst.navigateFunc({ ...recs[1], productGroupId: '' })); // openNativePage branch
    act(() => inst.navigateFunc({ ...recs[2], templateId: 'TID_TITLE_MESSAGE_OPEN_NSA_BROWSER_URL_NATIVE_PAGE', nativePageTitle: 'Title', callFilterEnrolementBrowserUrl: 'https://x', router: 'r1' } ));
    act(() => inst.navigateFunc({ ...recs[2], templateId: 'TID_TITLE_MESSAGE_OPEN_NSA_PAGE', router: 'r2' })); // sets redirect in state

    // feedbackCallPost with sample recommendations
    act(() => inst.feedbackCallPost([baseProps.dashboardDetails.content.recommendations[0]], '81'));
    expect(require('../../shared/services/externalServiceCall').feedbackNBXCall).toHaveBeenCalled();

    // handleRefresh: run both non-mobile and mobile branch
    // set reactGlobals.deviceOS to non-mobile to test else branch
    global.reactGlobals = { deviceOS: 'WEB', authenticatedCookieBasedWebViewL2WebViewUrl: 'url', securityDashboardPageTitle: 'title', callFilterMVAUrl: 'callfilter', manageCallFilterMVAFFlag: false };
    await act(async () => inst.handleRefresh());
    // mobile branch: set deviceOS to ANDROID to go through bridgeDetails
    global.reactGlobals.deviceOS = 'ANDROID';
    // mock getJSBridgeDetails to call the bridgeDetails function
    const native = require('../../../shared/Native/native');
    native.getJSBridgeDetails.mockImplementation((fnName) => {
      // simulate native calling window.bridgeDetails
      if (typeof window.bridgeDetails === 'function') {
        window.bridgeDetails({ payload: 'x' });
      }
    });
    await act(async () => inst.handleRefresh());
    // callback function inside should call refreshDashboardHomeInfo after timeout
    jest.runOnlyPendingTimers();

    // callFilterFunc branches
    // manage branch and reactGlobals.manageCallFilterMVAFFlag true path
    global.reactGlobals.manageCallFilterMVAFFlag = true;
    act(() => inst.callFilterFunc('manage', baseProps.dashboardDetails.data));
    // now test enroll/turnon path with manageCallFilterMVAFFlag false
    global.reactGlobals.manageCallFilterMVAFFlag = false;
    act(() => inst.callFilterFunc('enroll', baseProps.dashboardDetails.data));
    act(() => inst.callFilterFunc('turnon', baseProps.dashboardDetails.data));

    // getInactiveFeatures returns React nodes
    const inactive = inst.getInactiveFeatures(['feature1']);
    expect(Array.isArray(inactive)).toBe(true);

    // moreButtonClick and aboutYourRatingButtonClick should set window.location.href or use location (we'll just call them)
    const orig = global.location;
    delete global.location;
    global.location = { href: '' };
    act(() => inst.moreButtonClick());
    act(() => inst.aboutYourRatingButtonClick());
    global.location = orig;
  });

  it('covers getDerivedStateFromProps enabling/disabling progressbar', () => {
    // load the component class statically and call getDerivedStateFromProps
    const NextPropsEnable = {
      overviewDetails: { data: { totalRating: 1 } },
      dashboardDetails: { data: { totalRating: 2 } }
    };
    const prevStateEnable = { enableProgressBar: false };
    const res = DashboardHome.getDerivedStateFromProps(NextPropsEnable, prevStateEnable);
    // When overview and dashboard ratings differ and some conditions hold, function returns object or null.
    expect(res === null || typeof res === 'object').toBeTruthy();

    // For disabling case - craft scenario where it should disable
    const NextPropsDisable = {
      overviewDetails: { data: { totalRating: 2 } },
      dashboardDetails: { data: { totalRating: 2 } }
    };
    const prevStateDisable = { enableProgressBar: true };
    const res2 = DashboardHome.getDerivedStateFromProps(NextPropsDisable, prevStateDisable);
    expect(res2 === null || typeof res2 === 'object').toBeTruthy();
  });

  it('renders various conditional blocks: features, call filter, help, carousel', () => {
    const { getByText, getAllByText } = render(<DashboardHome {...baseProps} />);
    // check for texts that should be present according to content
    expect(getAllByText(/Take quiz|More/).length >= 1).toBeTruthy();
  });
});