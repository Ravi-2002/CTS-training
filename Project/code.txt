// __tests__/callsMessagesActions.test.js
import * as actions from '../../redux/actions/fetchCallsMessages';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import * as httpClient from '../../../../shared/services/httpClient';

const middlewares = [thunk];
const mockStore = configureStore(middlewares);

jest.mock('../../../../shared/services/httpClient', () => ({
  getHttpClientRequest: jest.fn(),
  postHttpClientRequest: jest.fn(),
}));

const mockSuccessResponse = {
  status: 200,
  data: {
    responseInfo: { responseCode: '00' },
    body: {
      blockedPhoneNumbers: [{ phoneNumber: '1234567890' }],
      expiredBlockedPhoneNumbers: [{ phoneNumber: '0987654321' }],
    },
  },
};

const mockFailureResponse = {
  status: 400,
  data: {
    responseInfo: { responseCode: '99' },
    body: { error: 'Some error' },
  },
};

describe('Calls & Messages Actions', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should create GET_CALLS_MESSAGES_BEGIN', () => {
    expect(actions.getCallsMessagesBegin()).toEqual({ type: actions.GET_CALLS_MESSAGES_BEGIN });
  });

  it('should create GET_CALLS_MESSAGES_SUCCESS', () => {
    const action = actions.getCallsMessagesSuccess(mockSuccessResponse.data);
    expect(action).toEqual({
      type: actions.GET_CALLS_MESSAGES_SUCCESS,
      payload: mockSuccessResponse.data.body,
      blockedNumbers: mockSuccessResponse.data.body.blockedPhoneNumbers,
      expiredBlockNumbers: mockSuccessResponse.data.body.expiredBlockedPhoneNumbers,
    });
  });

  it('should create GET_CALLS_MESSAGES_FAIL', () => {
    expect(actions.getCallsMessagesError(mockFailureResponse.data)).toEqual({
      type: actions.GET_CALLS_MESSAGES_FAIL,
      payloadGetCMError: mockFailureResponse.data.body,
    });
  });

  it('should dispatch getCallsMessages success flow', async () => {
    const store = mockStore({});
    httpClient.getHttpClientRequest.mockResolvedValue(mockSuccessResponse);
    await store.dispatch(actions.getCallsMessages());
    const dispatched = store.getActions();
    expect(dispatched[0]).toEqual({ type: actions.GET_CALLS_MESSAGES_BEGIN });
    expect(dispatched[1].type).toEqual(actions.GET_CALLS_MESSAGES_SUCCESS);
  });

  it('should dispatch getCallsMessages fail flow', async () => {
    const store = mockStore({});
    httpClient.getHttpClientRequest.mockRejectedValue({ response: mockFailureResponse });
    await store.dispatch(actions.getCallsMessages());
    const dispatched = store.getActions();
    expect(dispatched[0]).toEqual({ type: actions.GET_CALLS_MESSAGES_BEGIN });
    expect(dispatched[1].type).toEqual(actions.GET_CALLS_MESSAGES_FAIL);
  });

  it('should dispatch postaddBlockCallMsg success', async () => {
    const store = mockStore({});
    httpClient.postHttpClientRequest.mockResolvedValue(mockSuccessResponse);
    await store.dispatch(actions.postaddBlockCallMsg({ phoneNumber: '123' }));
    const dispatched = store.getActions();
    expect(dispatched[0].type).toBe(actions.POST_ADD_CALL_MSG_BEGIN);
    expect(dispatched[1].type).toBe(actions.POST_ADD_CALL_MSG_SUCCESS);
  });

  it('should dispatch postaddBlockCallMsg fail', async () => {
    const store = mockStore({});
    httpClient.postHttpClientRequest.mockRejectedValue({ response: mockFailureResponse });
    await store.dispatch(actions.postaddBlockCallMsg({ phoneNumber: '123' }));
    const dispatched = store.getActions();
    expect(dispatched[0].type).toBe(actions.POST_ADD_CALL_MSG_BEGIN);
    expect(dispatched[1].type).toBe(actions.POST_ADD_CALL_MSG_FAIL);
  });

  it('should dispatch postDeleteBlockCallMsg success', async () => {
    const store = mockStore({});
    httpClient.postHttpClientRequest.mockResolvedValue(mockSuccessResponse);
    await store.dispatch(actions.postDeleteBlockCallMsg({ phoneNumber: '123' }));
    const dispatched = store.getActions();
    expect(dispatched[0].type).toBe(actions.POST_DELETE_CALL_MSG_BEGIN);
    expect(dispatched[1].type).toBe(actions.POST_DELETE_CALL_MSG_SUCCESS);
  });

  it('should dispatch postDeleteBlockCallMsg fail', async () => {
    const store = mockStore({});
    httpClient.postHttpClientRequest.mockRejectedValue({ response: mockFailureResponse });
    await store.dispatch(actions.postDeleteBlockCallMsg({ phoneNumber: '123' }));
    const dispatched = store.getActions();
    expect(dispatched[0].type).toBe(actions.POST_DELETE_CALL_MSG_BEGIN);
    expect(dispatched[1].type).toBe(actions.POST_DELETE_CALL_MSG_FAIL);
  });
});