import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import '@testing-library/jest-dom';

import BlockServices from '../../components/BlockServices';

// Mock useDispatch like BlockCallsList test
import * as reactRedux from 'react-redux';
const mockDispatch = jest.fn();
jest.spyOn(reactRedux, 'useDispatch').mockReturnValue(mockDispatch);
jest.spyOn(reactRedux, 'useSelector');

const mockStore = configureStore([]);

describe('BlockServices', () => {
  let store;
  let history;

  const state = {
    Home: {
      services: {
        Category1: [
          { serviceName: 'Service A', sfoEnabled: 'Y', sfoCode: '001' },
          { serviceName: 'Service B', sfoEnabled: 'N', sfoCode: '002' }
        ]
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {},
      servicesError: {}
    }
  };

  const renderComponent = (overrideState = {}) => {
    store = mockStore({ ...state, ...overrideState });
    history = createMemoryHistory();
    history.push('/block-services?mdn=1234567890');

    reactRedux.useSelector.mockImplementation(selector =>
      selector({ ...state, ...overrideState })
    );

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockServices />
        </Router>
      </Provider>
    );

    return { store, history };
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders all services and toggles correctly', () => {
    renderComponent();
    expect(screen.getByText('Be in charge of who does what on your account.')).toBeInTheDocument();
    expect(screen.getByText('770.346.3247')).toBeInTheDocument();
    expect(screen.getByText('Service A')).toBeInTheDocument();
    expect(screen.getByText('Service B')).toBeInTheDocument();
    expect(screen.getAllByRole('switch')).toHaveLength(2);
  });

  it('calls dispatch on toggle change', () => {
    renderComponent();
    fireEvent.click(screen.getAllByRole('switch')[1]);
    expect(mockDispatch).toHaveBeenCalled();
  });

  it('displays success notification when confirmServices responseCode is 00', () => {
    renderComponent({
      Home: {
        ...state.Home,
        confirmServices: {
          responseInfo: { responseCode: '00' }
        }
      }
    });
    expect(screen.getByText(/Service updated successfully/i)).toBeInTheDocument();
  });

  it('displays error notification when postError responseCode is 99', () => {
    renderComponent({
      Home: {
        ...state.Home,
        servicesError: {
          responseInfo: { responseCode: '99' },
          libErrorInfo: {
            internalErrors: [
              { errorMessage: 'Some internal error' }
            ]
          }
        }
      }
    });
    expect(screen.getByText(/Error/i)).toBeInTheDocument();
  });

  it('renders failure message if service load fails', () => {
    renderComponent({
      Home: {
        ...state.Home,
        serviceFail: true
      }
    });
    expect(screen.getByText(/Failed to fetch services/i)).toBeInTheDocument();
  });

  it('navigates to service details page when TextLink is clicked', () => {
    renderComponent();
    fireEvent.click(screen.getAllByText(/Tell me more/i)[0]);
    expect(history.location.pathname).toContain('/service-details/Service%20A');
  });
});