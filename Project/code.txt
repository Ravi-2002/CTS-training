import React from 'react';
import { MemoryRouter } from 'react-router-dom';
import { render, screen } from '@testing-library/react';
import Routes from '../index';
import * as common from '../../../shared/utilities/util';

// Mock global vars
global.reactGlobals = { transitionFallback: false };
global._currentPageUrl = null;

// Mock components (we return text so we can query it)
jest.mock('../home/components/index', () => () => <div>Home Component</div>);
jest.mock('../deviceDetail/components/index', () => () => <div>DeviceDetail Component</div>);
jest.mock('../home/components/servicedetails', () => () => <div>ServiceDetails Component</div>);
jest.mock('../deviceDetail/components/ViewLimitation', () => () => <div>ViewLimitations Component</div>);
jest.mock('../deviceDetail/components/callsandmessages', () => () => <div>CallsMessages Component</div>);
jest.mock('./../../../shared/components/Loader/spinner', () => () => <div>Spinner Component</div>);
jest.mock('../history', () => ({ GlobalHistory: () => <div>History Component</div> }));

describe('Routes component full coverage', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders /blockService with pageDirection branch (transition present)', async () => {
    jest.spyOn(common, 'getOsType').mockReturnValue('ios');
    jest.spyOn(common, 'getChannelId').mockReturnValue('VZW-MFA'); // isMVM = true

    render(
      <MemoryRouter initialEntries={[{ pathname: '/blockService', state: { transition: 'forward' } }]}>
        <Routes />
      </MemoryRouter>
    );

    expect(await screen.findByText('Home Component')).toBeInTheDocument();
    expect(screen.getByText('History Component')).toBeInTheDocument();
  });

  it('covers getClassName URL comparison: oldClass reused', async () => {
    jest.spyOn(common, 'getOsType').mockReturnValue('ios');
    jest.spyOn(common, 'getChannelId').mockReturnValue('OTHER'); // isMVM = false
    global._currentPageUrl = 'landing';
    // First render to set oldClass
    render(
      <MemoryRouter initialEntries={[{ pathname: '/landing', state: {} }]}>
        <Routes />
      </MemoryRouter>
    );
    // Second render with same index triggers oldClass reuse
    render(
      <MemoryRouter initialEntries={[{ pathname: '/landing', state: {} }]}>
        <Routes />
      </MemoryRouter>
    );
    expect(await screen.findByText('Home Component')).toBeInTheDocument();
  });

  it('covers getClassName URL comparison: forward case', async () => {
    jest.spyOn(common, 'getOsType').mockReturnValue('ios');
    global._currentPageUrl = 'interstitial';
    render(
      <MemoryRouter initialEntries={[{ pathname: '/landing', state: {} }]}>
        <Routes />
      </MemoryRouter>
    );
    expect(await screen.findByText('Home Component')).toBeInTheDocument();
  });

  it('covers getClassName URL comparison: backward case', async () => {
    jest.spyOn(common, 'getOsType').mockReturnValue('ios');
    global._currentPageUrl = 'suspendoptions';
    render(
      <MemoryRouter initialEntries={[{ pathname: '/landing', state: {} }]}>
        <Routes />
      </MemoryRouter>
    );
    expect(await screen.findByText('Home Component')).toBeInTheDocument();
  });

  it('covers getClassName fallback when _currentPageUrl undefined', async () => {
    jest.spyOn(common, 'getOsType').mockReturnValue('ios');
    global._currentPageUrl = null;
    render(
      <MemoryRouter initialEntries={['/somepage']}>
        <Routes />
      </MemoryRouter>
    );
    expect(await screen.findByText('Home Component')).toBeInTheDocument();
  });

  it('covers reactGlobals.transitionFallback = true path', async () => {
    jest.spyOn(common, 'getOsType').mockReturnValue('ios');
    global.reactGlobals.transitionFallback = true;
    render(
      <MemoryRouter initialEntries={['/blockService']}>
        <Routes />
      </MemoryRouter>
    );
    expect(await screen.findByText('Home Component')).toBeInTheDocument();
    global.reactGlobals.transitionFallback = false; // reset
  });

  it('renders /service-details/:serviceName', async () => {
    jest.spyOn(common, 'getOsType').mockReturnValue('ios');
    render(
      <MemoryRouter initialEntries={['/service-details/testService']}>
        <Routes />
      </MemoryRouter>
    );
    expect(await screen.findByText('ServiceDetails Component')).toBeInTheDocument();
  });

  it('renders /call-message-blocking', async () => {
    jest.spyOn(common, 'getOsType').mockReturnValue('ios');
    render(
      <MemoryRouter initialEntries={['/call-message-blocking']}>
        <Routes />
      </MemoryRouter>
    );
    expect(await screen.findByText('CallsMessages Component')).toBeInTheDocument();
  });

  it('renders /callsandMessages', async () => {
    jest.spyOn(common, 'getOsType').mockReturnValue('ios');
    render(
      <MemoryRouter initialEntries={['/callsandMessages']}>
        <Routes />
      </MemoryRouter>
    );
    expect(await screen.findByText('DeviceDetail Component')).toBeInTheDocument();
  });

  it('renders /viewlimitation', async () => {
    jest.spyOn(common, 'getOsType').mockReturnValue('ios');
    render(
      <MemoryRouter initialEntries={['/viewlimitation']}>
        <Routes />
      </MemoryRouter>
    );
    expect(await screen.findByText('ViewLimitations Component')).toBeInTheDocument();
  });
});