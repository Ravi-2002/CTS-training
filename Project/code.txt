import React from "react";
import { render, fireEvent, screen } from "@testing-library/react";
import BlockCallsEmpty from "../components/BlockCallsEmpty";
import * as redux from "react-redux";
import * as actions from "../actions/fetchCallsMessages";
import * as reactRouter from "react-router-dom";
import * as util from "../../../../shared/utilities/util";

// Mocks
jest.mock("../../../../shared/utilities/native", () => ({
  nativeSetTitle: jest.fn(),
}));

jest.mock("../../../../shared/utilities/util", () => ({
  __esModule: true,
  default: {
    getItemValue: jest.fn((items, key) => `${key}_value`),
    getContentFromSection: jest.fn(() => ({
      sections: [{ contents: [{ items: [{}, {}, {}] }] }],
    })),
    mtnFormat: jest.fn(() => "FormattedMTN"),
  },
}));

describe("BlockCallsEmpty", () => {
  const useDispatchMock = jest.spyOn(redux, "useDispatch");
  const useSelectorMock = jest.spyOn(redux, "useSelector");

  const mockDispatch = jest.fn();
  const pushMock = jest.fn();

  const setup = ({
    blockedNumbers = [],
    addBlockCallMsg = { statusCode: "", blockedPhoneNumbers: [] },
    isFetching = false,
    locationState = { allowInput: true, mtn: "1234567890" },
    search = "",
  } = {}) => {
    useDispatchMock.mockReturnValue(mockDispatch);
    useSelectorMock.mockImplementation((cb) =>
      cb({
        Detail: {
          blockedNumbers,
          addBlockCallMsg,
          isFetching,
          callsMessages: {
            aemResponse: {
              sections: [
                {
                  sections: [
                    {
                      data: {
                        mtn: "7703463247",
                      },
                    },
                  ],
                },
              ],
            },
          },
        },
      })
    );

    jest.spyOn(reactRouter, "useLocation").mockReturnValue({
      state: locationState,
      search,
    });

    render(
      <BlockCallsEmpty
        history={{ push: pushMock }}
      />
    );
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("renders correctly with title and input", () => {
    setup();
    expect(screen.getByText("callsandMessageTitle_value")).toBeInTheDocument();
    expect(screen.getByText("FormattedMTN")).toBeInTheDocument();
    expect(screen.getByPlaceholderText ? screen.getByPlaceholderText(/phone/i) : screen.getByRole('textbox')).toBeInTheDocument();
  });

  it("disables button if input is empty", () => {
    setup();
    expect(screen.getByRole("button", { name: /block number/i })).toBeDisabled();
  });

  it("enables button when input is provided", () => {
    setup();
    fireEvent.change(screen.getByRole("textbox"), { target: { value: "1234567890" } });
    expect(screen.getByRole("button", { name: /block number/i })).not.toBeDisabled();
  });

  it("dispatches postaddBlockCallMsg on add", () => {
    const spy = jest.spyOn(actions, "postaddBlockCallMsg");
    setup();

    fireEvent.change(screen.getByRole("textbox"), { target: { value: "1234567890" } });
    fireEvent.click(screen.getByRole("button", { name: /block number/i }));

    expect(spy).toHaveBeenCalledWith(expect.objectContaining({
      blockNumber: "1234567890",
    }));
  });

  it("redirects to list page if already blocked numbers present and allowInput is false", () => {
    setup({
      blockedNumbers: ["1112223333"],
      locationState: { allowInput: false },
    });

    expect(pushMock).toHaveBeenCalledWith("/call-message-blocking");
  });

  it("redirects after successful block (statusCode 00)", () => {
    setup({
      addBlockCallMsg: {
        statusCode: "00",
        blockedPhoneNumbers: [],
      },
    });

    fireEvent.change(screen.getByRole("textbox"), { target: { value: "1234567890" } });
    fireEvent.click(screen.getByRole("button", { name: /block number/i }));

    // History push won't happen immediately because statusCode === "00" is read *before* thunk resolves,
    // so you could simulate that logic separately if needed.
    expect(mockDispatch).toHaveBeenCalled();
  });

  it("sets MDN from URL param", () => {
    setup({
      search: "?mdn=0987654321",
    });
    expect(localStorage.getItem("mdn")).toBe("0987654321");
  });

  it("clicking view limitation navigates correctly", () => {
    setup();
    fireEvent.click(screen.getByText("ViewLimitationHeader_value"));
    expect(pushMock).toHaveBeenCalledWith("/viewlimitation");
  });
});