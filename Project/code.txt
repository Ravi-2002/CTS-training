import React from 'react';
import { render } from '@testing-library/react';
import DeviceDetail from '../index';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import { MemoryRouter } from 'react-router-dom';
import * as common from '../../../../../shared/utilities/util';

// Add thunk middleware
const middlewares = [thunk];
const mockStore = configureStore(middlewares);

jest.mock('../../../../../shared/utilities/util', () => ({
  getItem: jest.fn(),
  getChannelId: jest.fn(() => 'mocked-channel-id'),
  getItemValue: jest.fn((items, key) => {
    const found = items.find(item => item.key === key);
    return found ? found.value : '';
  }),
  getContentFromSection: jest.fn(() => ({
    data: { isAppleDevice: true },
    appleDeviceMessage: 'This is an Apple device message.',
    sections: [],
  })),
}));

const mockLocationState = {
  devices: ['Device1', 'Device2'],
  isSingleDevice: false,
  selectedDevice: { encryptedMtn: 'encrypted-value' },
  advanceControls: {},
  showAdvanceControls: false,
};

jest.mock('../../../../shared/actions/detailActions', () => ({
  getDeviceDetail: () => async (dispatch) => {
    dispatch({ type: 'MOCK_DEVICE_DETAIL_SUCCESS', payload: {} });
  },
}));

describe('DeviceDetail with thunk middleware', () => {
  let store;
  let pageItems;
  let pageContent;

  beforeEach(() => {
    store = mockStore({
      Detail: {
        callsMsgs: {
          callsMessages: ['Message 1', 'Message 2'],
          blockedNumbers: ['1234567890'],
          expiredNumbers: ['0987654321'],
          getCMError: null,
        },
        Details: {
          isFetching: false,
          deviceDetails: {
            data: {
              isAppleDevice: true,
            },
          },
        },
        deviceDetails: {
          model: 'iPhone 13',
          manufacturer: 'Apple',
        },
        activeDevice: {
          deviceId: '123456',
          deviceType: 'Smartphone',
        },
      },
    });

    pageItems = [
      { key: 'model', value: 'iPhone 13' },
      { key: 'manufacturer', value: 'Apple' },
    ];

    pageContent = {
      data: {
        isAppleDevice: true,
      },
      appleDeviceMessage: 'This is an Apple device message.',
      sections: [],
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  const renderComponent = (customProps = {}) =>
    render(
      <Provider store={store}>
        <MemoryRouter>
          <DeviceDetail
            pageItems={pageItems}
            pageContent={pageContent}
            location={{ state: mockLocationState }}
            {...customProps}
          />
        </MemoryRouter>
      </Provider>
    );

  it('renders without crashing', () => {
    const { getByText } = renderComponent();
    expect(getByText('iPhone 13')).toBeInTheDocument();
  });
});