// BlockServices.test.js
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import BlockServices from '../../components/index';
import '@testing-library/jest-dom';

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock('../../../../../shared/utilities/util', () => ({
    ...jest.requireActual('../../../../../shared/utilities/util'),
    getChannelId:jest.fn(()=>'mocked-channel-id'),
  getContentFromSection: () => ({
    sections:[{
    contents: [{ items: [{ key: 'BlockserviceHeader', value: 'Mocked Block Title' }, { key: 'TellMeMoreHeader', value: 'Tell me more' }] }]}]
  }),
  getItemValue: (items, key) => {
    const found = items?.find(item => item.key === key);
    return found ? found.value : '';
  },
  mtnFormat: (mtn) => `(${mtn.slice(0, 3)}) ${mtn.slice(3, 6)}-${mtn.slice(6)}`
}));

jest.mock('../../../../../shared/utilities/native', () => ({
  nativeSetTitle: jest.fn(),
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();

describe('BlockServices Component', () => {
  let store;
  let history;

  beforeEach(() => {
    useDispatch.mockReturnValue(mockDispatch);
    store = mockStore({});
    history = createMemoryHistory();
    history.push('/block-services?mdn=1234567890');
  });

  const setup = (selectorData) => {
    useSelector.mockImplementation((cb) => cb({ Home: selectorData }));

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockServices />
        </Router>
      </Provider>
    );

    return { history };
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders toggle section and handles interaction', () => {
    setup({
      services: {
        Category1: [
          { serviceName: 'Service A', sfoEnabled: 'Y', sfoCode: '001' },
          { serviceName: 'Service B', sfoEnabled: 'N', sfoCode: '002' },
        ],
      },
      serviceStatus: {
        body: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '7703463247'
                  }
                }
              ]
            }
          ]
        }
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {},
      servicesError: {}
    });

    expect(screen.getByText('Mocked Block Title')).toBeInTheDocument();
    expect(screen.getByText('(770) 346-3247')).toBeInTheDocument();
    expect(screen.getByText('Service A')).toBeInTheDocument();
    expect(screen.getByText('Service B')).toBeInTheDocument();

    fireEvent.click(screen.getAllByRole('checkbox')[1]);
    expect(mockDispatch).toHaveBeenCalled();
  });

  it('shows success notification on POST success', () => {
    setup({
      services: { Category1: [] },
      serviceStatus: {
        body: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '7703463247'
                  }
                }
              ]
            }
          ]
        }
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {
        responseInfo: { responseCode: '00' }
      },
      servicesError: {}
    });

    expect(screen.getByText(/Service updated successfully/i)).toBeInTheDocument();
  });

  it('shows error notification on POST failure', () => {
    setup({
      services: { Category1: [] },
      serviceStatus: {
        body: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '7703463247'
                  }
                }
              ]
            }
          ]
        }
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {},
      servicesError: {
        responseInfo: { responseCode: '99' },
        libErrorInfo: {
          internalErrors: [{ errorMessage: 'Some error' }]
        }
      }
    });

    expect(screen.getByText(/Something went wrong/i)).toBeInTheDocument();
  });

  it('renders error message when service load fails', () => {
    setup({
      services: {},
      serviceStatus: {
        body: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '7703463247'
                  }
                }
              ]
            }
          ]
        }
      },
      isFetching: false,
      serviceFail: true,
      confirmServices: {},
      servicesError: {}
    });

    expect(screen.getByText(/Failed to fetch services/i)).toBeInTheDocument();
  });

  it('navigates on TextLink click', () => {
    const { history } = setup({
      services: {
        Category1: [{ serviceName: 'ServiceX', sfoEnabled: 'Y', sfoCode: '100' }],
      },
      serviceStatus: {
        body: {
          sections: [
            {
              sections: [
                {
                  data: {
                    mtn: '7703463247'
                  }
                }
              ]
            }
          ]
        }
      },
      isFetching: false,
      serviceFail: false,
      confirmServices: {},
      servicesError: {}
    });

    fireEvent.click(screen.getByText('Tell me more'));
    expect(history.location.pathname).toBe('/service-details/ServiceX');
  });
});
