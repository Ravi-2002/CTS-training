import * as actions from '../../actions/blockServiceActions';
import {
  getHttpClientRequest,
  postHttpClientRequest,
} from '../../../../../shared/services/httpClient';
import configureStore from '../../../../../shared/store/configureStore';
import rootReducer from '../../../reducers';

jest.mock('../../../../../shared/services/httpClient', () => ({
  getHttpClientRequest: jest.fn(),
  postHttpClientRequest: jest.fn(),
}));

jest.mock('../../../../../shared/utilities/apiUrl', () => () => ({
  blockServiceV2: '/mock/blockService',
  updateService: '/mock/updateService',
}));

const store = configureStore(rootReducer);

describe('BlockService Actions', () => {
  let responseData;

  beforeEach(() => {
    responseData = {
      responseInfo: { responseCode: "00" },
      body: {
        sections: [
          {
            sections: [
              {
                data: {
                  serviceDetailsMap: {
                    key: 'value'
                  }
                }
              }
            ]
          }
        ]
      }
    };
    store.clearActions?.();
  });

  test('getServices success - responseCode 00', async () => {
    getHttpClientRequest.mockImplementationOnce(() =>
      Promise.resolve({ status: 200, data: responseData })
    );

    await store.dispatch(actions.getServices());

    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test('getServices success - responseCode not 00', async () => {
    const failData = {
      responseInfo: { responseCode: "99" },
      body: { msg: "error" }
    };

    getHttpClientRequest.mockImplementationOnce(() =>
      Promise.resolve({ status: 200, data: failData })
    );

    await store.dispatch(actions.getServices());

    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test('getServices failure', async () => {
    getHttpClientRequest.mockImplementationOnce(() =>
      Promise.reject({ body: { msg: "fail" } })
    );

    await store.dispatch(actions.getServices());

    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test('postServices success - responseCode 00', async () => {
    postHttpClientRequest.mockImplementationOnce(() =>
      Promise.resolve({ status: 200, data: responseData })
    );

    await store.dispatch(actions.postServices({ service: 'mock' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('postServices success - responseCode not 00', async () => {
    const failData = {
      responseInfo: { responseCode: "99" },
      body: { msg: "error" }
    };

    postHttpClientRequest.mockImplementationOnce(() =>
      Promise.resolve({ status: 200, data: failData })
    );

    await store.dispatch(actions.postServices({ service: 'mock' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('postServices failure', async () => {
    postHttpClientRequest.mockImplementationOnce(() =>
      Promise.reject({ body: { msg: "fail" } })
    );

    await store.dispatch(actions.postServices({ service: 'mock' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('getServicesBegin', () => {
    expect(actions.getServicesBegin()).toEqual({ type: actions.GET_SERVICES_BEGIN });
  });

  test('getServicesSuccess', () => {
    expect(actions.getServicesSuccess(responseData)).toEqual({
      type: actions.GET_SERVICES_SUCCESS,
      services: responseData.body.sections[0].sections[0].data.serviceDetailsMap,
      serviceStatus: responseData
    });
  });

  test('getServicesFail', () => {
    expect(actions.getServicesFail(responseData)).toEqual({
      type: actions.GET_SERVICES_FAIL,
      failServices: responseData.body
    });
  });

  test('postServicesBegin', () => {
    expect(actions.postServicesBegin()).toEqual({
      type: actions.POST_SERVICES_BEGIN
    });
  });

  test('postServicesSuccess', () => {
    expect(actions.postServicesSuccess(responseData)).toEqual({
      type: actions.POST_SERVICES_SUCCESS,
      confirmServices: responseData
    });
  });

  test('postServicesFail', () => {
    expect(actions.postServicesFail(responseData)).toEqual({
      type: actions.POST_SERVICES_FAIL,
      servicesError: responseData
    });
  });
});