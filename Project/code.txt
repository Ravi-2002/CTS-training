// SettingPreferences.test.tsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import SettingPreferences from '../SettingPreferences';

// mock utils
jest.mock('../utils', () => ({
  getActionkey: jest.fn(() => 'mockKey'),
  getOnClickInfo: jest.fn(() => ({ actionHref: 'https://verizon.com/block/' })),
  getOnClickInfoMobile: jest.fn(() => ({ actionHref: 'https://verizon.com/mobile-block/' })),
}));

// window.location mock
const originalLocation = window.location;
beforeAll(() => {
  delete (window as any).location;
  (window as any).location = { href: '' };
});
afterAll(() => {
  window.location = originalLocation;
});

describe('SettingPreferences', () => {
  const defaultProps = {
    pageContent: {},
    pageItems: [{ key: 'blockSpecificServicesBtn' }],
    deviceDetails: { encryptedMtnDES: 'ABC123' },
    preferences: { blockSpecificServicesBtn: true },
    singletink: { blockSpecificServicesBtn: true },
    enableBlocksMVA: false,
  };

  it('renders without crashing', () => {
    render(<SettingPreferences {...defaultProps} />);
    expect(screen.getByTestId('blockSpecificServicesBtn')).toBeInTheDocument();
  });

  it('redirects using getOnClickInfoMobile when enableBlocksMVA is false', () => {
    const { getOnClickInfoMobile } = require('../utils');
    (getOnClickInfoMobile as jest.Mock).mockReturnValueOnce({ actionHref: 'https://test-mobile/' });

    render(<SettingPreferences {...defaultProps} enableBlocksMVA={false} />);

    fireEvent.click(screen.getByTestId('blockSpecificServicesBtn'));
    expect(window.location.href).toBe('https://test-mobile/ABC123');
  });

  it('redirects using getOnClickInfo when enableBlocksMVA is true and blockSpecificServicesBtn', () => {
    const { getOnClickInfo } = require('../utils');
    (getOnClickInfo as jest.Mock).mockReturnValueOnce({ actionHref: 'https://test-mva/' });

    render(<SettingPreferences {...defaultProps} enableBlocksMVA={true} />);

    fireEvent.click(screen.getByTestId('blockSpecificServicesBtn'));
    expect(window.location.href).toBe('https://test-mva/ABC123');
  });

  it('redirects using getOnClickInfo when enableBlocksMVA is true and blockCallsAndMessagesBtn', () => {
    const { getOnClickInfo } = require('../utils');
    (getOnClickInfo as jest.Mock).mockReturnValueOnce({ actionHref: 'https://calls-msg/' });

    render(
      <SettingPreferences
        {...defaultProps}
        enableBlocksMVA={true}
        singletink={{ blockCallsAndMessagesBtn: true }}
        preferences={{ blockCallsAndMessagesBtn: true }}
        pageItems={[{ key: 'blockCallsAndMessagesBtn' }]}
      />
    );

    fireEvent.click(screen.getByTestId('blockCallsAndMessagesBtn'));
    expect(window.location.href).toBe('https://calls-msg/ABC123');
  });

  it('does nothing if button is not in preferences', () => {
    render(
      <SettingPreferences
        {...defaultProps}
        preferences={{}} // button not enabled
      />
    );

    fireEvent.click(screen.getByTestId('blockSpecificServicesBtn'));
    // should remain unchanged
    expect(window.location.href).toBe('');
  });
});