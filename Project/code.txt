import React, { lazy, Fragment, Suspense } from "react";
import { Switch, Route } from "react-router-dom";
import styled from "styled-components";

import Spinner from './../../shared/components/Loader/spinner';
import common from "./../../shared/utilities/util";

const Home = lazy(()=> import("./home/components"));
const DeviceDetail = lazy(()=> import("./deviceDetail/components"));
const AssignDevice = lazy(()=> import("./assignDevice/components"));

import { GlobalHistory } from "./history";
import { TransitionGroup, CSSTransition } from "react-transition-group";

const loadingImg = (<Spinner />);
const pageRoutes = [
  "interstitial",
  "landing",
  "suspendoptions",
  "confirmation"
];
const TransitionWrapper = styled(TransitionGroup)`
 height: 100%;
 width: 100%; 
 display: flex;
 flex-direction: column;
 overflow: hidden;
 `;


const TransitionContainer = styled.div`
  height: 100%;
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  overflow: auto;
  margin-right: 0%;
  // padding: 0px 20px;
`;
let oldClass = "";
const nativePlatform = common.getOsType(); //"ios";

function getClassName(location) {
  if (location && !reactGlobals.transitionFallback) {
    let pageDirection = location.state && location.state.transition;
    if (pageDirection) return nativePlatform + " " + pageDirection;
    else return nativePlatform + " " + "backWard";
  } else if (
    location &&
    location.pathname &&
    !(typeof _currentPageUrl === "undefined" || _currentPageUrl === null) &&
    _currentPageUrl
  ) {
    const locationArray = location.pathname.split("/");
    let newUrl = "";
    if (locationArray && locationArray.length > 2) {
      newUrl = locationArray[1] + "/" + locationArray[2];
    } else {
      newUrl = locationArray[1];
    }
    const newUrlIndex = pageRoutes.findIndex(
      item => item.toLowerCase() === newUrl.toLowerCase()
    );
    const oldUrlIndex = pageRoutes.findIndex(
      item => item.toLowerCase() === _currentPageUrl.toLowerCase()
    );
    if (oldUrlIndex == newUrlIndex && oldClass != "") {
      return nativePlatform + " " + oldClass;
    }
    if (oldUrlIndex <= newUrlIndex) {
      oldClass = "forWard";
      return nativePlatform + " " + "forWard";
    } else {
      oldClass = "backWard";
      return nativePlatform + " " + "backWard";
    }
  } else {
    return nativePlatform + " " + "forWard";
  }
}

const childFactoryCreator = classNames => child =>
  React.cloneElement(child, {
    classNames
  });

const isMVM = common.getChannelId() === "VZW-MFA";

class Routes extends React.Component {
  constructor(props) {
    super(props);

  }

  routeConfig = (
    <Route
      render={({ location }) => (
        <TransitionWrapper
          childFactory={childFactoryCreator(
            `${getClassName(location)} pageSlider`
          )}
        >
          <CSSTransition
            id="csstrans"
            name="csstrans"
            key={location.pathname}
            timeout={isMVM ? 500 : 0}
            classNames={`${getClassName(location)} pageSlider`}
            mountOnEnter={true}
            unmountOnExit={true}
          >
            <TransitionContainer >
              <GlobalHistory />
              <Suspense fallback={loadingImg}>
                <Switch location={location}>
                  <Route exact path="/" component={Home} />
                  <Route exact path="/deviceDetail" component={DeviceDetail} />
                  <Route exact path="/deviceDetail/:mtn" component={DeviceDetail} />
                  <Route exact path="/assignDevice" component={AssignDevice} />
                  <Route exact path="/ManageDevice/:mtn" component={DeviceDetail} />
                </Switch>
              </Suspense>
            </TransitionContainer>
          </CSSTransition>
        </TransitionWrapper>
      )}
    />
  );
  render() {
    return <Fragment>{this.routeConfig}</Fragment>
  }
}

export default Routes;
