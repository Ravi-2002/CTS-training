import * as callsMessagesActions from '../../actions/callsMessagesActions';
import configureStore from '../../../../../shared/store/configureStore';
import rootReducer from '../../../reducers';
import {
  getHttpClientRequest,
  postHttpClientRequest
} from '../../../../../shared/services/httpClient';

jest.mock('../../../../../shared/services/httpClient', () => ({
  postHttpClientRequest: jest.fn(),
  getHttpClientRequest: jest.fn()
}));

const store = configureStore(rootReducer);

describe('CallsMessages Actions', () => {
  beforeEach(() => {
    store.clearActions?.();
    jest.clearAllMocks();
  });

  const successResponse = {
    status: 200,
    data: {
      responseInfo: {
        responseCode: '00'
      },
      body: {
        blockedPhoneNumbers: ['123'],
        expiredBlockedPhoneNumbers: ['456'],
      }
    }
  };

  const errorResponse = {
    responseInfo: { responseCode: '01' },
    body: { message: 'Failed' }
  };

  test('getCallsMessages success', async () => {
    getHttpClientRequest.mockResolvedValueOnce(successResponse);

    await store.dispatch(callsMessagesActions.getCallsMessages());

    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test('getCallsMessages error', async () => {
    getHttpClientRequest.mockRejectedValueOnce({ body: 'Error' });

    await store.dispatch(callsMessagesActions.getCallsMessages());

    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test('postaddBlockCallMsg success', async () => {
    postHttpClientRequest.mockResolvedValueOnce(successResponse);

    await store.dispatch(callsMessagesActions.postaddBlockCallMsg({ phone: '9999' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('postaddBlockCallMsg error', async () => {
    postHttpClientRequest.mockRejectedValueOnce({ body: 'Post error' });

    await store.dispatch(callsMessagesActions.postaddBlockCallMsg({ phone: '8888' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('postDeleteBlockCallMsg success', async () => {
    postHttpClientRequest.mockResolvedValueOnce(successResponse);

    await store.dispatch(callsMessagesActions.postDeleteBlockCallMsg({ phone: '1234' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test('postDeleteBlockCallMsg error', async () => {
    postHttpClientRequest.mockRejectedValueOnce({ body: 'Delete error' });

    await store.dispatch(callsMessagesActions.postDeleteBlockCallMsg({ phone: '5678' }));

    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  // Plain action creators
  test('getCallsMessagesBegin', () => {
    expect(callsMessagesActions.getCallsMessagesBegin()).toEqual({
      type: 'CallsMessages/GET_CALLS_MESSAGES_BEGIN'
    });
  });

  test('getCallsMessagesSuccess', () => {
    const response = successResponse.data;
    expect(callsMessagesActions.getCallsMessagesSuccess(response)).toEqual({
      type: 'CallsMessages/GET_CALLS_MESSAGES_SUCCESS',
      payload: response.body,
      blockedNumbers: response.body.blockedPhoneNumbers,
      expiredBlockNumbers: response.body.expiredBlockedPhoneNumbers
    });
  });

  test('getCallsMessagesError', () => {
    expect(callsMessagesActions.getCallsMessagesError(errorResponse)).toEqual({
      type: 'CallsMessages/GET_CALLS_MESSAGES_FAIL',
      payloadGetCMError: errorResponse.body
    });
  });

  test('postaddBlockCallMsgBegin', () => {
    expect(callsMessagesActions.postaddBlockCallMsgBegin()).toEqual({
      type: 'CallsMessages/POST_ADD_CALL_MSG_BEGIN'
    });
  });

  test('postaddBlockCallMsgSuccess', () => {
    const response = successResponse.data;
    expect(callsMessagesActions.postaddBlockCallMsgSuccess(response)).toEqual({
      type: 'CallsMessages/POST_ADD_CALL_MSG_SUCCESS',
      payloadAddCallMsg: response.body
    });
  });

  test('postaddBlockCallMsgError', () => {
    expect(callsMessagesActions.postaddBlockCallMsgError(errorResponse)).toEqual({
      type: 'CallsMessages/POST_ADD_CALL_MSG_FAIL',
      payloadAddCallMsgError: errorResponse.body
    });
  });

  test('postDeleteBlockCallMsgBegin', () => {
    expect(callsMessagesActions.postDeleteBlockCallMsgBegin()).toEqual({
      type: 'CallsMessages/POST_DELETE_CALL_MSG_BEGIN'
    });
  });

  test('postDeleteBlockCallMsgSuccess', () => {
    const response = successResponse.data;
    expect(callsMessagesActions.postDeleteBlockCallMsgSuccess(response)).toEqual({
      type: 'CallsMessages/POST_DELETE_CALL_MSG_SUCCESS',
      payloadDeleteCallMsg: response.body
    });
  });

  test('postDeleteBlockCallMsgError', () => {
    expect(callsMessagesActions.postDeleteBlockCallMsgError(errorResponse)).toEqual({
      type: 'CallsMessages/POST_DELETE_CALL_MSG_FAIL',
      payloadDeleteCallMsgError: errorResponse.body
    });
  });
});