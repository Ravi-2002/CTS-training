it("redirects when enableBlocksMVA=true and singleLink=blockCallsAndMessagesBtn", () => {
  // Arrange
  props.deviceDetails.body.pageAttributes.manageBlocksMVAFFlag = "true"; // enableBlocksMVA = true
  (getClientChannelId as jest.Mock).mockReturnValue("VZW-MFA");          // channel is MVA
  (getActionKey as jest.Mock).mockReturnValue("blockCallsAndMessagesBtn");
  (getOnClickInfo as jest.Mock).mockReturnValue({ actionHref: "/calls" });

  // Act
  render(<SettingPreferences {...props} />);
  fireEvent.click(screen.getByText("Block Calls"));

  // Assert
  expect(window.location.href).toBe("/callsENCRYPTED"); // adjust suffix
  expect(getOnClickInfo).toHaveBeenCalledWith(
    expect.anything(),
    "nsa_blockCallsAndMessagesBtn_mva"
  );
});

it("redirects when enableBlocksMVA=true and singleLink=blockSpecificServicesBtn", () => {
  // Arrange
  props.deviceDetails.body.pageAttributes.manageBlocksMVAFFlag = "true"; // enableBlocksMVA = true
  (getClientChannelId as jest.Mock).mockReturnValue("VZW-MFA");          // channel is MVA
  (getActionKey as jest.Mock).mockReturnValue("blockSpecificServicesBtn");
  (getOnClickInfo as jest.Mock).mockReturnValue({ actionHref: "/services" });

  // Act
  render(<SettingPreferences {...props} />);
  fireEvent.click(screen.getByText("Block Services"));

  // Assert
  expect(window.location.href).toBe("/servicesENCRYPTED"); // adjust suffix
  expect(getOnClickInfo).toHaveBeenCalledWith(
    expect.anything(),
    "nsa_blockSpecificServicesBtn_mva"
  );
});