import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import BlockCallsList from '../BlockCallsList';
import { useSelector, useDispatch } from 'react-redux';
import { getCallsMessages, postDeleteBlockCallMsg } from '../../actions/fetchCallsMessages';
import * as common from '../../../../shared/utilities/util';
import { nativeSetTitle } from '../../../../shared/utilities/native';

// Mocks
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('../../actions/fetchCallsMessages', () => ({
  getCallsMessages: jest.fn(() => ({ type: 'GET_CALLS_MESSAGES' })),
  postDeleteBlockCallMsg: jest.fn(),
}));

jest.mock('../../../../shared/utilities/util', () => ({
  __esModule: true,
  default: {
    mtnFormat: jest.fn((mtn) => `+${mtn}`),
    getContentFromSection: jest.fn(() => ({
      sections: [{
        contents: [{
          items: [{ title: 'Blocked Title' }]
        }]
      }]
    })),
    getItemValue: jest.fn(() => 'Block Calls & Messages Title'),
  },
}));

jest.mock('../../../../shared/utilities/native', () => ({
  nativeSetTitle: jest.fn(),
}));

const mockHistory = { push: jest.fn() };

const renderComponent = (stateOverrides = {}) => {
  const dispatch = jest.fn();
  useDispatch.mockReturnValue(dispatch);

  useSelector.mockImplementation((selectorFn) =>
    selectorFn({
      Detail: {
        blockedNumbers: stateOverrides.blockedNumbers || [
          { phoneNumber: '1234567890' },
          { phoneNumber: '0987654321' }
        ],
        addBlockCallMsg: stateOverrides.addBlockCallMsg || null,
        deleteBlockCallMsg: stateOverrides.deleteBlockCallMsg || null,
        isFetching: stateOverrides.isFetching || false,
        callsMessages: {
          aemResponse: {
            sections: [
              {
                sections: [
                  {
                    data: { mtn: '9876543210' }
                  }
                ],
                contents: [
                  {
                    items: [{ title: 'callsandMessageTitle' }]
                  }
                ]
              }
            ]
          }
        }
      }
    })
  );

  localStorage.setItem('mdn', '9876543210');

  return render(<BlockCallsList history={mockHistory} />);
};

describe('BlockCallsList Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders title, MDN, and list of blocked numbers', () => {
    renderComponent();
    expect(screen.getByText('Block Calls & Messages Title')).toBeInTheDocument();
    expect(screen.getByText('+9876543210')).toBeInTheDocument();
    expect(screen.getByText('You are blocking 2 of 5 numbers.')).toBeInTheDocument();
    expect(screen.getByText('1234567890')).toBeInTheDocument();
    expect(screen.getByText('0987654321')).toBeInTheDocument();
  });

  it('dispatches getCallsMessages on mount', () => {
    renderComponent();
    expect(getCallsMessages).toHaveBeenCalled();
  });

  it('calls postDeleteBlockCallMsg when remove button is clicked', async () => {
    renderComponent();
    const removeButtons = screen.getAllByRole('button', { name: '' }); // ButtonIcon has no label
    fireEvent.click(removeButtons[0]);

    await waitFor(() => {
      expect(postDeleteBlockCallMsg).toHaveBeenCalledWith({
        mtn: '9876543210',
        blockNumber: '1234567890',
        oldPhoneNumber: '1234567890',
        memo: '',
        expiredPhoneNumber: '',
        blockedNumbers: [],
        applyAll: false,
        onlyMemo: false
      });
    });
  });

  it('navigates to view limitations when link is clicked', () => {
    renderComponent();
    fireEvent.click(screen.getByText('View Limitations'));
    expect(mockHistory.push).toHaveBeenCalledWith('/viewlimitation');
  });

  it('disables add button when blocked numbers are 5', () => {
    renderComponent({
      blockedNumbers: Array(5).fill({ phoneNumber: '9999999999' }),
    });
    expect(screen.getByRole('button', { name: 'Add a number' })).toBeDisabled();
  });

  it('navigates to add number page when add button clicked', () => {
    renderComponent();
    const addButton = screen.getByRole('button', { name: 'Add a number' });
    fireEvent.click(addButton);
    expect(mockHistory.push).toHaveBeenCalledWith('/callsandmessages', {
      allowInput: true,
      mtn: '9876543210',
    });
  });

  it('falls back to blockedNumbers if addBlockCallMsg is null', () => {
    renderComponent({ addBlockCallMsg: null });
    expect(screen.getByText('1234567890')).toBeInTheDocument();
  });

  it('updates list if deleteBlockCallMsg is available', () => {
    renderComponent({
      deleteBlockCallMsg: {
        blockedPhoneNumbers: [{ phoneNumber: '1111111111' }]
      }
    });
    expect(screen.getByText('1111111111')).toBeInTheDocument();
  });
});