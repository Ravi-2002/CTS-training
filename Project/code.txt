it('updates formState when confirmServices has responseCode "00" and toggled service', () => {
  const initialServices = {
    Category1: [
      { serviceName: 'Test Service', sfoEnabled: 'N', sfoCode: '003' },
    ]
  };

  setup({
    services: initialServices,
    isFetching: false,
    serviceFail: false,
    confirmServices: null,
    servicesError: {},
  });

  // Initial state should be Off (N = false)
  const toggleButton = screen.getByTestId('Test Service');
  expect(toggleButton).toHaveTextContent('Off');

  // Simulate toggle click
  fireEvent.click(toggleButton);

  // Simulate updated confirmServices in the next render
  useSelector.mockImplementation((cb) =>
    cb({
      Home: {
        services: initialServices,
        isFetching: false,
        serviceFail: false,
        confirmServices: {
          responseInfo: { responseCode: '00' }
        },
        servicesError: {},
      },
    })
  );

  // Re-render with updated selector (simulate redux update)
  render(
    <Provider store={store}>
      <Router history={history}>
        <BlockServices />
      </Router>
    </Provider>
  );

  // Toggle should now say On
  expect(screen.getByTestId('Test Service')).toHaveTextContent('On');
});