import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import BlockCallsList from '../BlockCallsList';
import { useDispatch, useSelector } from 'react-redux';
import { BrowserRouter as Router } from 'react-router-dom';
import * as actions from '../../actions/fetchCallsMessages';
import common from '../../../../../shared/utilities/util';
import { nativeSetTitle } from '../../../../../shared/utilities/native';

jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
  useSelector: jest.fn(),
}));

jest.mock('../../../../../shared/utilities/util', () => ({
  getItemValue: jest.fn((items, key) => key),
  getContentFromSection: jest.fn((content, sectionId) => content.sections[0]),
  mtnFormat: jest.fn((mtn) => `Formatted: ${mtn}`),
}));

jest.mock('../../../../../shared/utilities/native', () => ({
  nativeSetTitle: jest.fn(),
}));

jest.mock('../../actions/fetchCallsMessages', () => ({
  getCallsMessages: jest.fn(() => ({ type: 'GET_CALLS_MESSAGES' })),
  postDeleteBlockCallMsg: jest.fn((payload) => ({
    type: 'DELETE_CALLS_MESSAGES',
    payload,
  })),
}));

const mockDispatch = jest.fn();
const localStorageMock = (() => {
  let store = { mdn: '9999999999' };
  return {
    getItem: jest.fn((key) => store[key]),
    setItem: jest.fn((key, value) => (store[key] = value)),
    clear: jest.fn(() => (store = {})),
  };
})();
Object.defineProperty(window, 'localStorage', { value: localStorageMock });

const renderComponent = (stateOverrides = {}) => {
  useDispatch.mockReturnValue(mockDispatch);

  useSelector.mockImplementation((selector) =>
    selector({
      Detail: {
        blockedNumbers: stateOverrides.blockedNumbers || [
          { phoneNumber: '1234567890' },
        ],
        addBlockCallMsg: stateOverrides.addBlockCallMsg || null,
        deleteBlockCallMsg: stateOverrides.deleteBlockCallMsg || null,
        isFetching: stateOverrides.isFetching || false,
        callsMessages: {
          aemResponse: {
            sections: [
              {
                sections: [
                  {
                    data: { mtn: '9876543210' },
                  },
                ],
                contents: [
                  {
                    items: [{ title: 'callsandMessageTitle' }],
                  },
                ],
              },
            ],
          },
        },
      },
    })
  );

  return render(
    <Router>
      <BlockCallsList history={{ push: jest.fn() }} />
    </Router>
  );
};

describe('BlockCallsList', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders the title and mtn', () => {
    renderComponent();

    expect(nativeSetTitle).toHaveBeenCalledWith('Block Calls & Messages', false);
    expect(screen.getByText('callsandMessageTitle')).toBeInTheDocument();
    expect(screen.getByText('Formatted: 9876543210')).toBeInTheDocument();
  });

  it('displays blocked numbers', () => {
    renderComponent();
    expect(screen.getByText('1234567890')).toBeInTheDocument();
    expect(screen.getByText('You are blocking 1 of 5 numbers.')).toBeInTheDocument();
  });

  it('disables Add button when 5 numbers blocked', () => {
    renderComponent({
      blockedNumbers: Array(5).fill({ phoneNumber: '1234567890' }),
    });

    expect(screen.getByRole('button', { name: /add a number/i })).toBeDisabled();
  });

  it('calls dispatch on remove number click', () => {
    renderComponent();
    const removeButton = screen.getByRole('button', { name: /close/i });
    fireEvent.click(removeButton);
    expect(mockDispatch).toHaveBeenCalledWith(
      actions.postDeleteBlockCallMsg({
        mtn: '9999999999',
        blockNumber: '1234567890',
        oldPhoneNumber: '1234567890',
        memo: '',
        expiredPhoneNumber: '',
        blockedNumbers: [],
        applyAll: false,
        onlyMemo: false,
      })
    );
  });

  it('calls dispatch on mount to fetch numbers', () => {
    renderComponent();
    expect(mockDispatch).toHaveBeenCalledWith(actions.getCallsMessages());
  });

  it('navigates to /viewlimitation on link click', () => {
    const pushMock = jest.fn();
    render(
      <Router>
        <BlockCallsList history={{ push: pushMock }} />
      </Router>
    );
    fireEvent.click(screen.getByText(/View Limitations/i));
    expect(pushMock).toHaveBeenCalledWith('/viewlimitation');
  });

  it('navigates to /callsandmessages with state on Add a number click', () => {
    const pushMock = jest.fn();
    render(
      <Router>
        <BlockCallsList history={{ push: pushMock }} />
      </Router>
    );
    fireEvent.click(screen.getByText(/Add a number/i));
    expect(pushMock).toHaveBeenCalledWith('/callsandmessages', {
      allowInput: true,
      mtn: '9999999999',
    });
  });
});