// DeviceDetail.test.js

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import DeviceDetail from './DeviceDetail'; // Import your component

// Mock Redux Store
const mockStore = createStore((state = {
  Detail: {
    Details: {
      isFetching: false,
      deviceDetails: {
        data: {
          isAppleDevice: false, // The device is not an Apple device in this case
          isFamilyBase: true,
          isDataOnlyPlan: true,
          isTrackingDevice: false,
        },
        contents: [
          { itemKey: 'appleDeviceMessage', itemValue: 'Apple iMessage won’t be blocked.' },
          { itemKey: 'familyBaseMessage', itemValue: 'You can block numbers using your Verizon Smart Family™ product.' },
          { itemKey: 'trackingDeviceMessage', itemValue: 'This type of device does not receive calls or standard texts.' },
        ],
      },
    },
  },
}) => state);

// Mock of the Router location
const mockLocation = {
  state: {
    selectedDevice: {
      encryptedMtn: 'encryptedMtn123',
      deviceNickname: 'Test Device',
      role: 'Non Registered',
      displayMtn: '123-456-7890',
      images: { mediumImage: 'test-image.jpg' },
    },
  },
};

// Mock deviceDetails response
const mockDeviceDetailsResponse = {
  responseInfo: {
    timeStamp: '11-10-2024 12:23:17',
    correlationId: 'Blocks Devices',
    responseCode: '00',
    responseMessage: 'SUCCESS',
    sectionErrors: [],
  },
  body: {
    pageAttributes: [
      { itemKey: 'pageTitle', itemValue: 'Devices blocks' },
      { itemKey: 'hashedAccountNumber', itemValue: '##HASHED_ACCTNO##', itemType: 'text' },
      { itemKey: 'hashedMdn', itemValue: '##HASHED_MDN##', itemType: 'text' },
    ],
    sections: [
      {
        sectionIndex: '0',
        sectionId: 'devicesBlocksMainSection',
        sectionType: 'devicesBlocksMainSection',
        sectionComponentId: 'GenericComponent',
        sections: [
          {
            sectionIndex: '1',
            sectionId: 'devicesBlocksAdvCtrlsPageSection',
            sectionType: 'advancedControlsSection',
            contents: [
              {
                contentIndex: '0',
                items: [
                  {
                    itemKey: 'controlsHeader',
                    itemType: 'text',
                    itemValue: 'Advanced Controls',
                    itemAttributes: {},
                    actionKey: 'advanceControls',
                  },
                ],
              },
            ],
            data: {
              advanceControls: [
                {
                  caretMsg: 'Manage Call Filter',
                  headerText: 'Put an end to mystery calls.',
                  titleText: 'Call Filter',
                  isFeatureAvailable: 'N',
                  description: 'Call Filter identifies unknown numbers by name or as spam and automatically blocks unwanted calls based on risk level.',
                  url: 'https://vzwqa1.verizonwireless.com/solutions-and-services/call-filter/',
                },
              ],
            },
          },
          {
            sectionIndex: '2',
            sectionId: 'devicesBlockDetailsPageSection',
            sectionType: 'blockDetailsSection',
            actions: [
              {
                actionType: 'route',
                actionValue: '/',
                actionKey: 'seeAllDevicesAction',
                clickStream: 'see-all-devices-cta',
              },
              {
                actionType: 'modal',
                actionValue: 'devicesBlocksAppleModalSection',
                actionKey: 'appleModalAction',
                clickStream: 'see-all-devices-cta',
              },
            ],
            contents: [
              {
                contentIndex: '0',
                items: [
                  { itemKey: 'headerText', itemType: 'text', itemValue: 'Now, let\'s manage blocks for this device.' },
                  { itemKey: 'selectServiceText', itemType: 'text', itemValue: 'Select a section below to get started. All changes are automatically saved.' },
                  { itemKey: 'deviceDisabledText', itemType: 'text', itemValue: 'Devices disabled' },
                  { itemKey: 'seeAllDevicesBtn', itemType: 'button', itemValue: 'See all devices', itemAttributes: {}, actionKey: 'seeAllDevicesAction' },
                  { itemKey: 'appleModalLink', itemType: 'link', itemValue: 'Click here', itemAttributes: {}, actionKey: 'appleModalAction' },
                  { itemKey: 'dataOnlyMessage', itemType: 'text', itemValue: 'This type of device does not receive calls or standard texts (SMS/MMS).' },
                  { itemKey: 'familyBaseMessage', itemType: 'text', itemValue: 'You can block numbers using your Verizon Smart Family™ product.' },
                  { itemKey: 'appleDeviceMessage', itemType: 'html', itemValue: '<strong>Apple iMessage note:</strong> Apple iMessage won\'t be blocked. To learn how to disable iMessages' },
                  { itemKey: 'trackingDeviceMessage', itemType: 'text', itemValue: 'This type of device does not receive calls or standard texts (SMS/MMS).' },
                  { itemKey: 'callsMessagesHeader', itemType: 'text', itemValue: 'Block calls & messages' },
                  { itemKey: 'servicesHeader', itemType: 'text', itemValue: 'Block services' },
                ],
              },
            ],
            data: {
              showAdvanceControls: false,
              pendingOrder: false,
              isFamilyBase: true,
              isDataOnlyPlan: true,
              isTrackingDevice: false,
              showServices: false,
              isAppleDevice: false,
            },
          },
        ],
      },
    ],
  },
};

describe('DeviceDetail Component', () => {
  it('renders device details correctly from mock response', async () => {
    render(
      <Provider store={mockStore}>
        <DeviceDetail location={mockLocation} />
      </Provider>
    );

    // Check that the device nickname and phone number are rendered correctly
    expect(screen.getByText('Test Device')).toBeInTheDocument();
    expect(screen.getByText('123-456-7890')).toBeInTheDocument();

    // Check for device messages from mock response
    expect(screen.getByText('You can block numbers using your Verizon Smart Family™ product.')).toBeInTheDocument();
    expect(screen.getByText('This type of device does not receive calls or standard texts (SMS/MMS).')).toBeInTheDocument();

    // Check that the Apple device message is not displayed (since isAppleDevice is false)
    expect(screen.queryByText('Apple iMessage won’t be blocked.')).toBeNull();

    // Ensure that the "See all devices" button is rendered
    expect(screen.getByText('See all devices')).toBeInTheDocument();

    // Check the Apple Modal link
    expect(screen.getByText('Click here')).toBeInTheDocument();
  });

  it('handles "See all devices" button click', async () => {
    render(
      <Provider store={mockStore}>
        <DeviceDetail location={mockLocation} />
      </Provider>
    );

    // Simulate clicking the "See all devices" button
    fireEvent.click(screen.getByText('See all devices'));

    // Add an assertion to check if the right action is triggered (you can mock navigation or routing behavior)
    expect(screen.getByText('Devices blocks')).toBeInTheDocument();
  });

  it('handles "Click here" Apple Modal link', async () => {
    render(
      <Provider store={mockStore}>
        <DeviceDetail location={mockLocation} />
      </Provider>
    );

    // Simulate clicking the Apple Modal link
    fireEvent.click(screen.getByText('Click here'));

    // Check for modal content (this may need adjustment based on your app's modal structure)
    expect(screen.getByText('Apple® iPhone® - Turn iMessage on/off')).toBeInTheDocument();
  });

  it('renders advanced controls section', async () => {
    render(
      <Provider store={mockStore}>
        <DeviceDetail location={mockLocation} />
      </Provider>
    );

    // Check if advanced controls are visible based on the mock data
    expect(screen.queryByText('Put an end to mystery calls.')).toBeInTheDocument();
    expect(screen.queryByText('Call Filter identifies unknown numbers...')).toBeInTheDocument();
  });
});