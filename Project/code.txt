import React, { Fragment, useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { getServices, postServices } from "../actions/index";
import { Link, useHistory, useLocation } from "react-router-dom/cjs/react-router-dom.min";
import {useSearchParam} from "react-router-dom";
import { Line } from '@vds/lines';
import styled from "styled-components";
import { Notification } from "@vds/notifications";
import { Loader } from "@vds/loaders";
import { Toggle } from "@vds/toggles"
import { TextLink } from "@vds/buttons";
import { Body, Title } from "@vds/typography";
import { nativeSetTitle } from "../../../../shared/utilities/native";
import common from "../../../../shared/utilities/util";

const BlockServices = (props) => {
  const dispatch = useDispatch();
  const location = useLocation();
  const query = location.search.slice(1);
  const MDN = query.split("&").find(q=>q.startsWith("mdn="))?.split("=")[1];
  const serviceDetailsMap = useSelector((state) => state.Home.services);
  const Content = useSelector((state) => state.Home.serviceStatus.body);
  const isFetching = useSelector((state) => state.Home.isFetching);
  const loadError = useSelector((state) => state.Home.serviceFail);
  const confirmServices = useSelector((state) => state.Home.confirmServices);
  const postError = useSelector((state) => state.Home.servicesError);
  const leg = useSelector((state) => console.log(state,'state'));
  const [formState, setFormState] = useState({});
  const [ErrorMsg, setErrorMsg] = useState({});
  const [lastToggledService, setLastToggledService] = useState(null);
  const history = useHistory();
  console.log(Content,'service')
  const mtn = Content.sections[0].sections[0].data.mtn;
  let pageContent;
    if (Content && Content?.sections[0]) {
      pageContent = common.getContentFromSection(Content, 'devicesBlocksMainSection');
      pageContent = pageContent.sections[0];
    }
  let pageItems = pageContent && pageContent.contents && pageContent.contents[0].items;
  console.log(pageItems,'pageItems')
  useEffect(() => {
    dispatch(getServices(MDN));
  }, [dispatch]);
  useEffect(() => {
    nativeSetTitle('Block Service',false);
  });
  useEffect(() => {
    const updatedState = {};
    for (const category in serviceDetailsMap) {
      serviceDetailsMap[category].forEach((service) => {
        updatedState[service.serviceName] = service.sfoEnabled === "Y";
      });
    }
    setFormState(updatedState);
  }, [serviceDetailsMap]);
  useEffect(()=>{
    if(postError?.responseInfo?.responseCode!=='00'){
    setErrorMsg(postError.libErrorInfo?.internalErrors?.[0]?.errorMessage)}
  },[postError]);
  
  useEffect(() => {
    if (
      confirmServices?.responseInfo?.responseCode === "00" &&
      lastToggledService?.serviceName
    ) {
      const { serviceName, toggledValue } = lastToggledService;
      setFormState((prev) => ({
        ...prev,
        [serviceName]: toggledValue,
      }));
      setLastToggledService(null);
    }
  }, [confirmServices]);
  console.log(postError,'post')
  const handleToggle = (serviceName, sfoCode) => {
    const toggledValue = !formState[serviceName];
    setLastToggledService({ serviceName, toggledValue });

    const payload = [
      {
        mdn:MDN,
        sfoEnabled: toggledValue ? "Y" : "N",
        sfoCode,
      },
    ];

    dispatch(postServices(payload));
  };

  if (loadError) return <p className="text-center text-danger mt-4">Failed to fetch services.</p>;
  return (
    <Fragment>
      {confirmServices?.responseInfo?.responseCode === "00" && (
      <Notification
        type="success"
        title="Service updated successfully!"
        fullBleed={true}
        inline={false}
        disableFocus={true}
      />
    )}
    {postError?.responseInfo?.responseCode === "99"  && (
        <Notification
        type="error"
        title="Something went wrong"
        fullBleed={false}
        inline={false}
        disableFocus={true}
      />
      )}
      <Loader active={isFetching} fullscreen />
    <PageContent>
      
      <Title size='2XLarge' bold='true'>{common.getItemValue(pageItems,'BlockserviceHeader')}</Title>
      <br></br>
      <Body size="large">{common.mtnFormat(mtn)}</Body>


      
      <br></br>
      {Object.entries(serviceDetailsMap).map(([category, services]) => (
        <div >

          {services.map(({ serviceName, sfoCode }) => (
            <div
              key={serviceName}
            >
              
               <ServiceWrapper>
                <Title size='medium'>{serviceName}</Title>
                
                    <Toggle
                      value="default"
                      surface="light"
                      surfaceType="colorFill"
                      showText={false}
                      textWeight="regular"
                      textSize="small"
                      textPosition="left"
                      on={formState[serviceName] || false}
                      data-track={serviceName}
                      statusText={(e) => e ? 'On' : 'Off'}
                      onChange={() => handleToggle(serviceName, sfoCode)}
                    />
                
                </ServiceWrapper>
                <TextLinkWrapper>
                <TextLink
                  type="standAlone"
                  surface="light"
                  disabled={false}
                  onClick={() => {
                    history.push(`/service-details/${encodeURIComponent(serviceName)}`);
                  }}
                >
                  {common.getItemValue(pageItems,"TellMeMoreHeader")}
                </TextLink>
                </TextLinkWrapper>
              <Line />
            </div>
          ))}
        </div>
      ))}
    </PageContent>
    </Fragment>
  );
};


const ServiceWrapper = styled.div`
  padding-top:15px;
  align-items:center;
  display:flex;
  justify-content:space-between;  
`;
const TextLinkWrapper = styled.div`
  padding-bottom:15px;
`;
const PageContent = styled.div`
  padding-right:10px;
  padding-left:10px;
`;
export default BlockServices;
