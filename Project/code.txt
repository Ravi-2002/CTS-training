import React from 'react';
import { render, screen } from '@testing-library/react';
import BlockServices from './BlockServices';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import rootReducer from '../../reducers';
import { MemoryRouter } from 'react-router-dom';

// Mocked state for testing
const store = createStore(rootReducer, {
  Detail: {
    serviceCalls: {
      services: {
        "Emails & domains": {
          isExpand: false,
          data: [
            {
              sfoCode: "1",
              serviceName: "Email Service 1",
              shortDescription: "Short description for Email Service 1",
              longDescription: "Long description for Email Service 1",
              sfoEnabled: "Y",
              showMore: false
            },
            {
              sfoCode: "2",
              serviceName: "Email Service 2",
              shortDescription: "Short description for Email Service 2",
              longDescription: "Long description for Email Service 2",
              sfoEnabled: "N",
              showMore: false
            }
          ]
        }
      },
      serviceStatus: { responseInfo: { responseCode: 0 } },
      getServices: true,
      confirmServices: null,
      failServices: null,
      serviceErrorFlag: false,
      confirmServiceFlag: false,
      isFetching: false
    }
  }
});

describe('BlockServices Component', () => {
  it('should render Block Services correctly', () => {
    render(
      <Provider store={store}>
        <MemoryRouter initialEntries={['/']} initialIndex={0}>
          <BlockServices location={{ state: { devices: [], isSingleDevice: false, selectedDevice: null } }} />
        </MemoryRouter>
      </Provider>
    );

    // Check if the accordion is rendered correctly
    const blockServicesAccordion = screen.getByTestId('BlockServicesTestId');
    expect(blockServicesAccordion).toBeInTheDocument();
    
    // Check if the block title is rendered
    const blockTitle = screen.getByText(/Block services/i);
    expect(blockTitle).toBeInTheDocument();

    // You can add more checks here depending on the specific elements in your component.
  });

  it('should handle empty state gracefully', () => {
    render(
      <Provider store={store}>
        <MemoryRouter initialEntries={['/']} initialIndex={0}>
          <BlockServices location={{ state: {} }} />
        </MemoryRouter>
      </Provider>
    );

    // The component should still render even with an empty state
    const blockServicesAccordion = screen.getByTestId('BlockServicesTestId');
    expect(blockServicesAccordion).toBeInTheDocument();
  });

  it('should handle missing location state gracefully', () => {
    render(
      <Provider store={store}>
        <MemoryRouter initialEntries={['/']} initialIndex={0}>
          <BlockServices />
        </MemoryRouter>
      </Provider>
    );

    // The component should still render even without the location prop
    const blockServicesAccordion = screen.getByTestId('BlockServicesTestId');
    expect(blockServicesAccordion).toBeInTheDocument();
  });
});