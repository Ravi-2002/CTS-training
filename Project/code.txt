import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import BlockCallsList from '../BlockCallsList';
import { useSelector, useDispatch } from 'react-redux';
import { postDeleteBlockCallMsg, getCallsMessages } from '../../actions/fetchCallsMessages';
import { createMemoryHistory } from 'history';
import { Router } from 'react-router-dom';
import * as util from '../../../../../shared/utilities/util';

jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

jest.mock('../../actions/fetchCallsMessages', () => ({
  getCallsMessages: jest.fn(() => ({ type: 'MOCK_GET_CALLS_MESSAGES' })),
  postDeleteBlockCallMsg: jest.fn(),
}));

jest.mock('../../../../../shared/utilities/util', () => ({
  __esModule: true,
  default: {
    mtnFormat: jest.fn(() => '123-456-7890'),
    getItemValue: jest.fn(() => 'Block Calls and Messages Title'),
    getContentFromSection: jest.fn(() => ({
      sections: [
        {
          contents: [
            {
              items: [{ title: 'callsandMessageTitle' }],
            },
          ],
        },
      ],
    })),
  },
  nativeSetTitle: jest.fn(),
}));

describe('BlockCallsList', () => {
  const dispatch = jest.fn();
  const history = createMemoryHistory();

  const renderComponent = (stateOverrides = {}) => {
    useDispatch.mockReturnValue(dispatch);
    useSelector.mockImplementation((selectorFn) =>
      selectorFn({
        Detail: {
          blockedNumbers: stateOverrides.blockedNumbers || [
            { phoneNumber: '1111111111' },
            { phoneNumber: '2222222222' },
          ],
          addBlockCallMsg: stateOverrides.addBlockCallMsg || null,
          deleteBlockCallMsg: stateOverrides.deleteBlockCallMsg || null,
          isFetching: stateOverrides.isFetching || false,
          callsMessages: {
            aemResponse: {
              sections: [
                {
                  sections: [
                    {
                      data: { mtn: '9876543210' },
                    },
                  ],
                },
              ],
            },
          },
        },
      })
    );

    localStorage.setItem('mdn', '9876543210');

    return render(
      <Router location={history.location} navigator={history}>
        <BlockCallsList history={history} />
      </Router>
    );
  };

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should render loader when isFetching is true', () => {
    renderComponent({ isFetching: true });
    expect(screen.getByRole('progressbar')).toBeInTheDocument();
  });

  it('should render title and formatted mtn', () => {
    renderComponent();
    expect(screen.getByText('Block Calls and Messages Title')).toBeInTheDocument();
    expect(screen.getByText('123-456-7890')).toBeInTheDocument();
  });

  it('should render blocked numbers and remove button', () => {
    renderComponent();
    expect(screen.getByText('1111111111')).toBeInTheDocument();
    expect(screen.getByText('2222222222')).toBeInTheDocument();

    const closeButtons = screen.getAllByRole('button');
    expect(closeButtons.length).toBeGreaterThanOrEqual(2); // Remove buttons present
  });

  it('should dispatch deleteBlockCallMsg on remove', () => {
    renderComponent();
    const closeButton = screen.getAllByRole('button')[0];
    fireEvent.click(closeButton);
    expect(postDeleteBlockCallMsg).toHaveBeenCalledWith(
      expect.objectContaining({
        mtn: '9876543210',
        blockNumber: '1111111111',
        oldPhoneNumber: '1111111111',
      })
    );
  });

  it('should show correct block count text', () => {
    renderComponent();
    expect(screen.getByText('You are blocking 2 of 5 numbers.')).toBeInTheDocument();
  });

  it('should disable add number button when 5 blocked numbers', () => {
    const numbers = Array(5).fill({ phoneNumber: '0000000000' });
    renderComponent({ blockedNumbers: numbers });
    const addButton = screen.getByRole('button', { name: /add a number/i });
    expect(addButton).toBeDisabled();
  });

  it('should navigate to add number screen on button click', () => {
    renderComponent();
    const addButton = screen.getByRole('button', { name: /add a number/i });
    fireEvent.click(addButton);
    expect(history.location.pathname).toBe('/callsandmessages');
  });

  it('should navigate to limitations on link click', () => {
    renderComponent();
    const link = screen.getByText('View Limitations');
    fireEvent.click(link);
    expect(history.location.pathname).toBe('/viewlimitation');
  });

  it('should fallback to blockedNumbers if addBlockCallMsg is not available', () => {
    renderComponent({
      addBlockCallMsg: null,
      blockedNumbers: [{ phoneNumber: '9999999999' }],
    });
    expect(screen.getByText('9999999999')).toBeInTheDocument();
  });

  it('should fallback to deleteBlockCallMsg if available', () => {
    renderComponent({
      deleteBlockCallMsg: { blockedPhoneNumbers: [{ phoneNumber: '8888888888' }] },
    });
    expect(screen.getByText('8888888888')).toBeInTheDocument();
  });
});