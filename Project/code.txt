import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import "@testing-library/jest-dom";
import { Provider } from "react-redux";
import thunk from "redux-thunk";
import configureStore from "redux-mock-store";
import BlockCallsMessages from "../blockCallsMessages";
import * as actions from "../../actions/fetchCallsMessages";

const mockStore = configureStore([thunk]);

describe("BlockCallsMessages Component", () => {
  let store;

  beforeEach(() => {
    store = mockStore({
      Detail: {
        callsMsgs: {
          callsMessages: {
            remainingBlockCount: 5,
            addedBlockCount: 2,
          },
          blockedNumbers: [
            { phoneNumber: "1234567890", memo: "Test Memo", isEdit: false },
          ],
          expiredNumbers: [
            { phoneNumber: "9876543210", memo: "Expired Memo" },
          ],
          getCMError: { statusCode: "00", errorMessage: "" },
          blockAgainResponse: {
            successMsg: "Block again success",
            failureMsg: "Block again failed",
          },
          addBlockCallMsg: {
            statusCode: "00",
            successMsg: "Add success",
            failureMsg: "Add failed",
            hasSuccessMsg: true,
            hasFailureMsg: false,
          },
          editBlockCallMsg: {
            successMsg: "Edit success",
            failureMsg: "Edit failed",
          },
          deleteBlockCallMsg: {
            successMsg: "Delete success",
            failureMsg: "Delete failed",
          },
          editAllBlockCallMsg: {
            successMsg: "Edit all success",
            failureMsg: "Edit all failed",
          },
          isFetching: false,
        },
      },
    });

    window.scrollTo = jest.fn();
    delete window.location;
    window.location = { href: "" };
  });

  test("renders BlockCallsMessages component", () => {
    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    expect(screen.getByText(/Block calls & messages/i)).toBeInTheDocument();
    expect(screen.getByText(/Block a new number/i)).toBeInTheDocument();
  });

  test("displays loader when isFetching is true", () => {
    store = mockStore({
      Detail: {
        callsMsgs: {
          isFetching: true,
        },
      },
    });

    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    expect(screen.getByTestId("loader")).toBeInTheDocument();
  });

  test("handles handleOnChange for valid phone number", () => {
    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    const input = screen.getByPlaceholderText("XXX.XXX.XXXX");
    fireEvent.change(input, { target: { value: "1234567890" } });

    expect(input.value).toBe("123.456.7890");
  });

  test("handles handleOnChange for invalid phone number", () => {
    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    const input = screen.getByPlaceholderText("XXX.XXX.XXXX");
    fireEvent.change(input, { target: { value: "123" } });

    expect(input.value).toBe("123");
    expect(screen.getByText(/Please enter valid phone number/i)).toBeInTheDocument();
  });

  test("handles handleAddNumber with success response", async () => {
    const mockPostAddBlockCallMsg = jest.fn(() => Promise.resolve());
    actions.postaddBlockCallMsg = mockPostAddBlockCallMsg;

    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    const input = screen.getByPlaceholderText("XXX.XXX.XXXX");
    fireEvent.change(input, { target: { value: "1234567890" } });

    const blockButton = screen.getByText("Block");
    fireEvent.click(blockButton);

    await waitFor(() => {
      expect(mockPostAddBlockCallMsg).toHaveBeenCalled();
      expect(screen.getByText(/Add success/i)).toBeInTheDocument();
    });
  });

  test("handles handleAddNumber with failure response", async () => {
    const mockPostAddBlockCallMsg = jest.fn(() => Promise.reject());
    actions.postaddBlockCallMsg = mockPostAddBlockCallMsg;

    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    const input = screen.getByPlaceholderText("XXX.XXX.XXXX");
    fireEvent.change(input, { target: { value: "1234567890" } });

    const blockButton = screen.getByText("Block");
    fireEvent.click(blockButton);

    await waitFor(() => {
      expect(mockPostAddBlockCallMsg).toHaveBeenCalled();
      expect(screen.getByText(/Add failed/i)).toBeInTheDocument();
    });
  });

  test("handles deleteNumber with success response", async () => {
    const mockPostDeleteBlockCallMsg = jest.fn(() => Promise.resolve());
    actions.postDeleteBlockCallMsg = mockPostDeleteBlockCallMsg;

    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    const deleteButton = screen.getByText(/Unblock/i);
    fireEvent.click(deleteButton);

    await waitFor(() => {
      expect(mockPostDeleteBlockCallMsg).toHaveBeenCalled();
      expect(screen.getByText(/Delete success/i)).toBeInTheDocument();
    });
  });

  test("handles deleteNumber with failure response", async () => {
    const mockPostDeleteBlockCallMsg = jest.fn(() => Promise.reject());
    actions.postDeleteBlockCallMsg = mockPostDeleteBlockCallMsg;

    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    const deleteButton = screen.getByText(/Unblock/i);
    fireEvent.click(deleteButton);

    await waitFor(() => {
      expect(mockPostDeleteBlockCallMsg).toHaveBeenCalled();
      expect(screen.getByText(/Delete failed/i)).toBeInTheDocument();
    });
  });

  test("handles handleToggle", () => {
    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    const toggleButton = screen.getByText(/What does a blocked contact experience/i);
    fireEvent.click(toggleButton);

    expect(screen.getByText(/Customers who call your number will hear/i)).toBeInTheDocument();
  });

  test("handles handleToggleSM", () => {
    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    const toggleButton = screen.getByText(/Report suspected spam text messages/i);
    fireEvent.click(toggleButton);

    expect(screen.getByText(/You may forward the suspected Spam message/i)).toBeInTheDocument();
  });

  test("handles navigateTo for support links", () => {
    render(
      <Provider store={store}>
        <BlockCallsMessages />
      </Provider>
    );

    const videoLink = screen.getByText(/Video: How to block services/i);
    fireEvent.click(videoLink);

    expect(window.location.href).toBe("https://www.verizonwireless.com/support/how-to-add-blocks-video/");
  });
});