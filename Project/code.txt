Your existing test file initializes a Redux store and renders the <BlockServices> component. It includes a basic test to check if the component mounts properly. Below, I’ll help enhance the file by adding test cases for other functionalities like handling services, toggling switches, and rendering modals.

Here’s the updated and expanded test file:

Updated Test File

import React from "react";
import { act, fireEvent, render, screen } from "@testing-library/react";
import { Provider } from "react-redux";
import { configureStore } from "redux-mock-store";
import "@testing-library/jest-dom";
import BlockServices from "./../components/blocksServices/BlockServices";
import { thunk } from "redux-thunk";

const mockStoreConfig = configureStore([thunk]);

const mockDeviceList = {
  pageAttributes: [
    {
      itemKey: "pageTitle",
      itemValue: "Devices blocks",
    },
  ],
  sections: [
    {
      sectionId: "devicesBlocksMainSection",
      sections: [
        {
          sectionId: "devicesBlockServicesPageSection",
          contents: [
            {
              items: [
                {
                  itemKey: "emailsDomainsHeader",
                  itemValue: "Emails & Domains",
                },
              ],
            },
          ],
          data: {
            serviceDetailsMap: {
              "Additional Services": [
                {
                  longDescription: "Block details for Caller ID.",
                  sfoEnabled: "N",
                  shortDescription: "Block your Caller ID",
                  serviceName: "Caller ID Blocking",
                  sfoCode: "48577",
                },
              ],
            },
          },
        },
      ],
    },
  ],
};

const store = mockStoreConfig({
  Detail: {
    serviceCalls: {
      confirmServiceFlag: false,
      confirmServices: null,
      failServices: {},
      getServices: true,
      isFetching: false,
      serviceErrorFlag: false,
      serviceFail: false,
      serviceStatus: {},
      services: mockDeviceList,
    },
  },
});

const initialProps = {
  actions: {
    getServices: jest.fn(() => []),
    postServices: jest.fn(() => []),
  },
};

describe("<BlockServices/>", () => {
  beforeEach(async () => {
    await act(async () =>
      render(
        <Provider store={store}>
          <BlockServices {...initialProps} />
        </Provider>
      )
    );
  });

  test("it should mount", () => {
    const blockServicesComponent = screen.getByTestId("BlockServicesTestId");
    expect(blockServicesComponent).toBeInTheDocument();
  });

  test("displays loader when fetching services", () => {
    const newStore = mockStoreConfig({
      Detail: {
        serviceCalls: {
          ...store.getState().Detail.serviceCalls,
          isFetching: true,
        },
      },
    });

    render(
      <Provider store={newStore}>
        <BlockServices {...initialProps} />
      </Provider>
    );

    expect(screen.getByTestId("loader")).toBeInTheDocument();
  });

  test("displays service list", () => {
    expect(screen.getByText("Caller ID Blocking")).toBeInTheDocument();
  });

  test("toggles service on and off", async () => {
    const toggleButton = screen.getByRole("checkbox", { name: /Caller ID Blocking Toggle Button Off/i });
    expect(toggleButton).not.toBeChecked();

    await act(async () => {
      fireEvent.click(toggleButton);
    });

    expect(initialProps.actions.postServices).toHaveBeenCalled();
  });

  test("renders modal for service details", async () => {
    const viewMoreLink = screen.getByText(/View More Details/i);
    expect(viewMoreLink).toBeInTheDocument();

    await act(async () => {
      fireEvent.click(viewMoreLink);
    });

    expect(screen.getByText(/Further details/i)).toBeInTheDocument();
  });

  test("shows alert on service failure", () => {
    const failedStore = mockStoreConfig({
      Detail: {
        serviceCalls: {
          ...store.getState().Detail.serviceCalls,
          serviceFail: true,
          failServices: { errorMessage: "Service failed." },
        },
      },
    });

    render(
      <Provider store={failedStore}>
        <BlockServices {...initialProps} />
      </Provider>
    );

    expect(screen.getByText(/Service failed./i)).toBeInTheDocument();
  });
});

Key Additions in the Enhanced Test File

1. Loader Test: Checks if the loader displays during a service fetch.


2. Service List Render: Confirms services are rendered based on mock data.


3. Toggle Test: Simulates toggling a service and verifies the action is called.


4. Modal Test: Validates modal functionality when "View More Details" is clicked.


5. Alert Test: Ensures an alert is displayed on service failure.



Steps to Run the Tests

1. Save the updated file.


2. Run the test suite:

npm test


3. Check for code coverage:

npm test -- --coverage



This should give you comprehensive test coverage for the BlockServices component. Let me know if you need further assistance!

