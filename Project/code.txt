import * as actions from '../../actions/callsMessagesActions';
import httpClient, {
  getHttpClientRequest,
  postHttpClientRequest
} from "../../../../../shared/services/httpClient";
import configureStore from "../../../../../shared/store/configureStore";
import rootReducer from "../../../reducers";

jest.mock("../../../../../shared/services/httpClient", () => ({
  ...jest.requireActual("../../../../../shared/services/httpClient"),
  getHttpClientRequest: jest.fn(),
  postHttpClientRequest: jest.fn()
}));

const store = configureStore(rootReducer);

describe('CallsMessagesActions', () => {
  let responseData;

  beforeEach(() => {
    responseData = {
      responseInfo: {
        responseCode: "00"
      },
      body: {
        blockedPhoneNumbers: ['123'],
        expiredBlockedPhoneNumbers: ['456']
      }
    };
  });

  test("getCallsMessages success - responseCode 00", async () => {
    getHttpClientRequest.mockImplementationOnce(() =>
      Promise.resolve({ status: 200, data: responseData })
    );

    await store.dispatch(actions.getCallsMessages());

    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test("getCallsMessages success - responseCode not 00", async () => {
    const failedData = {
      responseInfo: { responseCode: "99" },
      body: { error: "error" }
    };

    getHttpClientRequest.mockImplementationOnce(() =>
      Promise.resolve({ status: 200, data: failedData })
    );

    await store.dispatch(actions.getCallsMessages());
    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test("getCallsMessages failure", async () => {
    getHttpClientRequest.mockImplementationOnce(() =>
      Promise.reject({ body: { error: "fail" } })
    );

    await store.dispatch(actions.getCallsMessages());
    expect(getHttpClientRequest).toHaveBeenCalled();
  });

  test("postaddBlockCallMsg success - responseCode 00", async () => {
    postHttpClientRequest.mockImplementationOnce(() =>
      Promise.resolve({ status: 200, data: responseData })
    );

    await store.dispatch(actions.postaddBlockCallMsg({ number: "123" }));
    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test("postaddBlockCallMsg success - responseCode not 00", async () => {
    const failData = {
      responseInfo: { responseCode: "99" },
      body: { msg: "error" }
    };
    postHttpClientRequest.mockImplementationOnce(() =>
      Promise.resolve({ status: 200, data: failData })
    );

    await store.dispatch(actions.postaddBlockCallMsg({ number: "123" }));
    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test("postaddBlockCallMsg failure", async () => {
    postHttpClientRequest.mockImplementationOnce(() =>
      Promise.reject({ body: { msg: "fail" } })
    );

    await store.dispatch(actions.postaddBlockCallMsg({ number: "123" }));
    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test("postDeleteBlockCallMsg success - responseCode 00", async () => {
    postHttpClientRequest.mockImplementationOnce(() =>
      Promise.resolve({ status: 200, data: responseData })
    );

    await store.dispatch(actions.postDeleteBlockCallMsg({ number: "123" }));
    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test("postDeleteBlockCallMsg success - responseCode not 00", async () => {
    const failData = {
      responseInfo: { responseCode: "99" },
      body: { msg: "error" }
    };
    postHttpClientRequest.mockImplementationOnce(() =>
      Promise.resolve({ status: 200, data: failData })
    );

    await store.dispatch(actions.postDeleteBlockCallMsg({ number: "123" }));
    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  test("postDeleteBlockCallMsg failure", async () => {
    postHttpClientRequest.mockImplementationOnce(() =>
      Promise.reject({ body: { msg: "fail" } })
    );

    await store.dispatch(actions.postDeleteBlockCallMsg({ number: "123" }));
    expect(postHttpClientRequest).toHaveBeenCalled();
  });

  // Individual Action Creators
  test("getCallsMessagesBegin", () => {
    expect(actions.getCallsMessagesBegin()).toEqual({ type: actions.GET_CALLS_MESSAGES_BEGIN });
  });

  test("getCallsMessagesSuccess", () => {
    const payload = {
      body: {
        blockedPhoneNumbers: ['123'],
        expiredBlockedPhoneNumbers: ['456']
      }
    };
    expect(actions.getCallsMessagesSuccess(payload)).toEqual({
      type: actions.GET_CALLS_MESSAGES_SUCCESS,
      payload: payload.body,
      blockedNumbers: payload.body.blockedPhoneNumbers,
      expiredBlockNumbers: payload.body.expiredBlockedPhoneNumbers
    });
  });

  test("getCallsMessagesError", () => {
    const payload = { body: { error: "fail" } };
    expect(actions.getCallsMessagesError(payload)).toEqual({
      type: actions.GET_CALLS_MESSAGES_FAIL,
      payloadGetCMError: payload.body
    });
  });

  test("postaddBlockCallMsgBegin", () => {
    expect(actions.postaddBlockCallMsgBegin()).toEqual({
      type: actions.POST_ADD_CALL_MSG_BEGIN
    });
  });

  test("postaddBlockCallMsgSuccess", () => {
    const payload = { body: { data: "ok" } };
    expect(actions.postaddBlockCallMsgSuccess(payload)).toEqual({
      type: actions.POST_ADD_CALL_MSG_SUCCESS,
      payloadAddCallMsg: payload.body
    });
  });

  test("postaddBlockCallMsgError", () => {
    const payload = { body: { err: "fail" } };
    expect(actions.postaddBlockCallMsgError(payload)).toEqual({
      type: actions.POST_ADD_CALL_MSG_FAIL,
      payloadAddCallMsgError: payload.body
    });
  });

  test("postDeleteBlockCallMsgBegin", () => {
    expect(actions.postDeleteBlockCallMsgBegin()).toEqual({
      type: actions.POST_DELETE_CALL_MSG_BEGIN
    });
  });

  test("postDeleteBlockCallMsgSuccess", () => {
    const payload = { body: { data: "deleted" } };
    expect(actions.postDeleteBlockCallMsgSuccess(payload)).toEqual({
      type: actions.POST_DELETE_CALL_MSG_SUCCESS,
      payloadDeleteCallMsg: payload.body
    });
  });

  test("postDeleteBlockCallMsgError", () => {
    const payload = { body: { msg: "error" } };
    expect(actions.postDeleteBlockCallMsgError(payload)).toEqual({
      type: actions.POST_DELETE_CALL_MSG_FAIL,
      payloadDeleteCallMsgError: payload.body
    });
  });
});