import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import BlockCallsList from '../callsandmessages';
import '@testing-library/jest-dom';

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn()
}));

jest.mock('../../../../shared/utilities/util', () => ({
  getContentFromSection: jest.fn(() => ({
    contents: [{ items: [{ key: 'callsandMessageTitle', value: 'Block calls and messages' }, { key: 'TellMeMoreHeader', value: 'View Limitations' }] }]
  })),
  getItemValue: jest.fn((items, key) => {
    const found = items.find(i => i.key === key);
    return found ? found.value : '';
  }),
  mtnFormat: jest.fn(() => 'FormattedMTN')
}));

jest.mock('../../../../shared/utilities/native', () => ({
  nativeSetTitle: jest.fn()
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();

describe('BlockCallsList', () => {
  let store;
  let history;

  beforeEach(() => {
    useDispatch.mockReturnValue(mockDispatch);
    localStorage.setItem('mdn', '1234567890');
    history = createMemoryHistory();
  });

  const setup = (stateOverrides = {}) => {
    store = mockStore({
      Detail: {
        blockedNumbers: [],
        addBlockCallMsg: {},
        deleteBlockCallMsg: {},
        isFetching: false,
        callsMessages: {
          aemResponse: {
            sections: [
              {
                sections: [
                  {
                    data: { mtn: '9876543210' }
                  }
                ]
              }
            ]
          }
        },
        ...stateOverrides
      }
    });

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );
  };

  it('renders title and blocked number', () => {
    setup({ blockedNumbers: [{ phoneNumber: '1112223333' }] });
    expect(screen.getByText('Block calls and messages')).toBeInTheDocument();
    expect(screen.getByText('1112223333')).toBeInTheDocument();
    expect(screen.getByText('FormattedMTN')).toBeInTheDocument();
  });

  it('renders number from addBlockCallMsg', () => {
    setup({ addBlockCallMsg: { blockedPhoneNumbers: [{ phoneNumber: '9999999999' }] } });
    expect(screen.getByText('9999999999')).toBeInTheDocument();
  });

  it('renders number from deleteBlockCallMsg', () => {
    setup({ deleteBlockCallMsg: { blockedPhoneNumbers: [{ phoneNumber: '8888888888' }] } });
    expect(screen.getByText('8888888888')).toBeInTheDocument();
  });

  it('disables Add button when 5 numbers are blocked', () => {
    setup({
      blockedNumbers: [
        { phoneNumber: '1' }, { phoneNumber: '2' }, { phoneNumber: '3' },
        { phoneNumber: '4' }, { phoneNumber: '5' }
      ]
    });
    expect(screen.getByRole('button', { name: /Add a number/i })).toBeDisabled();
  });

  it('navigates to view limitations page', () => {
    setup();
    const link = screen.getByText('View Limitations');
    fireEvent.click(link);
    expect(history.location.pathname).toBe('/viewlimitation');
  });

  it('navigates to add number input page', () => {
    setup();
    const addButton = screen.getByRole('button', { name: /Add a number/i });
    fireEvent.click(addButton);
    expect(history.location.pathname).toBe('/callsandmessages');
  });

  it('dispatches on remove click', () => {
    setup({ blockedNumbers: [{ phoneNumber: '1231231234' }] });
    const removeButton = screen.getByRole('button', { name: /close/i });
    fireEvent.click(removeButton);
    expect(mockDispatch).toHaveBeenCalled();
  });
});