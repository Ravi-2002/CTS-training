// BlockCallsList.test.js
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useDispatch, useSelector } from 'react-redux';
import { Router } from 'react-router-dom';
import { createMemoryHistory } from 'history';
import configureStore from 'redux-mock-store';
import BlockCallsList from '../callsandmessages';
import '@testing-library/jest-dom';

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useDispatch: jest.fn(),
  useSelector: jest.fn()
}));

jest.mock('../../../../shared/utilities/util', () => ({
  __esModule: true,
  default: {
    getItemValue: jest.fn(() => 'Block calls and messages'),
    mtnFormat: jest.fn((v) => v)
  }
}));

jest.mock('../../../../shared/utilities/native', () => ({
  nativeSetTitle: jest.fn()
}));

const mockStore = configureStore([]);
const mockDispatch = jest.fn();

describe('BlockCallsList Component', () => {
  let store;
  let history;

  beforeEach(() => {
    localStorage.setItem('mdn', '1234567890');
    useDispatch.mockReturnValue(mockDispatch);

    store = mockStore({});
    history = createMemoryHistory();
    history.push('/call-message-blocking');

    useSelector.mockImplementation((cb) =>
      cb({
        Detail: {
          blockedNumbers: [],
          addBlockCallMsg: {},
          deleteBlockCallMsg: {},
          isFetching: false,
          callsMessages: {
            aemResponse: {
              sections: [
                {
                  sections: [
                    {
                      data: {
                        mtn: '1234567890'
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      })
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the component with title and formatted number', () => {
    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );

    expect(screen.getByText('Block calls and messages')).toBeInTheDocument();
    expect(screen.getByText('1234567890')).toBeInTheDocument();
  });

  it('renders list from addBlockCallMsg', () => {
    useSelector.mockImplementation((cb) =>
      cb({
        Detail: {
          blockedNumbers: [],
          addBlockCallMsg: {
            blockedPhoneNumbers: [{ phoneNumber: '8888888888' }]
          },
          deleteBlockCallMsg: {},
          isFetching: false,
          callsMessages: {
            aemResponse: {
              sections: [
                {
                  sections: [
                    {
                      data: { mtn: '1234567890' }
                    }
                  ]
                }
              ]
            }
          }
        }
      })
    );

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );

    expect(screen.getByText('8888888888')).toBeInTheDocument();
  });

  it('renders list from deleteBlockCallMsg', () => {
    useSelector.mockImplementation((cb) =>
      cb({
        Detail: {
          blockedNumbers: [],
          addBlockCallMsg: {},
          deleteBlockCallMsg: {
            blockedPhoneNumbers: [{ phoneNumber: '7777777777' }]
          },
          isFetching: false,
          callsMessages: {
            aemResponse: {
              sections: [
                {
                  sections: [
                    {
                      data: { mtn: '1234567890' }
                    }
                  ]
                }
              ]
            }
          }
        }
      })
    );

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );

    expect(screen.getByText('7777777777')).toBeInTheDocument();
  });

  it('disables Add button when 5 numbers blocked', () => {
    useSelector.mockImplementation((cb) =>
      cb({
        Detail: {
          blockedNumbers: [
            { phoneNumber: '1' },
            { phoneNumber: '2' },
            { phoneNumber: '3' },
            { phoneNumber: '4' },
            { phoneNumber: '5' }
          ],
          addBlockCallMsg: {},
          deleteBlockCallMsg: {},
          isFetching: false,
          callsMessages: {
            aemResponse: {
              sections: [
                {
                  sections: [
                    {
                      data: { mtn: '1234567890' }
                    }
                  ]
                }
              ]
            }
          }
        }
      })
    );

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );

    expect(screen.getByRole('button', { name: /Add a number/i })).toBeDisabled();
  });

  it('navigates to view limitation page on link click', () => {
    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );

    fireEvent.click(screen.getByText(/View Limitations/i));
    expect(history.location.pathname).toBe('/viewlimitation');
  });

  it('navigates to add number input page on button click', () => {
    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );

    fireEvent.click(screen.getByRole('button', { name: /Add a number/i }));
    expect(history.location.pathname).toBe('/callsandmessages');
  });

  it('dispatches delete action when remove button is clicked', () => {
    useSelector.mockImplementation((cb) =>
      cb({
        Detail: {
          blockedNumbers: [{ phoneNumber: '1231231234' }],
          addBlockCallMsg: {},
          deleteBlockCallMsg: {},
          isFetching: false,
          callsMessages: {
            aemResponse: {
              sections: [
                {
                  sections: [
                    {
                      data: { mtn: '1234567890' }
                    }
                  ]
                }
              ]
            }
          }
        }
      })
    );

    render(
      <Provider store={store}>
        <Router history={history}>
          <BlockCallsList history={history} />
        </Router>
      </Provider>
    );

    fireEvent.click(screen.getByRole('button', { name: /close/i }));
    expect(mockDispatch).toHaveBeenCalled();
  });
});