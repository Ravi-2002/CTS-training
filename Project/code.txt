// __tests__/SettingPreferences.spec.tsx
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import SettingPreferences from "../SettingPreferences";

// ---- mocks ----
const mockCallMdotAndDdotRedirectURLs = jest.fn();
const mockGetOnClickInfo = jest.fn();
const mockGetOnClickInfoMobile = jest.fn();
const mockGetActionKey = jest.fn();

jest.mock("../../common", () => ({
  __esModule: true,
  callMdotAndDdotRedirectURLs: (...args: any[]) =>
    mockCallMdotAndDdotRedirectURLs(...args),
  getOnClickInfo: (...args: any[]) => mockGetOnClickInfo(...args),
  getOnClickInfoMobile: (...args: any[]) => mockGetOnClickInfoMobile(...args),
  getActionKey: (...args: any[]) => mockGetActionKey(...args),
}));

// reset mocks
beforeEach(() => {
  jest.clearAllMocks();
  delete (window as any).location;
  (window as any).location = { href: "" };
});

// ---- helpers ----
const baseProps = {
  enableBlocksMVA: false,
  selectedDevice: { encryptedMtnDES: "abc123" },
  channelIsMVA: false,
  pageContent: { sections: [{ items: [{ id: "pref1", label: "Pref 1" }] }] },
  pageItems: [{ id: "pref1", label: "Pref 1" }],
};

describe("SettingPreferences", () => {
  it("renders accordion closed by default", () => {
    render(<SettingPreferences {...baseProps} />);
    expect(screen.getByText("Settings & Preferences")).toBeInTheDocument();
    expect(
      screen.queryByRole("button", { name: /Pref 1/i })
    ).not.toBeInTheDocument();
  });

  it("toggles accordion open and closed", () => {
    render(<SettingPreferences {...baseProps} />);
    fireEvent.click(screen.getByText("Settings & Preferences"));
    expect(screen.getByRole("button", { name: "Pref 1" })).toBeInTheDocument();
    fireEvent.click(screen.getByText("Settings & Preferences"));
    expect(
      screen.queryByRole("button", { name: "Pref 1" })
    ).not.toBeInTheDocument();
  });

  it("calls callMdotAndDdotRedirectURLs for normal preference", () => {
    render(<SettingPreferences {...baseProps} />);
    fireEvent.click(screen.getByText("Settings & Preferences"));
    fireEvent.click(screen.getByRole("button", { name: "Pref 1" }));
    expect(mockCallMdotAndDdotRedirectURLs).toHaveBeenCalledWith(
      "pref1",
      baseProps.pageContent,
      baseProps.pageItems
    );
  });

  it("handles backupContentToVerizonCloudBtn with non-MVA", () => {
    render(
      <SettingPreferences
        {...baseProps}
        pageItems={[{ id: "backupContentToVerizonCloudBtn", label: "Backup" }]}
      />
    );
    fireEvent.click(screen.getByText("Settings & Preferences"));
    fireEvent.click(screen.getByRole("button", { name: "Backup" }));
    expect(mockCallMdotAndDdotRedirectURLs).toHaveBeenCalled();
  });

  it("handles blockCallsAndMessagesBtn with channelIsMVA=false", () => {
    render(
      <SettingPreferences
        {...baseProps}
        pageItems={[{ id: "blockCallsAndMessagesBtn", label: "Block Calls" }]}
      />
    );
    fireEvent.click(screen.getByText("Settings & Preferences"));
    fireEvent.click(screen.getByRole("button", { name: "Block Calls" }));
    expect(mockCallMdotAndDdotRedirectURLs).toHaveBeenCalled();
  });

  it("handles blockCallsAndMessagesBtn with channelIsMVA=true, enableBlocksMVA=false", () => {
    render(
      <SettingPreferences
        {...baseProps}
        channelIsMVA={true}
        enableBlocksMVA={false}
        pageItems={[{ id: "blockCallsAndMessagesBtn", label: "Block Calls" }]}
      />
    );
    fireEvent.click(screen.getByText("Settings & Preferences"));
    fireEvent.click(screen.getByRole("button", { name: "Block Calls" }));
    expect(mockGetOnClickInfoMobile).toHaveBeenCalled();
  });

  it("handles blockCallsAndMessagesBtn with channelIsMVA=true, enableBlocksMVA=true", () => {
    mockGetActionKey.mockReturnValue("key123");
    mockGetOnClickInfo.mockReturnValue({ actionHref: "/go/to/" });

    render(
      <SettingPreferences
        {...baseProps}
        channelIsMVA={true}
        enableBlocksMVA={true}
        pageItems={[{ id: "blockCallsAndMessagesBtn", label: "Block Calls" }]}
      />
    );
    fireEvent.click(screen.getByText("Settings & Preferences"));
    fireEvent.click(screen.getByRole("button", { name: "Block Calls" }));

    expect(mockGetActionKey).toHaveBeenCalledWith(
      baseProps.pageItems,
      "blockCallsAndMessagesBtn"
    );
    expect(mockGetOnClickInfo).toHaveBeenCalledWith(
      baseProps.pageContent,
      "nsa_key123_mva"
    );
    expect(window.location.href).toBe("/go/to/abc123");
  });

  it("handles blockSpecificServicesBtn with channelIsMVA=true, enableBlocksMVA=true", () => {
    mockGetActionKey.mockReturnValue("specKey");
    mockGetOnClickInfo.mockReturnValue({ actionHref: "/service/" });

    render(
      <SettingPreferences
        {...baseProps}
        channelIsMVA={true}
        enableBlocksMVA={true}
        pageItems={[{ id: "blockSpecificServicesBtn", label: "Block Service" }]}
      />
    );
    fireEvent.click(screen.getByText("Settings & Preferences"));
    fireEvent.click(screen.getByRole("button", { name: "Block Service" }));

    expect(window.location.href).toBe("/service/abc123");
  });
});