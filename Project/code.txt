it("redirects via getOnClickInfo with nsa_action_mva key for blockCallsAndMessagesBtn", () => {
    delete (window as any).location;
    (window as any).location = { href: "" };

    (getClientChannelId as jest.Mock).mockReturnValue("VZW-MFA");
    (getOnClickInfo as jest.Mock).mockImplementation((_, key) => {
      if (key.includes("nsa_blockCallsAndMessagesBtn_action_mva")) {
        return { actionHref: "/calls-redirect/", onclick: jest.fn() };
      }
      return { actionHref: "/fallback/", onclick: jest.fn() };
    });

    render(<SettingPreferences {...props} />);
    fireEvent.click(screen.getByText("Block Calls"));

    expect((window as any).location.href).toBe(
      "/calls-redirect/encrypted-mdn-1"
    );
  });

  it("redirects via getOnClickInfo with nsa_action_mva key for blockSpecificServicesBtn", () => {
    delete (window as any).location;
    (window as any).location = { href: "" };

    (getClientChannelId as jest.Mock).mockReturnValue("VZW-MFA");
    (getOnClickInfo as jest.Mock).mockImplementation((_, key) => {
      if (key.includes("nsa_blockSpecificServicesBtn_action_mva")) {
        return { actionHref: "/services-redirect/", onclick: jest.fn() };
      }
      return { actionHref: "/fallback/", onclick: jest.fn() };
    });

    render(<SettingPreferences {...props} />);
    fireEvent.click(screen.getByText("Block Services"));

    expect((window as any).location.href).toBe(
      "/services-redirect/encrypted-mdn-1"
    );
  });