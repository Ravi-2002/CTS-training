it("should redirect to callFilterMVAUrl when btnType is 'turnon' and manageCallFilterMVAFFlag is true", () => {
  const mockHref = "http://mock-url";
  delete window.location;
  window.location = { search: "?q=1", href: "" };

  global.reactGlobals = {
    manageCallFilterMVAFFlag: true,
    callFilterMVAUrl: mockHref
  };

  const util = { getQueryParams: jest.fn(() => ({ selectedMDN: "12345" })) };
  global.util = util;

  callFilterFunc("turnon");

  expect(window.location.href).toBe(mockHref + "?q=1");
});
it("should call openNativePageWithParams when btnType is 'manage' and manageCallFilterMVAFFlag is false", () => {
  const mockFn = jest.fn();
  global.openNativePageWithParams = mockFn;

  global.reactGlobals = {
    manageCallFilterMVAFFlag: false
  };

  const util = { getQueryParams: jest.fn(() => ({ selectedMDN: "67890" })) };
  global.util = util;

  callFilterFunc("manage");

  expect(mockFn).toHaveBeenCalledWith(
    { man: "67890" },
    "deepLinkCallFilter"
  );
});