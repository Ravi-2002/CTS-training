import * as getcreateDeviceGroup from '../../actions/createDeviceGroupAction';
import httpClient, { getHttpClientRequest, postHttpClientRequest } from "../../../../../shared/services/httpClient";
import configureStore, { history } from "../../../../../shared/store/configureStore";
import rootReducer from "../../../reducers";
jest.mock("../../../../../shared/services/httpClient", () => ({
  ...jest.requireActual("../../../../../shared/services/httpClient"),
  postHttpClientRequest: jest.fn()
}));
;
var mobileConfig = {};
const store = configureStore(rootReducer);
global.mobileConfig = mobileConfig;
let responseData = {
  "responseInfo": {
      "timeStamp": "23-01-2023 04:35:22",
      "correlationId": "",
      "responseCode": "00",
      "responseMessage": "SUCCESS",
      "sectionErrors": []
  },
  "body":{
    "errorCode": "00"
  }
}

describe('TestCreateDeviceGroupAction', () => {
  

  test("createDeviceGroup  success",()=>{
    var reqData = {
      "groupName": 'hfg',
      "devicesList": [],
  }; 
    httpClient.postHttpClientRequest.mockImplementationOnce((reqData) => {
    
      return Promise.resolve({ status: 200, data: {...responseData} });
    
      })
      
      const promise = store.dispatch(getcreateDeviceGroup.createDeviceGroup('url',reqData, 'header'))
   
      expect(postHttpClientRequest).toHaveBeenCalled();
      expect(typeof promise).toBe('object')
    });
    test("createDeviceGroup  error",()=>{
      httpClient.postHttpClientRequest.mockImplementation(() => {
            return Promise.reject({ data: 'error' });
      });
        
        store.dispatch(getcreateDeviceGroup.createDeviceGroup())
        .then((res) =>{
        },(error) => {
          expect(error.data).toEqual('error');
        });
    
    });
    test("purgeStore action",()=>{
  
      store.dispatch(getcreateDeviceGroup.purgeStore())
  });
  test('CREATE_DEVICE_GROUP_BEGIN', () => {
    const expected = {
      type: 'CREATE_DEVICE_GROUP_BEGIN',
    };
    expect(getcreateDeviceGroup.createDeviceGroupBegin()).toEqual(expected);
  });

  test('CREATE_DEVICE_GROUP_SUCCESS', () => {
    const expected = {
      type: 'CREATE_DEVICE_GROUP_SUCCESS',
    };
    expect(getcreateDeviceGroup.createDeviceGroupSuccess()).toEqual(expected);
  });

  test('CREATE_DEVICE_GROUP_ERROR', () => {
    const expected = {
      type: 'CREATE_DEVICE_GROUP_ERROR',
    };
    expect(getcreateDeviceGroup.createDeviceGroupError()).toEqual(expected);
  });

});
