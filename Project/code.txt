import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import DeviceDetail from '../DeviceDetail';
import { devicedetail } from './mockResponse';  // Assuming mockResponse.js contains the mock data

// Mock Store
const mockStore = createStore(() => ({
  Detail: {
    Details: {
      isFetching: false,
      deviceDetails: devicedetail.body.sections[0].sections[1].contents[0],
    },
  },
}));

// Mock actions if needed
const mockActions = {
  getDeviceDetail: jest.fn(),
};

describe('DeviceDetail Component', () => {
  beforeEach(() => {
    render(
      <Provider store={mockStore}>
        <DeviceDetail actions={mockActions} location={{ state: { devices: [], selectedDevice: {} } }} />
      </Provider>
    );
  });

  it('should render the device detail page with correct headings', () => {
    // Verify the heading text for the page
    expect(screen.getByText(/Now, let's manage blocks for this device./i)).toBeInTheDocument();
    expect(screen.getByText(/Block calls & messages/i)).toBeInTheDocument();
    expect(screen.getByText(/Block services/i)).toBeInTheDocument();
  });

  it('should render the advanced controls section', () => {
    // Test to check if the "Advanced Controls" section is present
    expect(screen.getByText(/Advanced Controls/i)).toBeInTheDocument();
  });

  it('should show the device block details', () => {
    // Check if the device block section is displayed
    expect(screen.getByText(/This type of device does not receive calls or standard texts/i)).toBeInTheDocument();
    expect(screen.getByText(/You can block number using your Verizon Smart Family™ product./i)).toBeInTheDocument();
  });

  it('should handle the "See all devices" button click', async () => {
    const seeAllDevicesButton = screen.getByText(/See all devices/i);
    fireEvent.click(seeAllDevicesButton);
    // Add logic to check if the routing or state change happens after clicking
    // This can vary based on your routing setup, so assert the expected result here
    expect(mockActions.getDeviceDetail).toHaveBeenCalledTimes(1);
  });

  it('should show the apple modal link and handle its click', () => {
    const appleModalLink = screen.getByText(/Click here/i);
    fireEvent.click(appleModalLink);
    // Check if modal or new content appears
    expect(screen.getByText(/Apple iMessage note:/i)).toBeInTheDocument();
  });

  it('should render family base message if applicable', async () => {
    // Assert that the family base message appears for supported devices
    const familyBaseMessage = screen.getByText(/You can block number using your Verizon Smart Family™ product./i);
    expect(familyBaseMessage).toBeInTheDocument();
  });

  it('should display data only message if applicable', async () => {
    // Check if the "data only" message appears for applicable devices
    const dataOnlyMessage = screen.getByText(/This type of device does not receive calls or standard texts/i);
    expect(dataOnlyMessage).toBeInTheDocument();
  });
});